// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: platform/deployments.proto

#include "platform/deployments.pb.h"
#include "platform/deployments.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace improbable {
namespace platform {
namespace locator {

static const char* LocateServiceV2_method_names[] = {
  "/improbable.platform.locator.LocateServiceV2/Login",
};

std::unique_ptr< LocateServiceV2::Stub> LocateServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LocateServiceV2::Stub> stub(new LocateServiceV2::Stub(channel));
  return stub;
}

LocateServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(LocateServiceV2_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LocateServiceV2::Stub::Login(::grpc::ClientContext* context, const ::improbable::platform::locator::LoginRequest& request, ::improbable::platform::locator::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void LocateServiceV2::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::improbable::platform::locator::LoginRequest* request, ::improbable::platform::locator::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void LocateServiceV2::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::improbable::platform::locator::LoginRequest* request, ::improbable::platform::locator::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::locator::LoginResponse>* LocateServiceV2::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::improbable::platform::locator::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::locator::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::locator::LoginResponse>* LocateServiceV2::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::improbable::platform::locator::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

LocateServiceV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocateServiceV2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocateServiceV2::Service, ::improbable::platform::locator::LoginRequest, ::improbable::platform::locator::LoginResponse>(
          [](LocateServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::locator::LoginRequest* req,
             ::improbable::platform::locator::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

LocateServiceV2::Service::~Service() {
}

::grpc::Status LocateServiceV2::Service::Login(::grpc::ServerContext* context, const ::improbable::platform::locator::LoginRequest* request, ::improbable::platform::locator::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace improbable
}  // namespace platform
}  // namespace locator


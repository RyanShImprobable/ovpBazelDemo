// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: platform/deployments.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_platform_2fdeployments_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_platform_2fdeployments_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_platform_2fdeployments_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_platform_2fdeployments_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_platform_2fdeployments_2eproto;
namespace improbable {
namespace platform {
namespace locator {
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LoginResponse_LoginFailure;
class LoginResponse_LoginFailureDefaultTypeInternal;
extern LoginResponse_LoginFailureDefaultTypeInternal _LoginResponse_LoginFailure_default_instance_;
}  // namespace locator
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::platform::locator::LoginRequest* Arena::CreateMaybeMessage<::improbable::platform::locator::LoginRequest>(Arena*);
template<> ::improbable::platform::locator::LoginResponse* Arena::CreateMaybeMessage<::improbable::platform::locator::LoginResponse>(Arena*);
template<> ::improbable::platform::locator::LoginResponse_LoginFailure* Arena::CreateMaybeMessage<::improbable::platform::locator::LoginResponse_LoginFailure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace platform {
namespace locator {

enum LoginResponse_FailureStatus : int {
  LoginResponse_FailureStatus_UNKNOWN = 0,
  LoginResponse_FailureStatus_CAPACITY_EXCEEDED = 1,
  LoginResponse_FailureStatus_RATE_EXCEEDED = 2,
  LoginResponse_FailureStatus_LOGIN_TOKEN_EXPIRED = 3,
  LoginResponse_FailureStatus_PLAYER_IDENTITY_TOKEN_EXPIRED = 4,
  LoginResponse_FailureStatus_LoginResponse_FailureStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginResponse_FailureStatus_LoginResponse_FailureStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginResponse_FailureStatus_IsValid(int value);
constexpr LoginResponse_FailureStatus LoginResponse_FailureStatus_FailureStatus_MIN = LoginResponse_FailureStatus_UNKNOWN;
constexpr LoginResponse_FailureStatus LoginResponse_FailureStatus_FailureStatus_MAX = LoginResponse_FailureStatus_PLAYER_IDENTITY_TOKEN_EXPIRED;
constexpr int LoginResponse_FailureStatus_FailureStatus_ARRAYSIZE = LoginResponse_FailureStatus_FailureStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResponse_FailureStatus_descriptor();
template<typename T>
inline const std::string& LoginResponse_FailureStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResponse_FailureStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResponse_FailureStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResponse_FailureStatus_descriptor(), enum_t_value);
}
inline bool LoginResponse_FailureStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginResponse_FailureStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResponse_FailureStatus>(
    LoginResponse_FailureStatus_descriptor(), name, value);
}
// ===================================================================

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.locator.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.locator.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_platform_2fdeployments_2eproto);
    return ::descriptor_table_platform_2fdeployments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdentityTokenFieldNumber = 1,
    kLoginTokenFieldNumber = 2,
    kWorkerTypeFieldNumber = 3,
    kProtocolCapabilitiesFieldNumber = 4,
  };
  // string player_identity_token = 1;
  void clear_player_identity_token();
  const std::string& player_identity_token() const;
  void set_player_identity_token(const std::string& value);
  void set_player_identity_token(std::string&& value);
  void set_player_identity_token(const char* value);
  void set_player_identity_token(const char* value, size_t size);
  std::string* mutable_player_identity_token();
  std::string* release_player_identity_token();
  void set_allocated_player_identity_token(std::string* player_identity_token);
  private:
  const std::string& _internal_player_identity_token() const;
  void _internal_set_player_identity_token(const std::string& value);
  std::string* _internal_mutable_player_identity_token();
  public:

  // string login_token = 2;
  void clear_login_token();
  const std::string& login_token() const;
  void set_login_token(const std::string& value);
  void set_login_token(std::string&& value);
  void set_login_token(const char* value);
  void set_login_token(const char* value, size_t size);
  std::string* mutable_login_token();
  std::string* release_login_token();
  void set_allocated_login_token(std::string* login_token);
  private:
  const std::string& _internal_login_token() const;
  void _internal_set_login_token(const std::string& value);
  std::string* _internal_mutable_login_token();
  public:

  // string worker_type = 3;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // bytes protocol_capabilities = 4;
  void clear_protocol_capabilities();
  const std::string& protocol_capabilities() const;
  void set_protocol_capabilities(const std::string& value);
  void set_protocol_capabilities(std::string&& value);
  void set_protocol_capabilities(const char* value);
  void set_protocol_capabilities(const void* value, size_t size);
  std::string* mutable_protocol_capabilities();
  std::string* release_protocol_capabilities();
  void set_allocated_protocol_capabilities(std::string* protocol_capabilities);
  private:
  const std::string& _internal_protocol_capabilities() const;
  void _internal_set_protocol_capabilities(const std::string& value);
  std::string* _internal_mutable_protocol_capabilities();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.locator.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_identity_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_capabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2fdeployments_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse_LoginFailure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.locator.LoginResponse.LoginFailure) */ {
 public:
  inline LoginResponse_LoginFailure() : LoginResponse_LoginFailure(nullptr) {}
  virtual ~LoginResponse_LoginFailure();

  LoginResponse_LoginFailure(const LoginResponse_LoginFailure& from);
  LoginResponse_LoginFailure(LoginResponse_LoginFailure&& from) noexcept
    : LoginResponse_LoginFailure() {
    *this = ::std::move(from);
  }

  inline LoginResponse_LoginFailure& operator=(const LoginResponse_LoginFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse_LoginFailure& operator=(LoginResponse_LoginFailure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse_LoginFailure& default_instance();

  static inline const LoginResponse_LoginFailure* internal_default_instance() {
    return reinterpret_cast<const LoginResponse_LoginFailure*>(
               &_LoginResponse_LoginFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResponse_LoginFailure& a, LoginResponse_LoginFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse_LoginFailure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse_LoginFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse_LoginFailure* New() const final {
    return CreateMaybeMessage<LoginResponse_LoginFailure>(nullptr);
  }

  LoginResponse_LoginFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse_LoginFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse_LoginFailure& from);
  void MergeFrom(const LoginResponse_LoginFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse_LoginFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.locator.LoginResponse.LoginFailure";
  }
  protected:
  explicit LoginResponse_LoginFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_platform_2fdeployments_2eproto);
    return ::descriptor_table_platform_2fdeployments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .improbable.platform.locator.LoginResponse.FailureStatus status = 1;
  void clear_status();
  ::improbable::platform::locator::LoginResponse_FailureStatus status() const;
  void set_status(::improbable::platform::locator::LoginResponse_FailureStatus value);
  private:
  ::improbable::platform::locator::LoginResponse_FailureStatus _internal_status() const;
  void _internal_set_status(::improbable::platform::locator::LoginResponse_FailureStatus value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.locator.LoginResponse.LoginFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_platform_2fdeployments_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.locator.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  enum OutcomeCase {
    kFailure = 1,
    kProtocolSettings = 2,
    OUTCOME_NOT_SET = 0,
  };

  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.locator.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_platform_2fdeployments_2eproto);
    return ::descriptor_table_platform_2fdeployments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginResponse_LoginFailure LoginFailure;

  typedef LoginResponse_FailureStatus FailureStatus;
  static constexpr FailureStatus UNKNOWN =
    LoginResponse_FailureStatus_UNKNOWN;
  static constexpr FailureStatus CAPACITY_EXCEEDED =
    LoginResponse_FailureStatus_CAPACITY_EXCEEDED;
  static constexpr FailureStatus RATE_EXCEEDED =
    LoginResponse_FailureStatus_RATE_EXCEEDED;
  static constexpr FailureStatus LOGIN_TOKEN_EXPIRED =
    LoginResponse_FailureStatus_LOGIN_TOKEN_EXPIRED;
  static constexpr FailureStatus PLAYER_IDENTITY_TOKEN_EXPIRED =
    LoginResponse_FailureStatus_PLAYER_IDENTITY_TOKEN_EXPIRED;
  static inline bool FailureStatus_IsValid(int value) {
    return LoginResponse_FailureStatus_IsValid(value);
  }
  static constexpr FailureStatus FailureStatus_MIN =
    LoginResponse_FailureStatus_FailureStatus_MIN;
  static constexpr FailureStatus FailureStatus_MAX =
    LoginResponse_FailureStatus_FailureStatus_MAX;
  static constexpr int FailureStatus_ARRAYSIZE =
    LoginResponse_FailureStatus_FailureStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailureStatus_descriptor() {
    return LoginResponse_FailureStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& FailureStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailureStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailureStatus_Name.");
    return LoginResponse_FailureStatus_Name(enum_t_value);
  }
  static inline bool FailureStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FailureStatus* value) {
    return LoginResponse_FailureStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFailureFieldNumber = 1,
    kProtocolSettingsFieldNumber = 2,
  };
  // .improbable.platform.locator.LoginResponse.LoginFailure failure = 1;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::improbable::platform::locator::LoginResponse_LoginFailure& failure() const;
  ::improbable::platform::locator::LoginResponse_LoginFailure* release_failure();
  ::improbable::platform::locator::LoginResponse_LoginFailure* mutable_failure();
  void set_allocated_failure(::improbable::platform::locator::LoginResponse_LoginFailure* failure);
  private:
  const ::improbable::platform::locator::LoginResponse_LoginFailure& _internal_failure() const;
  ::improbable::platform::locator::LoginResponse_LoginFailure* _internal_mutable_failure();
  public:
  void unsafe_arena_set_allocated_failure(
      ::improbable::platform::locator::LoginResponse_LoginFailure* failure);
  ::improbable::platform::locator::LoginResponse_LoginFailure* unsafe_arena_release_failure();

  // bytes protocol_settings = 2;
  private:
  bool _internal_has_protocol_settings() const;
  public:
  void clear_protocol_settings();
  const std::string& protocol_settings() const;
  void set_protocol_settings(const std::string& value);
  void set_protocol_settings(std::string&& value);
  void set_protocol_settings(const char* value);
  void set_protocol_settings(const void* value, size_t size);
  std::string* mutable_protocol_settings();
  std::string* release_protocol_settings();
  void set_allocated_protocol_settings(std::string* protocol_settings);
  private:
  const std::string& _internal_protocol_settings() const;
  void _internal_set_protocol_settings(const std::string& value);
  std::string* _internal_mutable_protocol_settings();
  public:

  void clear_outcome();
  OutcomeCase outcome_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.locator.LoginResponse)
 private:
  class _Internal;
  void set_has_failure();
  void set_has_protocol_settings();

  inline bool has_outcome() const;
  inline void clear_has_outcome();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OutcomeUnion {
    OutcomeUnion() {}
    ::improbable::platform::locator::LoginResponse_LoginFailure* failure_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_settings_;
  } outcome_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_platform_2fdeployments_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// string player_identity_token = 1;
inline void LoginRequest::clear_player_identity_token() {
  player_identity_token_.ClearToEmpty();
}
inline const std::string& LoginRequest::player_identity_token() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginRequest.player_identity_token)
  return _internal_player_identity_token();
}
inline void LoginRequest::set_player_identity_token(const std::string& value) {
  _internal_set_player_identity_token(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginRequest.player_identity_token)
}
inline std::string* LoginRequest::mutable_player_identity_token() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginRequest.player_identity_token)
  return _internal_mutable_player_identity_token();
}
inline const std::string& LoginRequest::_internal_player_identity_token() const {
  return player_identity_token_.Get();
}
inline void LoginRequest::_internal_set_player_identity_token(const std::string& value) {
  
  player_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_player_identity_token(std::string&& value) {
  
  player_identity_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.locator.LoginRequest.player_identity_token)
}
inline void LoginRequest::set_player_identity_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.locator.LoginRequest.player_identity_token)
}
inline void LoginRequest::set_player_identity_token(const char* value,
    size_t size) {
  
  player_identity_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.locator.LoginRequest.player_identity_token)
}
inline std::string* LoginRequest::_internal_mutable_player_identity_token() {
  
  return player_identity_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_player_identity_token() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginRequest.player_identity_token)
  return player_identity_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_player_identity_token(std::string* player_identity_token) {
  if (player_identity_token != nullptr) {
    
  } else {
    
  }
  player_identity_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_identity_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.locator.LoginRequest.player_identity_token)
}

// string login_token = 2;
inline void LoginRequest::clear_login_token() {
  login_token_.ClearToEmpty();
}
inline const std::string& LoginRequest::login_token() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginRequest.login_token)
  return _internal_login_token();
}
inline void LoginRequest::set_login_token(const std::string& value) {
  _internal_set_login_token(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginRequest.login_token)
}
inline std::string* LoginRequest::mutable_login_token() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginRequest.login_token)
  return _internal_mutable_login_token();
}
inline const std::string& LoginRequest::_internal_login_token() const {
  return login_token_.Get();
}
inline void LoginRequest::_internal_set_login_token(const std::string& value) {
  
  login_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_login_token(std::string&& value) {
  
  login_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.locator.LoginRequest.login_token)
}
inline void LoginRequest::set_login_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.locator.LoginRequest.login_token)
}
inline void LoginRequest::set_login_token(const char* value,
    size_t size) {
  
  login_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.locator.LoginRequest.login_token)
}
inline std::string* LoginRequest::_internal_mutable_login_token() {
  
  return login_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_login_token() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginRequest.login_token)
  return login_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_login_token(std::string* login_token) {
  if (login_token != nullptr) {
    
  } else {
    
  }
  login_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.locator.LoginRequest.login_token)
}

// string worker_type = 3;
inline void LoginRequest::clear_worker_type() {
  worker_type_.ClearToEmpty();
}
inline const std::string& LoginRequest::worker_type() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginRequest.worker_type)
  return _internal_worker_type();
}
inline void LoginRequest::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginRequest.worker_type)
}
inline std::string* LoginRequest::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginRequest.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& LoginRequest::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void LoginRequest::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.locator.LoginRequest.worker_type)
}
inline void LoginRequest::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.locator.LoginRequest.worker_type)
}
inline void LoginRequest::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.locator.LoginRequest.worker_type)
}
inline std::string* LoginRequest::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_worker_type() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginRequest.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.locator.LoginRequest.worker_type)
}

// bytes protocol_capabilities = 4;
inline void LoginRequest::clear_protocol_capabilities() {
  protocol_capabilities_.ClearToEmpty();
}
inline const std::string& LoginRequest::protocol_capabilities() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginRequest.protocol_capabilities)
  return _internal_protocol_capabilities();
}
inline void LoginRequest::set_protocol_capabilities(const std::string& value) {
  _internal_set_protocol_capabilities(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginRequest.protocol_capabilities)
}
inline std::string* LoginRequest::mutable_protocol_capabilities() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginRequest.protocol_capabilities)
  return _internal_mutable_protocol_capabilities();
}
inline const std::string& LoginRequest::_internal_protocol_capabilities() const {
  return protocol_capabilities_.Get();
}
inline void LoginRequest::_internal_set_protocol_capabilities(const std::string& value) {
  
  protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_protocol_capabilities(std::string&& value) {
  
  protocol_capabilities_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.locator.LoginRequest.protocol_capabilities)
}
inline void LoginRequest::set_protocol_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.locator.LoginRequest.protocol_capabilities)
}
inline void LoginRequest::set_protocol_capabilities(const void* value,
    size_t size) {
  
  protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.locator.LoginRequest.protocol_capabilities)
}
inline std::string* LoginRequest::_internal_mutable_protocol_capabilities() {
  
  return protocol_capabilities_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_protocol_capabilities() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginRequest.protocol_capabilities)
  return protocol_capabilities_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_protocol_capabilities(std::string* protocol_capabilities) {
  if (protocol_capabilities != nullptr) {
    
  } else {
    
  }
  protocol_capabilities_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_capabilities,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.locator.LoginRequest.protocol_capabilities)
}

// -------------------------------------------------------------------

// LoginResponse_LoginFailure

// .improbable.platform.locator.LoginResponse.FailureStatus status = 1;
inline void LoginResponse_LoginFailure::clear_status() {
  status_ = 0;
}
inline ::improbable::platform::locator::LoginResponse_FailureStatus LoginResponse_LoginFailure::_internal_status() const {
  return static_cast< ::improbable::platform::locator::LoginResponse_FailureStatus >(status_);
}
inline ::improbable::platform::locator::LoginResponse_FailureStatus LoginResponse_LoginFailure::status() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginResponse.LoginFailure.status)
  return _internal_status();
}
inline void LoginResponse_LoginFailure::_internal_set_status(::improbable::platform::locator::LoginResponse_FailureStatus value) {
  
  status_ = value;
}
inline void LoginResponse_LoginFailure::set_status(::improbable::platform::locator::LoginResponse_FailureStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginResponse.LoginFailure.status)
}

// string description = 2;
inline void LoginResponse_LoginFailure::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& LoginResponse_LoginFailure::description() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginResponse.LoginFailure.description)
  return _internal_description();
}
inline void LoginResponse_LoginFailure::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginResponse.LoginFailure.description)
}
inline std::string* LoginResponse_LoginFailure::mutable_description() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginResponse.LoginFailure.description)
  return _internal_mutable_description();
}
inline const std::string& LoginResponse_LoginFailure::_internal_description() const {
  return description_.Get();
}
inline void LoginResponse_LoginFailure::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginResponse_LoginFailure::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.locator.LoginResponse.LoginFailure.description)
}
inline void LoginResponse_LoginFailure::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.locator.LoginResponse.LoginFailure.description)
}
inline void LoginResponse_LoginFailure::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.locator.LoginResponse.LoginFailure.description)
}
inline std::string* LoginResponse_LoginFailure::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginResponse_LoginFailure::release_description() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginResponse.LoginFailure.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse_LoginFailure::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.locator.LoginResponse.LoginFailure.description)
}

// -------------------------------------------------------------------

// LoginResponse

// .improbable.platform.locator.LoginResponse.LoginFailure failure = 1;
inline bool LoginResponse::_internal_has_failure() const {
  return outcome_case() == kFailure;
}
inline bool LoginResponse::has_failure() const {
  return _internal_has_failure();
}
inline void LoginResponse::set_has_failure() {
  _oneof_case_[0] = kFailure;
}
inline void LoginResponse::clear_failure() {
  if (_internal_has_failure()) {
    if (GetArena() == nullptr) {
      delete outcome_.failure_;
    }
    clear_has_outcome();
  }
}
inline ::improbable::platform::locator::LoginResponse_LoginFailure* LoginResponse::release_failure() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginResponse.failure)
  if (_internal_has_failure()) {
    clear_has_outcome();
      ::improbable::platform::locator::LoginResponse_LoginFailure* temp = outcome_.failure_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    outcome_.failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::locator::LoginResponse_LoginFailure& LoginResponse::_internal_failure() const {
  return _internal_has_failure()
      ? *outcome_.failure_
      : reinterpret_cast< ::improbable::platform::locator::LoginResponse_LoginFailure&>(::improbable::platform::locator::_LoginResponse_LoginFailure_default_instance_);
}
inline const ::improbable::platform::locator::LoginResponse_LoginFailure& LoginResponse::failure() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginResponse.failure)
  return _internal_failure();
}
inline ::improbable::platform::locator::LoginResponse_LoginFailure* LoginResponse::unsafe_arena_release_failure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.locator.LoginResponse.failure)
  if (_internal_has_failure()) {
    clear_has_outcome();
    ::improbable::platform::locator::LoginResponse_LoginFailure* temp = outcome_.failure_;
    outcome_.failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginResponse::unsafe_arena_set_allocated_failure(::improbable::platform::locator::LoginResponse_LoginFailure* failure) {
  clear_outcome();
  if (failure) {
    set_has_failure();
    outcome_.failure_ = failure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.locator.LoginResponse.failure)
}
inline ::improbable::platform::locator::LoginResponse_LoginFailure* LoginResponse::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_outcome();
    set_has_failure();
    outcome_.failure_ = CreateMaybeMessage< ::improbable::platform::locator::LoginResponse_LoginFailure >(GetArena());
  }
  return outcome_.failure_;
}
inline ::improbable::platform::locator::LoginResponse_LoginFailure* LoginResponse::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginResponse.failure)
  return _internal_mutable_failure();
}

// bytes protocol_settings = 2;
inline bool LoginResponse::_internal_has_protocol_settings() const {
  return outcome_case() == kProtocolSettings;
}
inline void LoginResponse::set_has_protocol_settings() {
  _oneof_case_[0] = kProtocolSettings;
}
inline void LoginResponse::clear_protocol_settings() {
  if (_internal_has_protocol_settings()) {
    outcome_.protocol_settings_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_outcome();
  }
}
inline const std::string& LoginResponse::protocol_settings() const {
  // @@protoc_insertion_point(field_get:improbable.platform.locator.LoginResponse.protocol_settings)
  return _internal_protocol_settings();
}
inline void LoginResponse::set_protocol_settings(const std::string& value) {
  _internal_set_protocol_settings(value);
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginResponse.protocol_settings)
}
inline std::string* LoginResponse::mutable_protocol_settings() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.locator.LoginResponse.protocol_settings)
  return _internal_mutable_protocol_settings();
}
inline const std::string& LoginResponse::_internal_protocol_settings() const {
  if (_internal_has_protocol_settings()) {
    return outcome_.protocol_settings_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LoginResponse::_internal_set_protocol_settings(const std::string& value) {
  if (!_internal_has_protocol_settings()) {
    clear_outcome();
    set_has_protocol_settings();
    outcome_.protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  outcome_.protocol_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginResponse::set_protocol_settings(std::string&& value) {
  // @@protoc_insertion_point(field_set:improbable.platform.locator.LoginResponse.protocol_settings)
  if (!_internal_has_protocol_settings()) {
    clear_outcome();
    set_has_protocol_settings();
    outcome_.protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  outcome_.protocol_settings_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.locator.LoginResponse.protocol_settings)
}
inline void LoginResponse::set_protocol_settings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_protocol_settings()) {
    clear_outcome();
    set_has_protocol_settings();
    outcome_.protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  outcome_.protocol_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.locator.LoginResponse.protocol_settings)
}
inline void LoginResponse::set_protocol_settings(const void* value,
                             size_t size) {
  if (!_internal_has_protocol_settings()) {
    clear_outcome();
    set_has_protocol_settings();
    outcome_.protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  outcome_.protocol_settings_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.locator.LoginResponse.protocol_settings)
}
inline std::string* LoginResponse::_internal_mutable_protocol_settings() {
  if (!_internal_has_protocol_settings()) {
    clear_outcome();
    set_has_protocol_settings();
    outcome_.protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return outcome_.protocol_settings_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginResponse::release_protocol_settings() {
  // @@protoc_insertion_point(field_release:improbable.platform.locator.LoginResponse.protocol_settings)
  if (_internal_has_protocol_settings()) {
    clear_has_outcome();
    return outcome_.protocol_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void LoginResponse::set_allocated_protocol_settings(std::string* protocol_settings) {
  if (has_outcome()) {
    clear_outcome();
  }
  if (protocol_settings != nullptr) {
    set_has_protocol_settings();
    outcome_.protocol_settings_.UnsafeSetDefault(protocol_settings);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(protocol_settings);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.locator.LoginResponse.protocol_settings)
}

inline bool LoginResponse::has_outcome() const {
  return outcome_case() != OUTCOME_NOT_SET;
}
inline void LoginResponse::clear_has_outcome() {
  _oneof_case_[0] = OUTCOME_NOT_SET;
}
inline LoginResponse::OutcomeCase LoginResponse::outcome_case() const {
  return LoginResponse::OutcomeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace locator
}  // namespace platform
}  // namespace improbable

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::improbable::platform::locator::LoginResponse_FailureStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::platform::locator::LoginResponse_FailureStatus>() {
  return ::improbable::platform::locator::LoginResponse_FailureStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_platform_2fdeployments_2eproto

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agonesshim/gameserver.proto

#include "agonesshim/gameserver.pb.h"
#include "agonesshim/gameserver.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace improbable {
namespace svp {
namespace agonesshim {

static const char* GameserverService_method_names[] = {
  "/improbable.svp.agonesshim.GameserverService/ListGameservers",
  "/improbable.svp.agonesshim.GameserverService/DeleteGameserver",
};

std::unique_ptr< GameserverService::Stub> GameserverService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GameserverService::Stub> stub(new GameserverService::Stub(channel));
  return stub;
}

GameserverService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListGameservers_(GameserverService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteGameserver_(GameserverService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GameserverService::Stub::ListGameservers(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::ListGameserversRequest& request, ::improbable::svp::agonesshim::ListGameserversResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListGameservers_, context, request, response);
}

void GameserverService::Stub::experimental_async::ListGameservers(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::ListGameserversRequest* request, ::improbable::svp::agonesshim::ListGameserversResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListGameservers_, context, request, response, std::move(f));
}

void GameserverService::Stub::experimental_async::ListGameservers(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::ListGameserversRequest* request, ::improbable::svp::agonesshim::ListGameserversResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListGameservers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::svp::agonesshim::ListGameserversResponse>* GameserverService::Stub::PrepareAsyncListGameserversRaw(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::ListGameserversRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::svp::agonesshim::ListGameserversResponse>::Create(channel_.get(), cq, rpcmethod_ListGameservers_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::svp::agonesshim::ListGameserversResponse>* GameserverService::Stub::AsyncListGameserversRaw(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::ListGameserversRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListGameserversRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameserverService::Stub::DeleteGameserver(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::DeleteGameserverRequest& request, ::improbable::svp::agonesshim::DeleteGameserverResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteGameserver_, context, request, response);
}

void GameserverService::Stub::experimental_async::DeleteGameserver(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::DeleteGameserverRequest* request, ::improbable::svp::agonesshim::DeleteGameserverResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteGameserver_, context, request, response, std::move(f));
}

void GameserverService::Stub::experimental_async::DeleteGameserver(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::DeleteGameserverRequest* request, ::improbable::svp::agonesshim::DeleteGameserverResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteGameserver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::svp::agonesshim::DeleteGameserverResponse>* GameserverService::Stub::PrepareAsyncDeleteGameserverRaw(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::DeleteGameserverRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::svp::agonesshim::DeleteGameserverResponse>::Create(channel_.get(), cq, rpcmethod_DeleteGameserver_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::svp::agonesshim::DeleteGameserverResponse>* GameserverService::Stub::AsyncDeleteGameserverRaw(::grpc::ClientContext* context, const ::improbable::svp::agonesshim::DeleteGameserverRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteGameserverRaw(context, request, cq);
  result->StartCall();
  return result;
}

GameserverService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameserverService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameserverService::Service, ::improbable::svp::agonesshim::ListGameserversRequest, ::improbable::svp::agonesshim::ListGameserversResponse>(
          [](GameserverService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::svp::agonesshim::ListGameserversRequest* req,
             ::improbable::svp::agonesshim::ListGameserversResponse* resp) {
               return service->ListGameservers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameserverService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameserverService::Service, ::improbable::svp::agonesshim::DeleteGameserverRequest, ::improbable::svp::agonesshim::DeleteGameserverResponse>(
          [](GameserverService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::svp::agonesshim::DeleteGameserverRequest* req,
             ::improbable::svp::agonesshim::DeleteGameserverResponse* resp) {
               return service->DeleteGameserver(ctx, req, resp);
             }, this)));
}

GameserverService::Service::~Service() {
}

::grpc::Status GameserverService::Service::ListGameservers(::grpc::ServerContext* context, const ::improbable::svp::agonesshim::ListGameserversRequest* request, ::improbable::svp::agonesshim::ListGameserversResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameserverService::Service::DeleteGameserver(::grpc::ServerContext* context, const ::improbable::svp::agonesshim::DeleteGameserverRequest* request, ::improbable::svp::agonesshim::DeleteGameserverResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace improbable
}  // namespace svp
}  // namespace agonesshim


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agonesshim/gameserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agonesshim_2fgameserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agonesshim_2fgameserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agonesshim_2fgameserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agonesshim_2fgameserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agonesshim_2fgameserver_2eproto;
namespace improbable {
namespace svp {
namespace agonesshim {
class DeleteGameserverRequest;
class DeleteGameserverRequestDefaultTypeInternal;
extern DeleteGameserverRequestDefaultTypeInternal _DeleteGameserverRequest_default_instance_;
class DeleteGameserverResponse;
class DeleteGameserverResponseDefaultTypeInternal;
extern DeleteGameserverResponseDefaultTypeInternal _DeleteGameserverResponse_default_instance_;
class GameserverInfo;
class GameserverInfoDefaultTypeInternal;
extern GameserverInfoDefaultTypeInternal _GameserverInfo_default_instance_;
class GameserverInfo_GameServerStatusPort;
class GameserverInfo_GameServerStatusPortDefaultTypeInternal;
extern GameserverInfo_GameServerStatusPortDefaultTypeInternal _GameserverInfo_GameServerStatusPort_default_instance_;
class GameserverLabelSelector;
class GameserverLabelSelectorDefaultTypeInternal;
extern GameserverLabelSelectorDefaultTypeInternal _GameserverLabelSelector_default_instance_;
class GameserverLabelSelector_MatchLabelsEntry_DoNotUse;
class GameserverLabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal;
extern GameserverLabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal _GameserverLabelSelector_MatchLabelsEntry_DoNotUse_default_instance_;
class ListGameserversRequest;
class ListGameserversRequestDefaultTypeInternal;
extern ListGameserversRequestDefaultTypeInternal _ListGameserversRequest_default_instance_;
class ListGameserversResponse;
class ListGameserversResponseDefaultTypeInternal;
extern ListGameserversResponseDefaultTypeInternal _ListGameserversResponse_default_instance_;
}  // namespace agonesshim
}  // namespace svp
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::svp::agonesshim::DeleteGameserverRequest* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::DeleteGameserverRequest>(Arena*);
template<> ::improbable::svp::agonesshim::DeleteGameserverResponse* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::DeleteGameserverResponse>(Arena*);
template<> ::improbable::svp::agonesshim::GameserverInfo* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::GameserverInfo>(Arena*);
template<> ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort>(Arena*);
template<> ::improbable::svp::agonesshim::GameserverLabelSelector* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::GameserverLabelSelector>(Arena*);
template<> ::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse>(Arena*);
template<> ::improbable::svp::agonesshim::ListGameserversRequest* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::ListGameserversRequest>(Arena*);
template<> ::improbable::svp::agonesshim::ListGameserversResponse* Arena::CreateMaybeMessage<::improbable::svp::agonesshim::ListGameserversResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace svp {
namespace agonesshim {

// ===================================================================

class GameserverLabelSelector_MatchLabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameserverLabelSelector_MatchLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameserverLabelSelector_MatchLabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GameserverLabelSelector_MatchLabelsEntry_DoNotUse();
  explicit GameserverLabelSelector_MatchLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GameserverLabelSelector_MatchLabelsEntry_DoNotUse& other);
  static const GameserverLabelSelector_MatchLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameserverLabelSelector_MatchLabelsEntry_DoNotUse*>(&_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.svp.agonesshim.GameserverLabelSelector.MatchLabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.svp.agonesshim.GameserverLabelSelector.MatchLabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class GameserverLabelSelector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.GameserverLabelSelector) */ {
 public:
  inline GameserverLabelSelector() : GameserverLabelSelector(nullptr) {}
  virtual ~GameserverLabelSelector();

  GameserverLabelSelector(const GameserverLabelSelector& from);
  GameserverLabelSelector(GameserverLabelSelector&& from) noexcept
    : GameserverLabelSelector() {
    *this = ::std::move(from);
  }

  inline GameserverLabelSelector& operator=(const GameserverLabelSelector& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameserverLabelSelector& operator=(GameserverLabelSelector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameserverLabelSelector& default_instance();

  static inline const GameserverLabelSelector* internal_default_instance() {
    return reinterpret_cast<const GameserverLabelSelector*>(
               &_GameserverLabelSelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameserverLabelSelector& a, GameserverLabelSelector& b) {
    a.Swap(&b);
  }
  inline void Swap(GameserverLabelSelector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameserverLabelSelector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameserverLabelSelector* New() const final {
    return CreateMaybeMessage<GameserverLabelSelector>(nullptr);
  }

  GameserverLabelSelector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameserverLabelSelector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameserverLabelSelector& from);
  void MergeFrom(const GameserverLabelSelector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameserverLabelSelector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.GameserverLabelSelector";
  }
  protected:
  explicit GameserverLabelSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMatchLabelsFieldNumber = 1,
  };
  // map<string, string> matchLabels = 1;
  int matchlabels_size() const;
  private:
  int _internal_matchlabels_size() const;
  public:
  void clear_matchlabels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_matchlabels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_matchlabels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      matchlabels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_matchlabels();

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.GameserverLabelSelector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GameserverLabelSelector_MatchLabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> matchlabels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// -------------------------------------------------------------------

class ListGameserversRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.ListGameserversRequest) */ {
 public:
  inline ListGameserversRequest() : ListGameserversRequest(nullptr) {}
  virtual ~ListGameserversRequest();

  ListGameserversRequest(const ListGameserversRequest& from);
  ListGameserversRequest(ListGameserversRequest&& from) noexcept
    : ListGameserversRequest() {
    *this = ::std::move(from);
  }

  inline ListGameserversRequest& operator=(const ListGameserversRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGameserversRequest& operator=(ListGameserversRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGameserversRequest& default_instance();

  static inline const ListGameserversRequest* internal_default_instance() {
    return reinterpret_cast<const ListGameserversRequest*>(
               &_ListGameserversRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListGameserversRequest& a, ListGameserversRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGameserversRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGameserversRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGameserversRequest* New() const final {
    return CreateMaybeMessage<ListGameserversRequest>(nullptr);
  }

  ListGameserversRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGameserversRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGameserversRequest& from);
  void MergeFrom(const ListGameserversRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGameserversRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.ListGameserversRequest";
  }
  protected:
  explicit ListGameserversRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kRequiredGameServerSelectorFieldNumber = 2,
  };
  // string namespace = 1;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // .improbable.svp.agonesshim.GameserverLabelSelector requiredGameServerSelector = 2;
  bool has_requiredgameserverselector() const;
  private:
  bool _internal_has_requiredgameserverselector() const;
  public:
  void clear_requiredgameserverselector();
  const ::improbable::svp::agonesshim::GameserverLabelSelector& requiredgameserverselector() const;
  ::improbable::svp::agonesshim::GameserverLabelSelector* release_requiredgameserverselector();
  ::improbable::svp::agonesshim::GameserverLabelSelector* mutable_requiredgameserverselector();
  void set_allocated_requiredgameserverselector(::improbable::svp::agonesshim::GameserverLabelSelector* requiredgameserverselector);
  private:
  const ::improbable::svp::agonesshim::GameserverLabelSelector& _internal_requiredgameserverselector() const;
  ::improbable::svp::agonesshim::GameserverLabelSelector* _internal_mutable_requiredgameserverselector();
  public:
  void unsafe_arena_set_allocated_requiredgameserverselector(
      ::improbable::svp::agonesshim::GameserverLabelSelector* requiredgameserverselector);
  ::improbable::svp::agonesshim::GameserverLabelSelector* unsafe_arena_release_requiredgameserverselector();

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.ListGameserversRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::improbable::svp::agonesshim::GameserverLabelSelector* requiredgameserverselector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// -------------------------------------------------------------------

class ListGameserversResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.ListGameserversResponse) */ {
 public:
  inline ListGameserversResponse() : ListGameserversResponse(nullptr) {}
  virtual ~ListGameserversResponse();

  ListGameserversResponse(const ListGameserversResponse& from);
  ListGameserversResponse(ListGameserversResponse&& from) noexcept
    : ListGameserversResponse() {
    *this = ::std::move(from);
  }

  inline ListGameserversResponse& operator=(const ListGameserversResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGameserversResponse& operator=(ListGameserversResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGameserversResponse& default_instance();

  static inline const ListGameserversResponse* internal_default_instance() {
    return reinterpret_cast<const ListGameserversResponse*>(
               &_ListGameserversResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListGameserversResponse& a, ListGameserversResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGameserversResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGameserversResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGameserversResponse* New() const final {
    return CreateMaybeMessage<ListGameserversResponse>(nullptr);
  }

  ListGameserversResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGameserversResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGameserversResponse& from);
  void MergeFrom(const ListGameserversResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGameserversResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.ListGameserversResponse";
  }
  protected:
  explicit ListGameserversResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameServerListFieldNumber = 1,
  };
  // repeated .improbable.svp.agonesshim.GameserverInfo gameServerList = 1;
  int gameserverlist_size() const;
  private:
  int _internal_gameserverlist_size() const;
  public:
  void clear_gameserverlist();
  ::improbable::svp::agonesshim::GameserverInfo* mutable_gameserverlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo >*
      mutable_gameserverlist();
  private:
  const ::improbable::svp::agonesshim::GameserverInfo& _internal_gameserverlist(int index) const;
  ::improbable::svp::agonesshim::GameserverInfo* _internal_add_gameserverlist();
  public:
  const ::improbable::svp::agonesshim::GameserverInfo& gameserverlist(int index) const;
  ::improbable::svp::agonesshim::GameserverInfo* add_gameserverlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo >&
      gameserverlist() const;

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.ListGameserversResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo > gameserverlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// -------------------------------------------------------------------

class GameserverInfo_GameServerStatusPort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort) */ {
 public:
  inline GameserverInfo_GameServerStatusPort() : GameserverInfo_GameServerStatusPort(nullptr) {}
  virtual ~GameserverInfo_GameServerStatusPort();

  GameserverInfo_GameServerStatusPort(const GameserverInfo_GameServerStatusPort& from);
  GameserverInfo_GameServerStatusPort(GameserverInfo_GameServerStatusPort&& from) noexcept
    : GameserverInfo_GameServerStatusPort() {
    *this = ::std::move(from);
  }

  inline GameserverInfo_GameServerStatusPort& operator=(const GameserverInfo_GameServerStatusPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameserverInfo_GameServerStatusPort& operator=(GameserverInfo_GameServerStatusPort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameserverInfo_GameServerStatusPort& default_instance();

  static inline const GameserverInfo_GameServerStatusPort* internal_default_instance() {
    return reinterpret_cast<const GameserverInfo_GameServerStatusPort*>(
               &_GameserverInfo_GameServerStatusPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameserverInfo_GameServerStatusPort& a, GameserverInfo_GameServerStatusPort& b) {
    a.Swap(&b);
  }
  inline void Swap(GameserverInfo_GameServerStatusPort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameserverInfo_GameServerStatusPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameserverInfo_GameServerStatusPort* New() const final {
    return CreateMaybeMessage<GameserverInfo_GameServerStatusPort>(nullptr);
  }

  GameserverInfo_GameServerStatusPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameserverInfo_GameServerStatusPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameserverInfo_GameServerStatusPort& from);
  void MergeFrom(const GameserverInfo_GameServerStatusPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameserverInfo_GameServerStatusPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort";
  }
  protected:
  explicit GameserverInfo_GameServerStatusPort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// -------------------------------------------------------------------

class GameserverInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.GameserverInfo) */ {
 public:
  inline GameserverInfo() : GameserverInfo(nullptr) {}
  virtual ~GameserverInfo();

  GameserverInfo(const GameserverInfo& from);
  GameserverInfo(GameserverInfo&& from) noexcept
    : GameserverInfo() {
    *this = ::std::move(from);
  }

  inline GameserverInfo& operator=(const GameserverInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameserverInfo& operator=(GameserverInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameserverInfo& default_instance();

  static inline const GameserverInfo* internal_default_instance() {
    return reinterpret_cast<const GameserverInfo*>(
               &_GameserverInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameserverInfo& a, GameserverInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameserverInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameserverInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameserverInfo* New() const final {
    return CreateMaybeMessage<GameserverInfo>(nullptr);
  }

  GameserverInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameserverInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameserverInfo& from);
  void MergeFrom(const GameserverInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameserverInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.GameserverInfo";
  }
  protected:
  explicit GameserverInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameserverInfo_GameServerStatusPort GameServerStatusPort;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 3,
    kStateFieldNumber = 1,
    kGameServerNameFieldNumber = 2,
    kAddressFieldNumber = 4,
  };
  // repeated .improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort ports = 3;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort >*
      mutable_ports();
  private:
  const ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort& _internal_ports(int index) const;
  ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* _internal_add_ports();
  public:
  const ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort& ports(int index) const;
  ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort >&
      ports() const;

  // string state = 1;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string gameServerName = 2;
  void clear_gameservername();
  const std::string& gameservername() const;
  void set_gameservername(const std::string& value);
  void set_gameservername(std::string&& value);
  void set_gameservername(const char* value);
  void set_gameservername(const char* value, size_t size);
  std::string* mutable_gameservername();
  std::string* release_gameservername();
  void set_allocated_gameservername(std::string* gameservername);
  private:
  const std::string& _internal_gameservername() const;
  void _internal_set_gameservername(const std::string& value);
  std::string* _internal_mutable_gameservername();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.GameserverInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort > ports_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameservername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// -------------------------------------------------------------------

class DeleteGameserverRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.DeleteGameserverRequest) */ {
 public:
  inline DeleteGameserverRequest() : DeleteGameserverRequest(nullptr) {}
  virtual ~DeleteGameserverRequest();

  DeleteGameserverRequest(const DeleteGameserverRequest& from);
  DeleteGameserverRequest(DeleteGameserverRequest&& from) noexcept
    : DeleteGameserverRequest() {
    *this = ::std::move(from);
  }

  inline DeleteGameserverRequest& operator=(const DeleteGameserverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGameserverRequest& operator=(DeleteGameserverRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGameserverRequest& default_instance();

  static inline const DeleteGameserverRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteGameserverRequest*>(
               &_DeleteGameserverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteGameserverRequest& a, DeleteGameserverRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGameserverRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGameserverRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGameserverRequest* New() const final {
    return CreateMaybeMessage<DeleteGameserverRequest>(nullptr);
  }

  DeleteGameserverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGameserverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGameserverRequest& from);
  void MergeFrom(const DeleteGameserverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGameserverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.DeleteGameserverRequest";
  }
  protected:
  explicit DeleteGameserverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 2;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.DeleteGameserverRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// -------------------------------------------------------------------

class DeleteGameserverResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.svp.agonesshim.DeleteGameserverResponse) */ {
 public:
  inline DeleteGameserverResponse() : DeleteGameserverResponse(nullptr) {}
  virtual ~DeleteGameserverResponse();

  DeleteGameserverResponse(const DeleteGameserverResponse& from);
  DeleteGameserverResponse(DeleteGameserverResponse&& from) noexcept
    : DeleteGameserverResponse() {
    *this = ::std::move(from);
  }

  inline DeleteGameserverResponse& operator=(const DeleteGameserverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteGameserverResponse& operator=(DeleteGameserverResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteGameserverResponse& default_instance();

  static inline const DeleteGameserverResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteGameserverResponse*>(
               &_DeleteGameserverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteGameserverResponse& a, DeleteGameserverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteGameserverResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteGameserverResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteGameserverResponse* New() const final {
    return CreateMaybeMessage<DeleteGameserverResponse>(nullptr);
  }

  DeleteGameserverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteGameserverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteGameserverResponse& from);
  void MergeFrom(const DeleteGameserverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteGameserverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.svp.agonesshim.DeleteGameserverResponse";
  }
  protected:
  explicit DeleteGameserverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agonesshim_2fgameserver_2eproto);
    return ::descriptor_table_agonesshim_2fgameserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.svp.agonesshim.DeleteGameserverResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agonesshim_2fgameserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GameserverLabelSelector

// map<string, string> matchLabels = 1;
inline int GameserverLabelSelector::_internal_matchlabels_size() const {
  return matchlabels_.size();
}
inline int GameserverLabelSelector::matchlabels_size() const {
  return _internal_matchlabels_size();
}
inline void GameserverLabelSelector::clear_matchlabels() {
  matchlabels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameserverLabelSelector::_internal_matchlabels() const {
  return matchlabels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameserverLabelSelector::matchlabels() const {
  // @@protoc_insertion_point(field_map:improbable.svp.agonesshim.GameserverLabelSelector.matchLabels)
  return _internal_matchlabels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameserverLabelSelector::_internal_mutable_matchlabels() {
  return matchlabels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameserverLabelSelector::mutable_matchlabels() {
  // @@protoc_insertion_point(field_mutable_map:improbable.svp.agonesshim.GameserverLabelSelector.matchLabels)
  return _internal_mutable_matchlabels();
}

// -------------------------------------------------------------------

// ListGameserversRequest

// string namespace = 1;
inline void ListGameserversRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& ListGameserversRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.ListGameserversRequest.namespace)
  return _internal_namespace_();
}
inline void ListGameserversRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.ListGameserversRequest.namespace)
}
inline std::string* ListGameserversRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.ListGameserversRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ListGameserversRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ListGameserversRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGameserversRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.ListGameserversRequest.namespace)
}
inline void ListGameserversRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.ListGameserversRequest.namespace)
}
inline void ListGameserversRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.ListGameserversRequest.namespace)
}
inline std::string* ListGameserversRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGameserversRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.ListGameserversRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGameserversRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.ListGameserversRequest.namespace)
}

// .improbable.svp.agonesshim.GameserverLabelSelector requiredGameServerSelector = 2;
inline bool ListGameserversRequest::_internal_has_requiredgameserverselector() const {
  return this != internal_default_instance() && requiredgameserverselector_ != nullptr;
}
inline bool ListGameserversRequest::has_requiredgameserverselector() const {
  return _internal_has_requiredgameserverselector();
}
inline void ListGameserversRequest::clear_requiredgameserverselector() {
  if (GetArena() == nullptr && requiredgameserverselector_ != nullptr) {
    delete requiredgameserverselector_;
  }
  requiredgameserverselector_ = nullptr;
}
inline const ::improbable::svp::agonesshim::GameserverLabelSelector& ListGameserversRequest::_internal_requiredgameserverselector() const {
  const ::improbable::svp::agonesshim::GameserverLabelSelector* p = requiredgameserverselector_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::svp::agonesshim::GameserverLabelSelector&>(
      ::improbable::svp::agonesshim::_GameserverLabelSelector_default_instance_);
}
inline const ::improbable::svp::agonesshim::GameserverLabelSelector& ListGameserversRequest::requiredgameserverselector() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.ListGameserversRequest.requiredGameServerSelector)
  return _internal_requiredgameserverselector();
}
inline void ListGameserversRequest::unsafe_arena_set_allocated_requiredgameserverselector(
    ::improbable::svp::agonesshim::GameserverLabelSelector* requiredgameserverselector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requiredgameserverselector_);
  }
  requiredgameserverselector_ = requiredgameserverselector;
  if (requiredgameserverselector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.svp.agonesshim.ListGameserversRequest.requiredGameServerSelector)
}
inline ::improbable::svp::agonesshim::GameserverLabelSelector* ListGameserversRequest::release_requiredgameserverselector() {
  
  ::improbable::svp::agonesshim::GameserverLabelSelector* temp = requiredgameserverselector_;
  requiredgameserverselector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::svp::agonesshim::GameserverLabelSelector* ListGameserversRequest::unsafe_arena_release_requiredgameserverselector() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.ListGameserversRequest.requiredGameServerSelector)
  
  ::improbable::svp::agonesshim::GameserverLabelSelector* temp = requiredgameserverselector_;
  requiredgameserverselector_ = nullptr;
  return temp;
}
inline ::improbable::svp::agonesshim::GameserverLabelSelector* ListGameserversRequest::_internal_mutable_requiredgameserverselector() {
  
  if (requiredgameserverselector_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::svp::agonesshim::GameserverLabelSelector>(GetArena());
    requiredgameserverselector_ = p;
  }
  return requiredgameserverselector_;
}
inline ::improbable::svp::agonesshim::GameserverLabelSelector* ListGameserversRequest::mutable_requiredgameserverselector() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.ListGameserversRequest.requiredGameServerSelector)
  return _internal_mutable_requiredgameserverselector();
}
inline void ListGameserversRequest::set_allocated_requiredgameserverselector(::improbable::svp::agonesshim::GameserverLabelSelector* requiredgameserverselector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete requiredgameserverselector_;
  }
  if (requiredgameserverselector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requiredgameserverselector);
    if (message_arena != submessage_arena) {
      requiredgameserverselector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requiredgameserverselector, submessage_arena);
    }
    
  } else {
    
  }
  requiredgameserverselector_ = requiredgameserverselector;
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.ListGameserversRequest.requiredGameServerSelector)
}

// -------------------------------------------------------------------

// ListGameserversResponse

// repeated .improbable.svp.agonesshim.GameserverInfo gameServerList = 1;
inline int ListGameserversResponse::_internal_gameserverlist_size() const {
  return gameserverlist_.size();
}
inline int ListGameserversResponse::gameserverlist_size() const {
  return _internal_gameserverlist_size();
}
inline void ListGameserversResponse::clear_gameserverlist() {
  gameserverlist_.Clear();
}
inline ::improbable::svp::agonesshim::GameserverInfo* ListGameserversResponse::mutable_gameserverlist(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.ListGameserversResponse.gameServerList)
  return gameserverlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo >*
ListGameserversResponse::mutable_gameserverlist() {
  // @@protoc_insertion_point(field_mutable_list:improbable.svp.agonesshim.ListGameserversResponse.gameServerList)
  return &gameserverlist_;
}
inline const ::improbable::svp::agonesshim::GameserverInfo& ListGameserversResponse::_internal_gameserverlist(int index) const {
  return gameserverlist_.Get(index);
}
inline const ::improbable::svp::agonesshim::GameserverInfo& ListGameserversResponse::gameserverlist(int index) const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.ListGameserversResponse.gameServerList)
  return _internal_gameserverlist(index);
}
inline ::improbable::svp::agonesshim::GameserverInfo* ListGameserversResponse::_internal_add_gameserverlist() {
  return gameserverlist_.Add();
}
inline ::improbable::svp::agonesshim::GameserverInfo* ListGameserversResponse::add_gameserverlist() {
  // @@protoc_insertion_point(field_add:improbable.svp.agonesshim.ListGameserversResponse.gameServerList)
  return _internal_add_gameserverlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo >&
ListGameserversResponse::gameserverlist() const {
  // @@protoc_insertion_point(field_list:improbable.svp.agonesshim.ListGameserversResponse.gameServerList)
  return gameserverlist_;
}

// -------------------------------------------------------------------

// GameserverInfo_GameServerStatusPort

// string name = 1;
inline void GameserverInfo_GameServerStatusPort::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameserverInfo_GameServerStatusPort::name() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
  return _internal_name();
}
inline void GameserverInfo_GameServerStatusPort::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
}
inline std::string* GameserverInfo_GameServerStatusPort::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
  return _internal_mutable_name();
}
inline const std::string& GameserverInfo_GameServerStatusPort::_internal_name() const {
  return name_.Get();
}
inline void GameserverInfo_GameServerStatusPort::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameserverInfo_GameServerStatusPort::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
}
inline void GameserverInfo_GameServerStatusPort::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
}
inline void GameserverInfo_GameServerStatusPort::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
}
inline std::string* GameserverInfo_GameServerStatusPort::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameserverInfo_GameServerStatusPort::release_name() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameserverInfo_GameServerStatusPort::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name)
}

// int32 port = 2;
inline void GameserverInfo_GameServerStatusPort::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameserverInfo_GameServerStatusPort::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameserverInfo_GameServerStatusPort::port() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.port)
  return _internal_port();
}
inline void GameserverInfo_GameServerStatusPort::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void GameserverInfo_GameServerStatusPort::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.port)
}

// -------------------------------------------------------------------

// GameserverInfo

// string state = 1;
inline void GameserverInfo::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& GameserverInfo::state() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.GameserverInfo.state)
  return _internal_state();
}
inline void GameserverInfo::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.GameserverInfo.state)
}
inline std::string* GameserverInfo::mutable_state() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.GameserverInfo.state)
  return _internal_mutable_state();
}
inline const std::string& GameserverInfo::_internal_state() const {
  return state_.Get();
}
inline void GameserverInfo::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameserverInfo::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.GameserverInfo.state)
}
inline void GameserverInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.GameserverInfo.state)
}
inline void GameserverInfo::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.GameserverInfo.state)
}
inline std::string* GameserverInfo::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameserverInfo::release_state() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.GameserverInfo.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameserverInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.GameserverInfo.state)
}

// string gameServerName = 2;
inline void GameserverInfo::clear_gameservername() {
  gameservername_.ClearToEmpty();
}
inline const std::string& GameserverInfo::gameservername() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.GameserverInfo.gameServerName)
  return _internal_gameservername();
}
inline void GameserverInfo::set_gameservername(const std::string& value) {
  _internal_set_gameservername(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.GameserverInfo.gameServerName)
}
inline std::string* GameserverInfo::mutable_gameservername() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.GameserverInfo.gameServerName)
  return _internal_mutable_gameservername();
}
inline const std::string& GameserverInfo::_internal_gameservername() const {
  return gameservername_.Get();
}
inline void GameserverInfo::_internal_set_gameservername(const std::string& value) {
  
  gameservername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameserverInfo::set_gameservername(std::string&& value) {
  
  gameservername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.GameserverInfo.gameServerName)
}
inline void GameserverInfo::set_gameservername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gameservername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.GameserverInfo.gameServerName)
}
inline void GameserverInfo::set_gameservername(const char* value,
    size_t size) {
  
  gameservername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.GameserverInfo.gameServerName)
}
inline std::string* GameserverInfo::_internal_mutable_gameservername() {
  
  return gameservername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameserverInfo::release_gameservername() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.GameserverInfo.gameServerName)
  return gameservername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameserverInfo::set_allocated_gameservername(std::string* gameservername) {
  if (gameservername != nullptr) {
    
  } else {
    
  }
  gameservername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameservername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.GameserverInfo.gameServerName)
}

// repeated .improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort ports = 3;
inline int GameserverInfo::_internal_ports_size() const {
  return ports_.size();
}
inline int GameserverInfo::ports_size() const {
  return _internal_ports_size();
}
inline void GameserverInfo::clear_ports() {
  ports_.Clear();
}
inline ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* GameserverInfo::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.GameserverInfo.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort >*
GameserverInfo::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:improbable.svp.agonesshim.GameserverInfo.ports)
  return &ports_;
}
inline const ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort& GameserverInfo::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort& GameserverInfo::ports(int index) const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.GameserverInfo.ports)
  return _internal_ports(index);
}
inline ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* GameserverInfo::_internal_add_ports() {
  return ports_.Add();
}
inline ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* GameserverInfo::add_ports() {
  // @@protoc_insertion_point(field_add:improbable.svp.agonesshim.GameserverInfo.ports)
  return _internal_add_ports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort >&
GameserverInfo::ports() const {
  // @@protoc_insertion_point(field_list:improbable.svp.agonesshim.GameserverInfo.ports)
  return ports_;
}

// string address = 4;
inline void GameserverInfo::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GameserverInfo::address() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.GameserverInfo.address)
  return _internal_address();
}
inline void GameserverInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.GameserverInfo.address)
}
inline std::string* GameserverInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.GameserverInfo.address)
  return _internal_mutable_address();
}
inline const std::string& GameserverInfo::_internal_address() const {
  return address_.Get();
}
inline void GameserverInfo::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GameserverInfo::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.GameserverInfo.address)
}
inline void GameserverInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.GameserverInfo.address)
}
inline void GameserverInfo::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.GameserverInfo.address)
}
inline std::string* GameserverInfo::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GameserverInfo::release_address() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.GameserverInfo.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameserverInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.GameserverInfo.address)
}

// -------------------------------------------------------------------

// DeleteGameserverRequest

// string name = 1;
inline void DeleteGameserverRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteGameserverRequest::name() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.DeleteGameserverRequest.name)
  return _internal_name();
}
inline void DeleteGameserverRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.DeleteGameserverRequest.name)
}
inline std::string* DeleteGameserverRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.DeleteGameserverRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteGameserverRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteGameserverRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteGameserverRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.DeleteGameserverRequest.name)
}
inline void DeleteGameserverRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.DeleteGameserverRequest.name)
}
inline void DeleteGameserverRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.DeleteGameserverRequest.name)
}
inline std::string* DeleteGameserverRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteGameserverRequest::release_name() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.DeleteGameserverRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteGameserverRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.DeleteGameserverRequest.name)
}

// string namespace = 2;
inline void DeleteGameserverRequest::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& DeleteGameserverRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
  return _internal_namespace_();
}
inline void DeleteGameserverRequest::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
}
inline std::string* DeleteGameserverRequest::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& DeleteGameserverRequest::_internal_namespace_() const {
  return namespace__.Get();
}
inline void DeleteGameserverRequest::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteGameserverRequest::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
}
inline void DeleteGameserverRequest::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
}
inline void DeleteGameserverRequest::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
}
inline std::string* DeleteGameserverRequest::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteGameserverRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteGameserverRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.svp.agonesshim.DeleteGameserverRequest.namespace)
}

// -------------------------------------------------------------------

// DeleteGameserverResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agonesshim
}  // namespace svp
}  // namespace improbable

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agonesshim_2fgameserver_2eproto

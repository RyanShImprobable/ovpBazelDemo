// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agonesshim/gameserver.proto

#include "agonesshim/gameserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_agonesshim_2fgameserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameserverInfo_agonesshim_2fgameserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agonesshim_2fgameserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agonesshim_2fgameserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agonesshim_2fgameserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_agonesshim_2fgameserver_2eproto;
namespace improbable {
namespace svp {
namespace agonesshim {
class GameserverLabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameserverLabelSelector_MatchLabelsEntry_DoNotUse> _instance;
} _GameserverLabelSelector_MatchLabelsEntry_DoNotUse_default_instance_;
class GameserverLabelSelectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameserverLabelSelector> _instance;
} _GameserverLabelSelector_default_instance_;
class ListGameserversRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListGameserversRequest> _instance;
} _ListGameserversRequest_default_instance_;
class ListGameserversResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListGameserversResponse> _instance;
} _ListGameserversResponse_default_instance_;
class GameserverInfo_GameServerStatusPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameserverInfo_GameServerStatusPort> _instance;
} _GameserverInfo_GameServerStatusPort_default_instance_;
class GameserverInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameserverInfo> _instance;
} _GameserverInfo_default_instance_;
class DeleteGameserverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteGameserverRequest> _instance;
} _DeleteGameserverRequest_default_instance_;
class DeleteGameserverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteGameserverResponse> _instance;
} _DeleteGameserverResponse_default_instance_;
}  // namespace agonesshim
}  // namespace svp
}  // namespace improbable
static void InitDefaultsscc_info_DeleteGameserverRequest_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_DeleteGameserverRequest_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::DeleteGameserverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteGameserverRequest_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteGameserverRequest_agonesshim_2fgameserver_2eproto}, {}};

static void InitDefaultsscc_info_DeleteGameserverResponse_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_DeleteGameserverResponse_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::DeleteGameserverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteGameserverResponse_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteGameserverResponse_agonesshim_2fgameserver_2eproto}, {}};

static void InitDefaultsscc_info_GameserverInfo_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_GameserverInfo_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::GameserverInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameserverInfo_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameserverInfo_agonesshim_2fgameserver_2eproto}, {
      &scc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto.base,}};

static void InitDefaultsscc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_GameserverInfo_GameServerStatusPort_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto}, {}};

static void InitDefaultsscc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_GameserverLabelSelector_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::GameserverLabelSelector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto}, {
      &scc_info_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_agonesshim_2fgameserver_2eproto.base,}};

static void InitDefaultsscc_info_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_agonesshim_2fgameserver_2eproto}, {}};

static void InitDefaultsscc_info_ListGameserversRequest_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_ListGameserversRequest_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::ListGameserversRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListGameserversRequest_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListGameserversRequest_agonesshim_2fgameserver_2eproto}, {
      &scc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto.base,}};

static void InitDefaultsscc_info_ListGameserversResponse_agonesshim_2fgameserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::svp::agonesshim::_ListGameserversResponse_default_instance_;
    new (ptr) ::improbable::svp::agonesshim::ListGameserversResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListGameserversResponse_agonesshim_2fgameserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListGameserversResponse_agonesshim_2fgameserver_2eproto}, {
      &scc_info_GameserverInfo_agonesshim_2fgameserver_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_agonesshim_2fgameserver_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_agonesshim_2fgameserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_agonesshim_2fgameserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_agonesshim_2fgameserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverLabelSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverLabelSelector, matchlabels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::ListGameserversRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::ListGameserversRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::ListGameserversRequest, requiredgameserverselector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::ListGameserversResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::ListGameserversResponse, gameserverlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort, name_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo, state_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo, gameservername_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo, ports_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::GameserverInfo, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::DeleteGameserverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::DeleteGameserverRequest, name_),
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::DeleteGameserverRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::svp::agonesshim::DeleteGameserverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::improbable::svp::agonesshim::GameserverLabelSelector)},
  { 15, -1, sizeof(::improbable::svp::agonesshim::ListGameserversRequest)},
  { 22, -1, sizeof(::improbable::svp::agonesshim::ListGameserversResponse)},
  { 28, -1, sizeof(::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort)},
  { 35, -1, sizeof(::improbable::svp::agonesshim::GameserverInfo)},
  { 44, -1, sizeof(::improbable::svp::agonesshim::DeleteGameserverRequest)},
  { 51, -1, sizeof(::improbable::svp::agonesshim::DeleteGameserverResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_GameserverLabelSelector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_ListGameserversRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_ListGameserversResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_GameserverInfo_GameServerStatusPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_GameserverInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_DeleteGameserverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::svp::agonesshim::_DeleteGameserverResponse_default_instance_),
};

const char descriptor_table_protodef_agonesshim_2fgameserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033agonesshim/gameserver.proto\022\031improbabl"
  "e.svp.agonesshim\"\247\001\n\027GameserverLabelSele"
  "ctor\022X\n\013matchLabels\030\001 \003(\0132C.improbable.s"
  "vp.agonesshim.GameserverLabelSelector.Ma"
  "tchLabelsEntry\0322\n\020MatchLabelsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\203\001\n\026ListGames"
  "erversRequest\022\021\n\tnamespace\030\001 \001(\t\022V\n\032requ"
  "iredGameServerSelector\030\002 \001(\01322.improbabl"
  "e.svp.agonesshim.GameserverLabelSelector"
  "\"\\\n\027ListGameserversResponse\022A\n\016gameServe"
  "rList\030\001 \003(\0132).improbable.svp.agonesshim."
  "GameserverInfo\"\313\001\n\016GameserverInfo\022\r\n\005sta"
  "te\030\001 \001(\t\022\026\n\016gameServerName\030\002 \001(\t\022M\n\005port"
  "s\030\003 \003(\0132>.improbable.svp.agonesshim.Game"
  "serverInfo.GameServerStatusPort\022\017\n\007addre"
  "ss\030\004 \001(\t\0322\n\024GameServerStatusPort\022\014\n\004name"
  "\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\":\n\027DeleteGameserver"
  "Request\022\014\n\004name\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t"
  "\"\032\n\030DeleteGameserverResponse2\216\002\n\021Gameser"
  "verService\022z\n\017ListGameservers\0221.improbab"
  "le.svp.agonesshim.ListGameserversRequest"
  "\0322.improbable.svp.agonesshim.ListGameser"
  "versResponse\"\000\022}\n\020DeleteGameserver\0222.imp"
  "robable.svp.agonesshim.DeleteGameserverR"
  "equest\0323.improbable.svp.agonesshim.Delet"
  "eGameserverResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_agonesshim_2fgameserver_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_agonesshim_2fgameserver_2eproto_sccs[8] = {
  &scc_info_DeleteGameserverRequest_agonesshim_2fgameserver_2eproto.base,
  &scc_info_DeleteGameserverResponse_agonesshim_2fgameserver_2eproto.base,
  &scc_info_GameserverInfo_agonesshim_2fgameserver_2eproto.base,
  &scc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto.base,
  &scc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto.base,
  &scc_info_GameserverLabelSelector_MatchLabelsEntry_DoNotUse_agonesshim_2fgameserver_2eproto.base,
  &scc_info_ListGameserversRequest_agonesshim_2fgameserver_2eproto.base,
  &scc_info_ListGameserversResponse_agonesshim_2fgameserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_agonesshim_2fgameserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agonesshim_2fgameserver_2eproto = {
  false, false, descriptor_table_protodef_agonesshim_2fgameserver_2eproto, "agonesshim/gameserver.proto", 1029,
  &descriptor_table_agonesshim_2fgameserver_2eproto_once, descriptor_table_agonesshim_2fgameserver_2eproto_sccs, descriptor_table_agonesshim_2fgameserver_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_agonesshim_2fgameserver_2eproto::offsets,
  file_level_metadata_agonesshim_2fgameserver_2eproto, 8, file_level_enum_descriptors_agonesshim_2fgameserver_2eproto, file_level_service_descriptors_agonesshim_2fgameserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_agonesshim_2fgameserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_agonesshim_2fgameserver_2eproto)), true);
namespace improbable {
namespace svp {
namespace agonesshim {

// ===================================================================

GameserverLabelSelector_MatchLabelsEntry_DoNotUse::GameserverLabelSelector_MatchLabelsEntry_DoNotUse() {}
GameserverLabelSelector_MatchLabelsEntry_DoNotUse::GameserverLabelSelector_MatchLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GameserverLabelSelector_MatchLabelsEntry_DoNotUse::MergeFrom(const GameserverLabelSelector_MatchLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GameserverLabelSelector_MatchLabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GameserverLabelSelector_MatchLabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class GameserverLabelSelector::_Internal {
 public:
};

GameserverLabelSelector::GameserverLabelSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matchlabels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.GameserverLabelSelector)
}
GameserverLabelSelector::GameserverLabelSelector(const GameserverLabelSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchlabels_.MergeFrom(from.matchlabels_);
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.GameserverLabelSelector)
}

void GameserverLabelSelector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto.base);
}

GameserverLabelSelector::~GameserverLabelSelector() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.GameserverLabelSelector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameserverLabelSelector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameserverLabelSelector::ArenaDtor(void* object) {
  GameserverLabelSelector* _this = reinterpret_cast< GameserverLabelSelector* >(object);
  (void)_this;
}
void GameserverLabelSelector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameserverLabelSelector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameserverLabelSelector& GameserverLabelSelector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameserverLabelSelector_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void GameserverLabelSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.GameserverLabelSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchlabels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameserverLabelSelector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> matchLabels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&matchlabels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameserverLabelSelector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.GameserverLabelSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> matchLabels = 1;
  if (!this->_internal_matchlabels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "improbable.svp.agonesshim.GameserverLabelSelector.MatchLabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "improbable.svp.agonesshim.GameserverLabelSelector.MatchLabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_matchlabels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_matchlabels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_matchlabels().begin();
          it != this->_internal_matchlabels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GameserverLabelSelector_MatchLabelsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_matchlabels().begin();
          it != this->_internal_matchlabels().end(); ++it) {
        target = GameserverLabelSelector_MatchLabelsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.GameserverLabelSelector)
  return target;
}

size_t GameserverLabelSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.GameserverLabelSelector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> matchLabels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matchlabels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_matchlabels().begin();
      it != this->_internal_matchlabels().end(); ++it) {
    total_size += GameserverLabelSelector_MatchLabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameserverLabelSelector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.GameserverLabelSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const GameserverLabelSelector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameserverLabelSelector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.GameserverLabelSelector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.GameserverLabelSelector)
    MergeFrom(*source);
  }
}

void GameserverLabelSelector::MergeFrom(const GameserverLabelSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.GameserverLabelSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchlabels_.MergeFrom(from.matchlabels_);
}

void GameserverLabelSelector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.GameserverLabelSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameserverLabelSelector::CopyFrom(const GameserverLabelSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.GameserverLabelSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameserverLabelSelector::IsInitialized() const {
  return true;
}

void GameserverLabelSelector::InternalSwap(GameserverLabelSelector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matchlabels_.Swap(&other->matchlabels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameserverLabelSelector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListGameserversRequest::_Internal {
 public:
  static const ::improbable::svp::agonesshim::GameserverLabelSelector& requiredgameserverselector(const ListGameserversRequest* msg);
};

const ::improbable::svp::agonesshim::GameserverLabelSelector&
ListGameserversRequest::_Internal::requiredgameserverselector(const ListGameserversRequest* msg) {
  return *msg->requiredgameserverselector_;
}
ListGameserversRequest::ListGameserversRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.ListGameserversRequest)
}
ListGameserversRequest::ListGameserversRequest(const ListGameserversRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  if (from._internal_has_requiredgameserverselector()) {
    requiredgameserverselector_ = new ::improbable::svp::agonesshim::GameserverLabelSelector(*from.requiredgameserverselector_);
  } else {
    requiredgameserverselector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.ListGameserversRequest)
}

void ListGameserversRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListGameserversRequest_agonesshim_2fgameserver_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requiredgameserverselector_ = nullptr;
}

ListGameserversRequest::~ListGameserversRequest() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.ListGameserversRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListGameserversRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requiredgameserverselector_;
}

void ListGameserversRequest::ArenaDtor(void* object) {
  ListGameserversRequest* _this = reinterpret_cast< ListGameserversRequest* >(object);
  (void)_this;
}
void ListGameserversRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListGameserversRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListGameserversRequest& ListGameserversRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListGameserversRequest_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void ListGameserversRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.ListGameserversRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  if (GetArena() == nullptr && requiredgameserverselector_ != nullptr) {
    delete requiredgameserverselector_;
  }
  requiredgameserverselector_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListGameserversRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.ListGameserversRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.svp.agonesshim.GameserverLabelSelector requiredGameServerSelector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_requiredgameserverselector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListGameserversRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.ListGameserversRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.ListGameserversRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // .improbable.svp.agonesshim.GameserverLabelSelector requiredGameServerSelector = 2;
  if (this->has_requiredgameserverselector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::requiredgameserverselector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.ListGameserversRequest)
  return target;
}

size_t ListGameserversRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.ListGameserversRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // .improbable.svp.agonesshim.GameserverLabelSelector requiredGameServerSelector = 2;
  if (this->has_requiredgameserverselector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requiredgameserverselector_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListGameserversRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.ListGameserversRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGameserversRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListGameserversRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.ListGameserversRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.ListGameserversRequest)
    MergeFrom(*source);
  }
}

void ListGameserversRequest::MergeFrom(const ListGameserversRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.ListGameserversRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.has_requiredgameserverselector()) {
    _internal_mutable_requiredgameserverselector()->::improbable::svp::agonesshim::GameserverLabelSelector::MergeFrom(from._internal_requiredgameserverselector());
  }
}

void ListGameserversRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.ListGameserversRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGameserversRequest::CopyFrom(const ListGameserversRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.ListGameserversRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGameserversRequest::IsInitialized() const {
  return true;
}

void ListGameserversRequest::InternalSwap(ListGameserversRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(requiredgameserverselector_, other->requiredgameserverselector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListGameserversRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListGameserversResponse::_Internal {
 public:
};

ListGameserversResponse::ListGameserversResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gameserverlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.ListGameserversResponse)
}
ListGameserversResponse::ListGameserversResponse(const ListGameserversResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gameserverlist_(from.gameserverlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.ListGameserversResponse)
}

void ListGameserversResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListGameserversResponse_agonesshim_2fgameserver_2eproto.base);
}

ListGameserversResponse::~ListGameserversResponse() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.ListGameserversResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListGameserversResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListGameserversResponse::ArenaDtor(void* object) {
  ListGameserversResponse* _this = reinterpret_cast< ListGameserversResponse* >(object);
  (void)_this;
}
void ListGameserversResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListGameserversResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListGameserversResponse& ListGameserversResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListGameserversResponse_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void ListGameserversResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.ListGameserversResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserverlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListGameserversResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .improbable.svp.agonesshim.GameserverInfo gameServerList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameserverlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListGameserversResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.ListGameserversResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .improbable.svp.agonesshim.GameserverInfo gameServerList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gameserverlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gameserverlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.ListGameserversResponse)
  return target;
}

size_t ListGameserversResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.ListGameserversResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .improbable.svp.agonesshim.GameserverInfo gameServerList = 1;
  total_size += 1UL * this->_internal_gameserverlist_size();
  for (const auto& msg : this->gameserverlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListGameserversResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.ListGameserversResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListGameserversResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListGameserversResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.ListGameserversResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.ListGameserversResponse)
    MergeFrom(*source);
  }
}

void ListGameserversResponse::MergeFrom(const ListGameserversResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.ListGameserversResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserverlist_.MergeFrom(from.gameserverlist_);
}

void ListGameserversResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.ListGameserversResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListGameserversResponse::CopyFrom(const ListGameserversResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.ListGameserversResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListGameserversResponse::IsInitialized() const {
  return true;
}

void ListGameserversResponse::InternalSwap(ListGameserversResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gameserverlist_.InternalSwap(&other->gameserverlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListGameserversResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameserverInfo_GameServerStatusPort::_Internal {
 public:
};

GameserverInfo_GameServerStatusPort::GameserverInfo_GameServerStatusPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
}
GameserverInfo_GameServerStatusPort::GameserverInfo_GameServerStatusPort(const GameserverInfo_GameServerStatusPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
}

void GameserverInfo_GameServerStatusPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

GameserverInfo_GameServerStatusPort::~GameserverInfo_GameServerStatusPort() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameserverInfo_GameServerStatusPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameserverInfo_GameServerStatusPort::ArenaDtor(void* object) {
  GameserverInfo_GameServerStatusPort* _this = reinterpret_cast< GameserverInfo_GameServerStatusPort* >(object);
  (void)_this;
}
void GameserverInfo_GameServerStatusPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameserverInfo_GameServerStatusPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameserverInfo_GameServerStatusPort& GameserverInfo_GameServerStatusPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameserverInfo_GameServerStatusPort_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void GameserverInfo_GameServerStatusPort::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameserverInfo_GameServerStatusPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameserverInfo_GameServerStatusPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  return target;
}

size_t GameserverInfo_GameServerStatusPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameserverInfo_GameServerStatusPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  const GameserverInfo_GameServerStatusPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameserverInfo_GameServerStatusPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
    MergeFrom(*source);
  }
}

void GameserverInfo_GameServerStatusPort::MergeFrom(const GameserverInfo_GameServerStatusPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void GameserverInfo_GameServerStatusPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameserverInfo_GameServerStatusPort::CopyFrom(const GameserverInfo_GameServerStatusPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameserverInfo_GameServerStatusPort::IsInitialized() const {
  return true;
}

void GameserverInfo_GameServerStatusPort::InternalSwap(GameserverInfo_GameServerStatusPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameserverInfo_GameServerStatusPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameserverInfo::_Internal {
 public:
};

GameserverInfo::GameserverInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.GameserverInfo)
}
GameserverInfo::GameserverInfo(const GameserverInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  gameservername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameservername().empty()) {
    gameservername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameservername(), 
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.GameserverInfo)
}

void GameserverInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameserverInfo_agonesshim_2fgameserver_2eproto.base);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameservername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameserverInfo::~GameserverInfo() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.GameserverInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameserverInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameservername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameserverInfo::ArenaDtor(void* object) {
  GameserverInfo* _this = reinterpret_cast< GameserverInfo* >(object);
  (void)_this;
}
void GameserverInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameserverInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameserverInfo& GameserverInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameserverInfo_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void GameserverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.GameserverInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  state_.ClearToEmpty();
  gameservername_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameserverInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.GameserverInfo.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gameServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gameservername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.GameserverInfo.gameServerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.GameserverInfo.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameserverInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.GameserverInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.GameserverInfo.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  // string gameServerName = 2;
  if (this->gameservername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameservername().data(), static_cast<int>(this->_internal_gameservername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.GameserverInfo.gameServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gameservername(), target);
  }

  // repeated .improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ports(i), target, stream);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.GameserverInfo.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.GameserverInfo)
  return target;
}

size_t GameserverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.GameserverInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .improbable.svp.agonesshim.GameserverInfo.GameServerStatusPort ports = 3;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string state = 1;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string gameServerName = 2;
  if (this->gameservername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameservername());
  }

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameserverInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.GameserverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameserverInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameserverInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.GameserverInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.GameserverInfo)
    MergeFrom(*source);
  }
}

void GameserverInfo::MergeFrom(const GameserverInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.GameserverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.gameservername().size() > 0) {
    _internal_set_gameservername(from._internal_gameservername());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void GameserverInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.GameserverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameserverInfo::CopyFrom(const GameserverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.GameserverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameserverInfo::IsInitialized() const {
  return true;
}

void GameserverInfo::InternalSwap(GameserverInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gameservername_.Swap(&other->gameservername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameserverInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteGameserverRequest::_Internal {
 public:
};

DeleteGameserverRequest::DeleteGameserverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.DeleteGameserverRequest)
}
DeleteGameserverRequest::DeleteGameserverRequest(const DeleteGameserverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.DeleteGameserverRequest)
}

void DeleteGameserverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteGameserverRequest_agonesshim_2fgameserver_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteGameserverRequest::~DeleteGameserverRequest() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.DeleteGameserverRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteGameserverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteGameserverRequest::ArenaDtor(void* object) {
  DeleteGameserverRequest* _this = reinterpret_cast< DeleteGameserverRequest* >(object);
  (void)_this;
}
void DeleteGameserverRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteGameserverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteGameserverRequest& DeleteGameserverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteGameserverRequest_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void DeleteGameserverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteGameserverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.DeleteGameserverRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.svp.agonesshim.DeleteGameserverRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteGameserverRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.DeleteGameserverRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.svp.agonesshim.DeleteGameserverRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.DeleteGameserverRequest)
  return target;
}

size_t DeleteGameserverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGameserverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGameserverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteGameserverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.DeleteGameserverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.DeleteGameserverRequest)
    MergeFrom(*source);
  }
}

void DeleteGameserverRequest::MergeFrom(const DeleteGameserverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
}

void DeleteGameserverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGameserverRequest::CopyFrom(const DeleteGameserverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.DeleteGameserverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGameserverRequest::IsInitialized() const {
  return true;
}

void DeleteGameserverRequest::InternalSwap(DeleteGameserverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGameserverRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteGameserverResponse::_Internal {
 public:
};

DeleteGameserverResponse::DeleteGameserverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.svp.agonesshim.DeleteGameserverResponse)
}
DeleteGameserverResponse::DeleteGameserverResponse(const DeleteGameserverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.svp.agonesshim.DeleteGameserverResponse)
}

void DeleteGameserverResponse::SharedCtor() {
}

DeleteGameserverResponse::~DeleteGameserverResponse() {
  // @@protoc_insertion_point(destructor:improbable.svp.agonesshim.DeleteGameserverResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteGameserverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteGameserverResponse::ArenaDtor(void* object) {
  DeleteGameserverResponse* _this = reinterpret_cast< DeleteGameserverResponse* >(object);
  (void)_this;
}
void DeleteGameserverResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteGameserverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteGameserverResponse& DeleteGameserverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteGameserverResponse_agonesshim_2fgameserver_2eproto.base);
  return *internal_default_instance();
}


void DeleteGameserverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteGameserverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteGameserverResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.svp.agonesshim.DeleteGameserverResponse)
  return target;
}

size_t DeleteGameserverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteGameserverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteGameserverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteGameserverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.svp.agonesshim.DeleteGameserverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.svp.agonesshim.DeleteGameserverResponse)
    MergeFrom(*source);
  }
}

void DeleteGameserverResponse::MergeFrom(const DeleteGameserverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteGameserverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGameserverResponse::CopyFrom(const DeleteGameserverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.svp.agonesshim.DeleteGameserverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGameserverResponse::IsInitialized() const {
  return true;
}

void DeleteGameserverResponse::InternalSwap(DeleteGameserverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteGameserverResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace agonesshim
}  // namespace svp
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::GameserverLabelSelector_MatchLabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::GameserverLabelSelector* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::GameserverLabelSelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::GameserverLabelSelector >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::ListGameserversRequest* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::ListGameserversRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::ListGameserversRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::ListGameserversResponse* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::ListGameserversResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::ListGameserversResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::GameserverInfo_GameServerStatusPort >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::GameserverInfo* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::GameserverInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::GameserverInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::DeleteGameserverRequest* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::DeleteGameserverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::DeleteGameserverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::svp::agonesshim::DeleteGameserverResponse* Arena::CreateMaybeMessage< ::improbable::svp::agonesshim::DeleteGameserverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::svp::agonesshim::DeleteGameserverResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

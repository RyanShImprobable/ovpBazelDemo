// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: runtime/inspection.proto

#include "runtime/inspection.pb.h"
#include "runtime/inspection.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace improbable {
namespace platform {
namespace runtime {

static const char* InspectionService_method_names[] = {
  "/improbable.platform.runtime.InspectionService/GetWorkerNode",
  "/improbable.platform.runtime.InspectionService/DeleteWorker",
  "/improbable.platform.runtime.InspectionService/GetWorkerDetails",
  "/improbable.platform.runtime.InspectionService/GetWorkerInterestConfig",
  "/improbable.platform.runtime.InspectionService/DeleteEntities",
  "/improbable.platform.runtime.InspectionService/GetEntityHeatmap",
  "/improbable.platform.runtime.InspectionService/GetEntityDetails",
  "/improbable.platform.runtime.InspectionService/GetWorldExtents",
  "/improbable.platform.runtime.InspectionService/GetChunks",
  "/improbable.platform.runtime.InspectionService/GetAllWorkers",
  "/improbable.platform.runtime.InspectionService/GetLoadBalancingStrategy",
  "/improbable.platform.runtime.InspectionService/GetVirtualWorkerMapping",
  "/improbable.platform.runtime.InspectionService/SubscribeToEntities",
};

std::unique_ptr< InspectionService::Stub> InspectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InspectionService::Stub> stub(new InspectionService::Stub(channel));
  return stub;
}

InspectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetWorkerNode_(InspectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteWorker_(InspectionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkerDetails_(InspectionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkerInterestConfig_(InspectionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteEntities_(InspectionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntityHeatmap_(InspectionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEntityDetails_(InspectionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorldExtents_(InspectionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChunks_(InspectionService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllWorkers_(InspectionService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLoadBalancingStrategy_(InspectionService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVirtualWorkerMapping_(InspectionService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeToEntities_(InspectionService_method_names[12], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status InspectionService::Stub::GetWorkerNode(::grpc::ClientContext* context, const ::improbable::platform::runtime::WorkerNodeRequest& request, ::improbable::platform::runtime::WorkerNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkerNode_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetWorkerNode(::grpc::ClientContext* context, const ::improbable::platform::runtime::WorkerNodeRequest* request, ::improbable::platform::runtime::WorkerNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkerNode_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetWorkerNode(::grpc::ClientContext* context, const ::improbable::platform::runtime::WorkerNodeRequest* request, ::improbable::platform::runtime::WorkerNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkerNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::WorkerNodeResponse>* InspectionService::Stub::PrepareAsyncGetWorkerNodeRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::WorkerNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::WorkerNodeResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkerNode_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::WorkerNodeResponse>* InspectionService::Stub::AsyncGetWorkerNodeRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::WorkerNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkerNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::DeleteWorker(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteWorkerRequest& request, ::improbable::platform::runtime::DeleteWorkerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteWorker_, context, request, response);
}

void InspectionService::Stub::experimental_async::DeleteWorker(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteWorkerRequest* request, ::improbable::platform::runtime::DeleteWorkerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteWorker_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::DeleteWorker(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteWorkerRequest* request, ::improbable::platform::runtime::DeleteWorkerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteWorker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::DeleteWorkerResponse>* InspectionService::Stub::PrepareAsyncDeleteWorkerRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::DeleteWorkerResponse>::Create(channel_.get(), cq, rpcmethod_DeleteWorker_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::DeleteWorkerResponse>* InspectionService::Stub::AsyncDeleteWorkerRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteWorkerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteWorkerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetWorkerDetails(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerDetailsRequest& request, ::improbable::platform::runtime::GetWorkerDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkerDetails_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetWorkerDetails(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerDetailsRequest* request, ::improbable::platform::runtime::GetWorkerDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkerDetails_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetWorkerDetails(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerDetailsRequest* request, ::improbable::platform::runtime::GetWorkerDetailsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkerDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetWorkerDetailsResponse>* InspectionService::Stub::PrepareAsyncGetWorkerDetailsRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetWorkerDetailsResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkerDetails_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetWorkerDetailsResponse>* InspectionService::Stub::AsyncGetWorkerDetailsRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkerDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetWorkerInterestConfig(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerInterestRequest& request, ::improbable::platform::runtime::GetWorkerInterestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorkerInterestConfig_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetWorkerInterestConfig(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerInterestRequest* request, ::improbable::platform::runtime::GetWorkerInterestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorkerInterestConfig_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetWorkerInterestConfig(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerInterestRequest* request, ::improbable::platform::runtime::GetWorkerInterestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorkerInterestConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetWorkerInterestResponse>* InspectionService::Stub::PrepareAsyncGetWorkerInterestConfigRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerInterestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetWorkerInterestResponse>::Create(channel_.get(), cq, rpcmethod_GetWorkerInterestConfig_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetWorkerInterestResponse>* InspectionService::Stub::AsyncGetWorkerInterestConfigRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorkerInterestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkerInterestConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::DeleteEntities(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteEntitiesRequest& request, ::improbable::platform::runtime::DeleteEntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteEntities_, context, request, response);
}

void InspectionService::Stub::experimental_async::DeleteEntities(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteEntitiesRequest* request, ::improbable::platform::runtime::DeleteEntitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteEntities_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::DeleteEntities(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteEntitiesRequest* request, ::improbable::platform::runtime::DeleteEntitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEntities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::DeleteEntitiesResponse>* InspectionService::Stub::PrepareAsyncDeleteEntitiesRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::DeleteEntitiesResponse>::Create(channel_.get(), cq, rpcmethod_DeleteEntities_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::DeleteEntitiesResponse>* InspectionService::Stub::AsyncDeleteEntitiesRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::DeleteEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteEntitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetEntityHeatmap(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityHeatmapRequest& request, ::improbable::platform::runtime::GetEntityHeatmapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEntityHeatmap_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetEntityHeatmap(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityHeatmapRequest* request, ::improbable::platform::runtime::GetEntityHeatmapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntityHeatmap_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetEntityHeatmap(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityHeatmapRequest* request, ::improbable::platform::runtime::GetEntityHeatmapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntityHeatmap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetEntityHeatmapResponse>* InspectionService::Stub::PrepareAsyncGetEntityHeatmapRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityHeatmapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetEntityHeatmapResponse>::Create(channel_.get(), cq, rpcmethod_GetEntityHeatmap_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetEntityHeatmapResponse>* InspectionService::Stub::AsyncGetEntityHeatmapRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityHeatmapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntityHeatmapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetEntityDetails(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityDetailsRequest& request, ::improbable::platform::runtime::GetEntityDetailsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEntityDetails_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetEntityDetails(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityDetailsRequest* request, ::improbable::platform::runtime::GetEntityDetailsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEntityDetails_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetEntityDetails(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityDetailsRequest* request, ::improbable::platform::runtime::GetEntityDetailsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEntityDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetEntityDetailsResponse>* InspectionService::Stub::PrepareAsyncGetEntityDetailsRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetEntityDetailsResponse>::Create(channel_.get(), cq, rpcmethod_GetEntityDetails_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetEntityDetailsResponse>* InspectionService::Stub::AsyncGetEntityDetailsRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetEntityDetailsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEntityDetailsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetWorldExtents(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorldExtentsRequest& request, ::improbable::platform::runtime::GetWorldExtentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWorldExtents_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetWorldExtents(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorldExtentsRequest* request, ::improbable::platform::runtime::GetWorldExtentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWorldExtents_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetWorldExtents(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorldExtentsRequest* request, ::improbable::platform::runtime::GetWorldExtentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWorldExtents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetWorldExtentsResponse>* InspectionService::Stub::PrepareAsyncGetWorldExtentsRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorldExtentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetWorldExtentsResponse>::Create(channel_.get(), cq, rpcmethod_GetWorldExtents_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetWorldExtentsResponse>* InspectionService::Stub::AsyncGetWorldExtentsRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetWorldExtentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorldExtentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetChunks(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetChunksRequest& request, ::improbable::platform::runtime::GetChunksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetChunks_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetChunks(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetChunksRequest* request, ::improbable::platform::runtime::GetChunksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChunks_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetChunks(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetChunksRequest* request, ::improbable::platform::runtime::GetChunksResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChunks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetChunksResponse>* InspectionService::Stub::PrepareAsyncGetChunksRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetChunksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetChunksResponse>::Create(channel_.get(), cq, rpcmethod_GetChunks_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetChunksResponse>* InspectionService::Stub::AsyncGetChunksRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetChunksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChunksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetAllWorkers(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetAllWorkersRequest& request, ::improbable::platform::runtime::GetAllWorkersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllWorkers_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetAllWorkers(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetAllWorkersRequest* request, ::improbable::platform::runtime::GetAllWorkersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllWorkers_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetAllWorkers(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetAllWorkersRequest* request, ::improbable::platform::runtime::GetAllWorkersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllWorkers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetAllWorkersResponse>* InspectionService::Stub::PrepareAsyncGetAllWorkersRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetAllWorkersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetAllWorkersResponse>::Create(channel_.get(), cq, rpcmethod_GetAllWorkers_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetAllWorkersResponse>* InspectionService::Stub::AsyncGetAllWorkersRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetAllWorkersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllWorkersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetLoadBalancingStrategy(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest& request, ::improbable::platform::runtime::GetLoadBalancingStrategyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLoadBalancingStrategy_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetLoadBalancingStrategy(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest* request, ::improbable::platform::runtime::GetLoadBalancingStrategyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLoadBalancingStrategy_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetLoadBalancingStrategy(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest* request, ::improbable::platform::runtime::GetLoadBalancingStrategyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLoadBalancingStrategy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetLoadBalancingStrategyResponse>* InspectionService::Stub::PrepareAsyncGetLoadBalancingStrategyRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetLoadBalancingStrategyResponse>::Create(channel_.get(), cq, rpcmethod_GetLoadBalancingStrategy_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetLoadBalancingStrategyResponse>* InspectionService::Stub::AsyncGetLoadBalancingStrategyRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLoadBalancingStrategyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InspectionService::Stub::GetVirtualWorkerMapping(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest& request, ::improbable::platform::runtime::GetVirtualWorkerMappingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVirtualWorkerMapping_, context, request, response);
}

void InspectionService::Stub::experimental_async::GetVirtualWorkerMapping(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest* request, ::improbable::platform::runtime::GetVirtualWorkerMappingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVirtualWorkerMapping_, context, request, response, std::move(f));
}

void InspectionService::Stub::experimental_async::GetVirtualWorkerMapping(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest* request, ::improbable::platform::runtime::GetVirtualWorkerMappingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVirtualWorkerMapping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetVirtualWorkerMappingResponse>* InspectionService::Stub::PrepareAsyncGetVirtualWorkerMappingRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::improbable::platform::runtime::GetVirtualWorkerMappingResponse>::Create(channel_.get(), cq, rpcmethod_GetVirtualWorkerMapping_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::improbable::platform::runtime::GetVirtualWorkerMappingResponse>* InspectionService::Stub::AsyncGetVirtualWorkerMappingRaw(::grpc::ClientContext* context, const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVirtualWorkerMappingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>* InspectionService::Stub::SubscribeToEntitiesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>::Create(channel_.get(), rpcmethod_SubscribeToEntities_, context);
}

void InspectionService::Stub::experimental_async::SubscribeToEntities(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery,::improbable::platform::runtime::InspectionEntitySubscriptionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery,::improbable::platform::runtime::InspectionEntitySubscriptionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToEntities_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>* InspectionService::Stub::AsyncSubscribeToEntitiesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeToEntities_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>* InspectionService::Stub::PrepareAsyncSubscribeToEntitiesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeToEntities_, context, false, nullptr);
}

InspectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::WorkerNodeRequest, ::improbable::platform::runtime::WorkerNodeResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::WorkerNodeRequest* req,
             ::improbable::platform::runtime::WorkerNodeResponse* resp) {
               return service->GetWorkerNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::DeleteWorkerRequest, ::improbable::platform::runtime::DeleteWorkerResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::DeleteWorkerRequest* req,
             ::improbable::platform::runtime::DeleteWorkerResponse* resp) {
               return service->DeleteWorker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetWorkerDetailsRequest, ::improbable::platform::runtime::GetWorkerDetailsResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetWorkerDetailsRequest* req,
             ::improbable::platform::runtime::GetWorkerDetailsResponse* resp) {
               return service->GetWorkerDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetWorkerInterestRequest, ::improbable::platform::runtime::GetWorkerInterestResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetWorkerInterestRequest* req,
             ::improbable::platform::runtime::GetWorkerInterestResponse* resp) {
               return service->GetWorkerInterestConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::DeleteEntitiesRequest, ::improbable::platform::runtime::DeleteEntitiesResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::DeleteEntitiesRequest* req,
             ::improbable::platform::runtime::DeleteEntitiesResponse* resp) {
               return service->DeleteEntities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetEntityHeatmapRequest, ::improbable::platform::runtime::GetEntityHeatmapResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetEntityHeatmapRequest* req,
             ::improbable::platform::runtime::GetEntityHeatmapResponse* resp) {
               return service->GetEntityHeatmap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetEntityDetailsRequest, ::improbable::platform::runtime::GetEntityDetailsResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetEntityDetailsRequest* req,
             ::improbable::platform::runtime::GetEntityDetailsResponse* resp) {
               return service->GetEntityDetails(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetWorldExtentsRequest, ::improbable::platform::runtime::GetWorldExtentsResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetWorldExtentsRequest* req,
             ::improbable::platform::runtime::GetWorldExtentsResponse* resp) {
               return service->GetWorldExtents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetChunksRequest, ::improbable::platform::runtime::GetChunksResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetChunksRequest* req,
             ::improbable::platform::runtime::GetChunksResponse* resp) {
               return service->GetChunks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetAllWorkersRequest, ::improbable::platform::runtime::GetAllWorkersResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetAllWorkersRequest* req,
             ::improbable::platform::runtime::GetAllWorkersResponse* resp) {
               return service->GetAllWorkers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetLoadBalancingStrategyRequest, ::improbable::platform::runtime::GetLoadBalancingStrategyResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest* req,
             ::improbable::platform::runtime::GetLoadBalancingStrategyResponse* resp) {
               return service->GetLoadBalancingStrategy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InspectionService::Service, ::improbable::platform::runtime::GetVirtualWorkerMappingRequest, ::improbable::platform::runtime::GetVirtualWorkerMappingResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest* req,
             ::improbable::platform::runtime::GetVirtualWorkerMappingResponse* resp) {
               return service->GetVirtualWorkerMapping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InspectionService_method_names[12],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< InspectionService::Service, ::improbable::platform::runtime::InspectionEntitySubscriptionQuery, ::improbable::platform::runtime::InspectionEntitySubscriptionResponse>(
          [](InspectionService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::improbable::platform::runtime::InspectionEntitySubscriptionResponse,
             ::improbable::platform::runtime::InspectionEntitySubscriptionQuery>* stream) {
               return service->SubscribeToEntities(ctx, stream);
             }, this)));
}

InspectionService::Service::~Service() {
}

::grpc::Status InspectionService::Service::GetWorkerNode(::grpc::ServerContext* context, const ::improbable::platform::runtime::WorkerNodeRequest* request, ::improbable::platform::runtime::WorkerNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::DeleteWorker(::grpc::ServerContext* context, const ::improbable::platform::runtime::DeleteWorkerRequest* request, ::improbable::platform::runtime::DeleteWorkerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetWorkerDetails(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetWorkerDetailsRequest* request, ::improbable::platform::runtime::GetWorkerDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetWorkerInterestConfig(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetWorkerInterestRequest* request, ::improbable::platform::runtime::GetWorkerInterestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::DeleteEntities(::grpc::ServerContext* context, const ::improbable::platform::runtime::DeleteEntitiesRequest* request, ::improbable::platform::runtime::DeleteEntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetEntityHeatmap(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetEntityHeatmapRequest* request, ::improbable::platform::runtime::GetEntityHeatmapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetEntityDetails(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetEntityDetailsRequest* request, ::improbable::platform::runtime::GetEntityDetailsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetWorldExtents(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetWorldExtentsRequest* request, ::improbable::platform::runtime::GetWorldExtentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetChunks(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetChunksRequest* request, ::improbable::platform::runtime::GetChunksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetAllWorkers(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetAllWorkersRequest* request, ::improbable::platform::runtime::GetAllWorkersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetLoadBalancingStrategy(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetLoadBalancingStrategyRequest* request, ::improbable::platform::runtime::GetLoadBalancingStrategyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::GetVirtualWorkerMapping(::grpc::ServerContext* context, const ::improbable::platform::runtime::GetVirtualWorkerMappingRequest* request, ::improbable::platform::runtime::GetVirtualWorkerMappingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InspectionService::Service::SubscribeToEntities(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::improbable::platform::runtime::InspectionEntitySubscriptionResponse, ::improbable::platform::runtime::InspectionEntitySubscriptionQuery>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace improbable
}  // namespace platform
}  // namespace runtime


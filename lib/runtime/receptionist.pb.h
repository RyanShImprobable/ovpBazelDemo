// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime/receptionist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runtime_2freceptionist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runtime_2freceptionist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runtime_2freceptionist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2freceptionist_2eproto;
namespace improbable {
namespace platform {
namespace runtime {
class BridgeConnectionDetails;
class BridgeConnectionDetailsDefaultTypeInternal;
extern BridgeConnectionDetailsDefaultTypeInternal _BridgeConnectionDetails_default_instance_;
class BridgeSession;
class BridgeSessionDefaultTypeInternal;
extern BridgeSessionDefaultTypeInternal _BridgeSession_default_instance_;
class ErasureCodecParameters;
class ErasureCodecParametersDefaultTypeInternal;
extern ErasureCodecParametersDefaultTypeInternal _ErasureCodecParameters_default_instance_;
class HeartbeatParameters;
class HeartbeatParametersDefaultTypeInternal;
extern HeartbeatParametersDefaultTypeInternal _HeartbeatParameters_default_instance_;
class KcpLinkSettings;
class KcpLinkSettingsDefaultTypeInternal;
extern KcpLinkSettingsDefaultTypeInternal _KcpLinkSettings_default_instance_;
class LinkSettings;
class LinkSettingsDefaultTypeInternal;
extern LinkSettingsDefaultTypeInternal _LinkSettings_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class ProtocolCapabilities;
class ProtocolCapabilitiesDefaultTypeInternal;
extern ProtocolCapabilitiesDefaultTypeInternal _ProtocolCapabilities_default_instance_;
class ProtocolCapabilitiesV1;
class ProtocolCapabilitiesV1DefaultTypeInternal;
extern ProtocolCapabilitiesV1DefaultTypeInternal _ProtocolCapabilitiesV1_default_instance_;
class ProtocolCapabilitiesV2;
class ProtocolCapabilitiesV2DefaultTypeInternal;
extern ProtocolCapabilitiesV2DefaultTypeInternal _ProtocolCapabilitiesV2_default_instance_;
class ProtocolSettings;
class ProtocolSettingsDefaultTypeInternal;
extern ProtocolSettingsDefaultTypeInternal _ProtocolSettings_default_instance_;
class ProtocolSettingsV1;
class ProtocolSettingsV1DefaultTypeInternal;
extern ProtocolSettingsV1DefaultTypeInternal _ProtocolSettingsV1_default_instance_;
class ProtocolSettingsV2;
class ProtocolSettingsV2DefaultTypeInternal;
extern ProtocolSettingsV2DefaultTypeInternal _ProtocolSettingsV2_default_instance_;
class RakNetLinkSettings;
class RakNetLinkSettingsDefaultTypeInternal;
extern RakNetLinkSettingsDefaultTypeInternal _RakNetLinkSettings_default_instance_;
class ReceptionistLoginPayload;
class ReceptionistLoginPayloadDefaultTypeInternal;
extern ReceptionistLoginPayloadDefaultTypeInternal _ReceptionistLoginPayload_default_instance_;
class RemainingCapacityRequest;
class RemainingCapacityRequestDefaultTypeInternal;
extern RemainingCapacityRequestDefaultTypeInternal _RemainingCapacityRequest_default_instance_;
class RemainingCapacityResponse;
class RemainingCapacityResponseDefaultTypeInternal;
extern RemainingCapacityResponseDefaultTypeInternal _RemainingCapacityResponse_default_instance_;
class TcpLinkSettings;
class TcpLinkSettingsDefaultTypeInternal;
extern TcpLinkSettingsDefaultTypeInternal _TcpLinkSettings_default_instance_;
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::platform::runtime::BridgeConnectionDetails* Arena::CreateMaybeMessage<::improbable::platform::runtime::BridgeConnectionDetails>(Arena*);
template<> ::improbable::platform::runtime::BridgeSession* Arena::CreateMaybeMessage<::improbable::platform::runtime::BridgeSession>(Arena*);
template<> ::improbable::platform::runtime::ErasureCodecParameters* Arena::CreateMaybeMessage<::improbable::platform::runtime::ErasureCodecParameters>(Arena*);
template<> ::improbable::platform::runtime::HeartbeatParameters* Arena::CreateMaybeMessage<::improbable::platform::runtime::HeartbeatParameters>(Arena*);
template<> ::improbable::platform::runtime::KcpLinkSettings* Arena::CreateMaybeMessage<::improbable::platform::runtime::KcpLinkSettings>(Arena*);
template<> ::improbable::platform::runtime::LinkSettings* Arena::CreateMaybeMessage<::improbable::platform::runtime::LinkSettings>(Arena*);
template<> ::improbable::platform::runtime::LoginRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::LoginRequest>(Arena*);
template<> ::improbable::platform::runtime::LoginResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::LoginResponse>(Arena*);
template<> ::improbable::platform::runtime::ProtocolCapabilities* Arena::CreateMaybeMessage<::improbable::platform::runtime::ProtocolCapabilities>(Arena*);
template<> ::improbable::platform::runtime::ProtocolCapabilitiesV1* Arena::CreateMaybeMessage<::improbable::platform::runtime::ProtocolCapabilitiesV1>(Arena*);
template<> ::improbable::platform::runtime::ProtocolCapabilitiesV2* Arena::CreateMaybeMessage<::improbable::platform::runtime::ProtocolCapabilitiesV2>(Arena*);
template<> ::improbable::platform::runtime::ProtocolSettings* Arena::CreateMaybeMessage<::improbable::platform::runtime::ProtocolSettings>(Arena*);
template<> ::improbable::platform::runtime::ProtocolSettingsV1* Arena::CreateMaybeMessage<::improbable::platform::runtime::ProtocolSettingsV1>(Arena*);
template<> ::improbable::platform::runtime::ProtocolSettingsV2* Arena::CreateMaybeMessage<::improbable::platform::runtime::ProtocolSettingsV2>(Arena*);
template<> ::improbable::platform::runtime::RakNetLinkSettings* Arena::CreateMaybeMessage<::improbable::platform::runtime::RakNetLinkSettings>(Arena*);
template<> ::improbable::platform::runtime::ReceptionistLoginPayload* Arena::CreateMaybeMessage<::improbable::platform::runtime::ReceptionistLoginPayload>(Arena*);
template<> ::improbable::platform::runtime::RemainingCapacityRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::RemainingCapacityRequest>(Arena*);
template<> ::improbable::platform::runtime::RemainingCapacityResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::RemainingCapacityResponse>(Arena*);
template<> ::improbable::platform::runtime::TcpLinkSettings* Arena::CreateMaybeMessage<::improbable::platform::runtime::TcpLinkSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace platform {
namespace runtime {

enum SecurityLayer : int {
  DTLS = 0,
  INSECURE = 1,
  SecurityLayer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityLayer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecurityLayer_IsValid(int value);
constexpr SecurityLayer SecurityLayer_MIN = DTLS;
constexpr SecurityLayer SecurityLayer_MAX = INSECURE;
constexpr int SecurityLayer_ARRAYSIZE = SecurityLayer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityLayer_descriptor();
template<typename T>
inline const std::string& SecurityLayer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityLayer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityLayer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityLayer_descriptor(), enum_t_value);
}
inline bool SecurityLayer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityLayer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityLayer>(
    SecurityLayer_descriptor(), name, value);
}
// ===================================================================

class RakNetLinkSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.RakNetLinkSettings) */ {
 public:
  inline RakNetLinkSettings() : RakNetLinkSettings(nullptr) {}
  virtual ~RakNetLinkSettings();

  RakNetLinkSettings(const RakNetLinkSettings& from);
  RakNetLinkSettings(RakNetLinkSettings&& from) noexcept
    : RakNetLinkSettings() {
    *this = ::std::move(from);
  }

  inline RakNetLinkSettings& operator=(const RakNetLinkSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RakNetLinkSettings& operator=(RakNetLinkSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RakNetLinkSettings& default_instance();

  static inline const RakNetLinkSettings* internal_default_instance() {
    return reinterpret_cast<const RakNetLinkSettings*>(
               &_RakNetLinkSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RakNetLinkSettings& a, RakNetLinkSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RakNetLinkSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RakNetLinkSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RakNetLinkSettings* New() const final {
    return CreateMaybeMessage<RakNetLinkSettings>(nullptr);
  }

  RakNetLinkSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RakNetLinkSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RakNetLinkSettings& from);
  void MergeFrom(const RakNetLinkSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RakNetLinkSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.RakNetLinkSettings";
  }
  protected:
  explicit RakNetLinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartbeatTimeoutMsFieldNumber = 1,
    kInitialConnectionTimeoutMsFieldNumber = 2,
  };
  // uint64 heartbeat_timeout_ms = 1;
  void clear_heartbeat_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 heartbeat_timeout_ms() const;
  void set_heartbeat_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_heartbeat_timeout_ms() const;
  void _internal_set_heartbeat_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 initial_connection_timeout_ms = 2;
  void clear_initial_connection_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_connection_timeout_ms() const;
  void set_initial_connection_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initial_connection_timeout_ms() const;
  void _internal_set_initial_connection_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.RakNetLinkSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 heartbeat_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_connection_timeout_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class TcpLinkSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.TcpLinkSettings) */ {
 public:
  inline TcpLinkSettings() : TcpLinkSettings(nullptr) {}
  virtual ~TcpLinkSettings();

  TcpLinkSettings(const TcpLinkSettings& from);
  TcpLinkSettings(TcpLinkSettings&& from) noexcept
    : TcpLinkSettings() {
    *this = ::std::move(from);
  }

  inline TcpLinkSettings& operator=(const TcpLinkSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TcpLinkSettings& operator=(TcpLinkSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TcpLinkSettings& default_instance();

  static inline const TcpLinkSettings* internal_default_instance() {
    return reinterpret_cast<const TcpLinkSettings*>(
               &_TcpLinkSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TcpLinkSettings& a, TcpLinkSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TcpLinkSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TcpLinkSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TcpLinkSettings* New() const final {
    return CreateMaybeMessage<TcpLinkSettings>(nullptr);
  }

  TcpLinkSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TcpLinkSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TcpLinkSettings& from);
  void MergeFrom(const TcpLinkSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TcpLinkSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.TcpLinkSettings";
  }
  protected:
  explicit TcpLinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiplexLevelFieldNumber = 1,
  };
  // int32 multiplex_level = 1;
  void clear_multiplex_level();
  ::PROTOBUF_NAMESPACE_ID::int32 multiplex_level() const;
  void set_multiplex_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_multiplex_level() const;
  void _internal_set_multiplex_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.TcpLinkSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 multiplex_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ErasureCodecParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ErasureCodecParameters) */ {
 public:
  inline ErasureCodecParameters() : ErasureCodecParameters(nullptr) {}
  virtual ~ErasureCodecParameters();

  ErasureCodecParameters(const ErasureCodecParameters& from);
  ErasureCodecParameters(ErasureCodecParameters&& from) noexcept
    : ErasureCodecParameters() {
    *this = ::std::move(from);
  }

  inline ErasureCodecParameters& operator=(const ErasureCodecParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErasureCodecParameters& operator=(ErasureCodecParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErasureCodecParameters& default_instance();

  static inline const ErasureCodecParameters* internal_default_instance() {
    return reinterpret_cast<const ErasureCodecParameters*>(
               &_ErasureCodecParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ErasureCodecParameters& a, ErasureCodecParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(ErasureCodecParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErasureCodecParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErasureCodecParameters* New() const final {
    return CreateMaybeMessage<ErasureCodecParameters>(nullptr);
  }

  ErasureCodecParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErasureCodecParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErasureCodecParameters& from);
  void MergeFrom(const ErasureCodecParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErasureCodecParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ErasureCodecParameters";
  }
  protected:
  explicit ErasureCodecParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalPacketCountFieldNumber = 1,
    kRecoveryPacketCountFieldNumber = 2,
    kWindowSizeFieldNumber = 3,
  };
  // uint32 original_packet_count = 1;
  void clear_original_packet_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 original_packet_count() const;
  void set_original_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original_packet_count() const;
  void _internal_set_original_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 recovery_packet_count = 2;
  void clear_recovery_packet_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 recovery_packet_count() const;
  void set_recovery_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recovery_packet_count() const;
  void _internal_set_recovery_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 window_size = 3;
  void clear_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size() const;
  void set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_window_size() const;
  void _internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ErasureCodecParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 original_packet_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recovery_packet_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.HeartbeatParameters) */ {
 public:
  inline HeartbeatParameters() : HeartbeatParameters(nullptr) {}
  virtual ~HeartbeatParameters();

  HeartbeatParameters(const HeartbeatParameters& from);
  HeartbeatParameters(HeartbeatParameters&& from) noexcept
    : HeartbeatParameters() {
    *this = ::std::move(from);
  }

  inline HeartbeatParameters& operator=(const HeartbeatParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatParameters& operator=(HeartbeatParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartbeatParameters& default_instance();

  static inline const HeartbeatParameters* internal_default_instance() {
    return reinterpret_cast<const HeartbeatParameters*>(
               &_HeartbeatParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartbeatParameters& a, HeartbeatParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatParameters* New() const final {
    return CreateMaybeMessage<HeartbeatParameters>(nullptr);
  }

  HeartbeatParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartbeatParameters& from);
  void MergeFrom(const HeartbeatParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.HeartbeatParameters";
  }
  protected:
  explicit HeartbeatParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalMsFieldNumber = 1,
    kTimeoutMsFieldNumber = 2,
  };
  // uint64 interval_ms = 1;
  void clear_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 interval_ms() const;
  void set_interval_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_interval_ms() const;
  void _internal_set_interval_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timeout_ms = 2;
  void clear_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_ms() const;
  void set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout_ms() const;
  void _internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.HeartbeatParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 interval_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class KcpLinkSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.KcpLinkSettings) */ {
 public:
  inline KcpLinkSettings() : KcpLinkSettings(nullptr) {}
  virtual ~KcpLinkSettings();

  KcpLinkSettings(const KcpLinkSettings& from);
  KcpLinkSettings(KcpLinkSettings&& from) noexcept
    : KcpLinkSettings() {
    *this = ::std::move(from);
  }

  inline KcpLinkSettings& operator=(const KcpLinkSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline KcpLinkSettings& operator=(KcpLinkSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KcpLinkSettings& default_instance();

  static inline const KcpLinkSettings* internal_default_instance() {
    return reinterpret_cast<const KcpLinkSettings*>(
               &_KcpLinkSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KcpLinkSettings& a, KcpLinkSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(KcpLinkSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KcpLinkSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KcpLinkSettings* New() const final {
    return CreateMaybeMessage<KcpLinkSettings>(nullptr);
  }

  KcpLinkSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KcpLinkSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KcpLinkSettings& from);
  void MergeFrom(const KcpLinkSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KcpLinkSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.KcpLinkSettings";
  }
  protected:
  explicit KcpLinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErasureCodecFieldNumber = 8,
    kHeartbeatFieldNumber = 9,
    kFastRetransmissionFieldNumber = 1,
    kEarlyRetransmissionFieldNumber = 2,
    kNonConcessionalFlowControlFieldNumber = 3,
    kMultiplexLevelFieldNumber = 4,
    kUpdateIntervalMsFieldNumber = 5,
    kMinRtoMsFieldNumber = 6,
    kWindowSizeFieldNumber = 7,
    kSendWindowSizeFieldNumber = 10,
    kRecvWindowSizeFieldNumber = 11,
    kSecurityLayerFieldNumber = 12,
  };
  // .improbable.platform.runtime.ErasureCodecParameters erasure_codec = 8;
  bool has_erasure_codec() const;
  private:
  bool _internal_has_erasure_codec() const;
  public:
  void clear_erasure_codec();
  const ::improbable::platform::runtime::ErasureCodecParameters& erasure_codec() const;
  ::improbable::platform::runtime::ErasureCodecParameters* release_erasure_codec();
  ::improbable::platform::runtime::ErasureCodecParameters* mutable_erasure_codec();
  void set_allocated_erasure_codec(::improbable::platform::runtime::ErasureCodecParameters* erasure_codec);
  private:
  const ::improbable::platform::runtime::ErasureCodecParameters& _internal_erasure_codec() const;
  ::improbable::platform::runtime::ErasureCodecParameters* _internal_mutable_erasure_codec();
  public:
  void unsafe_arena_set_allocated_erasure_codec(
      ::improbable::platform::runtime::ErasureCodecParameters* erasure_codec);
  ::improbable::platform::runtime::ErasureCodecParameters* unsafe_arena_release_erasure_codec();

  // .improbable.platform.runtime.HeartbeatParameters heartbeat = 9;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::improbable::platform::runtime::HeartbeatParameters& heartbeat() const;
  ::improbable::platform::runtime::HeartbeatParameters* release_heartbeat();
  ::improbable::platform::runtime::HeartbeatParameters* mutable_heartbeat();
  void set_allocated_heartbeat(::improbable::platform::runtime::HeartbeatParameters* heartbeat);
  private:
  const ::improbable::platform::runtime::HeartbeatParameters& _internal_heartbeat() const;
  ::improbable::platform::runtime::HeartbeatParameters* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::improbable::platform::runtime::HeartbeatParameters* heartbeat);
  ::improbable::platform::runtime::HeartbeatParameters* unsafe_arena_release_heartbeat();

  // bool fast_retransmission = 1;
  void clear_fast_retransmission();
  bool fast_retransmission() const;
  void set_fast_retransmission(bool value);
  private:
  bool _internal_fast_retransmission() const;
  void _internal_set_fast_retransmission(bool value);
  public:

  // bool early_retransmission = 2;
  void clear_early_retransmission();
  bool early_retransmission() const;
  void set_early_retransmission(bool value);
  private:
  bool _internal_early_retransmission() const;
  void _internal_set_early_retransmission(bool value);
  public:

  // bool non_concessional_flow_control = 3;
  void clear_non_concessional_flow_control();
  bool non_concessional_flow_control() const;
  void set_non_concessional_flow_control(bool value);
  private:
  bool _internal_non_concessional_flow_control() const;
  void _internal_set_non_concessional_flow_control(bool value);
  public:

  // uint32 multiplex_level = 4;
  void clear_multiplex_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 multiplex_level() const;
  void set_multiplex_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multiplex_level() const;
  void _internal_set_multiplex_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 update_interval_ms = 5;
  void clear_update_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_interval_ms() const;
  void set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_interval_ms() const;
  void _internal_set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 min_rto_ms = 6;
  void clear_min_rto_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_rto_ms() const;
  void set_min_rto_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_rto_ms() const;
  void _internal_set_min_rto_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 window_size = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_window_size();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 window_size() const;
  PROTOBUF_DEPRECATED void set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_window_size() const;
  void _internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 send_window_size = 10;
  void clear_send_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_window_size() const;
  void set_send_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_window_size() const;
  void _internal_set_send_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 recv_window_size = 11;
  void clear_recv_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 recv_window_size() const;
  void set_recv_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recv_window_size() const;
  void _internal_set_recv_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .improbable.platform.runtime.SecurityLayer security_layer = 12;
  void clear_security_layer();
  ::improbable::platform::runtime::SecurityLayer security_layer() const;
  void set_security_layer(::improbable::platform::runtime::SecurityLayer value);
  private:
  ::improbable::platform::runtime::SecurityLayer _internal_security_layer() const;
  void _internal_set_security_layer(::improbable::platform::runtime::SecurityLayer value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.KcpLinkSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::ErasureCodecParameters* erasure_codec_;
  ::improbable::platform::runtime::HeartbeatParameters* heartbeat_;
  bool fast_retransmission_;
  bool early_retransmission_;
  bool non_concessional_flow_control_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multiplex_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_interval_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_rto_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 window_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_window_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recv_window_size_;
  int security_layer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class LinkSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.LinkSettings) */ {
 public:
  inline LinkSettings() : LinkSettings(nullptr) {}
  virtual ~LinkSettings();

  LinkSettings(const LinkSettings& from);
  LinkSettings(LinkSettings&& from) noexcept
    : LinkSettings() {
    *this = ::std::move(from);
  }

  inline LinkSettings& operator=(const LinkSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkSettings& operator=(LinkSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkSettings& default_instance();

  enum LinkSettingsCase {
    kRaknetSettings = 1,
    kTcpSettings = 2,
    kKcpSettings = 3,
    LINK_SETTINGS_NOT_SET = 0,
  };

  static inline const LinkSettings* internal_default_instance() {
    return reinterpret_cast<const LinkSettings*>(
               &_LinkSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LinkSettings& a, LinkSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkSettings* New() const final {
    return CreateMaybeMessage<LinkSettings>(nullptr);
  }

  LinkSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkSettings& from);
  void MergeFrom(const LinkSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.LinkSettings";
  }
  protected:
  explicit LinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRaknetSettingsFieldNumber = 1,
    kTcpSettingsFieldNumber = 2,
    kKcpSettingsFieldNumber = 3,
  };
  // .improbable.platform.runtime.RakNetLinkSettings raknet_settings = 1;
  bool has_raknet_settings() const;
  private:
  bool _internal_has_raknet_settings() const;
  public:
  void clear_raknet_settings();
  const ::improbable::platform::runtime::RakNetLinkSettings& raknet_settings() const;
  ::improbable::platform::runtime::RakNetLinkSettings* release_raknet_settings();
  ::improbable::platform::runtime::RakNetLinkSettings* mutable_raknet_settings();
  void set_allocated_raknet_settings(::improbable::platform::runtime::RakNetLinkSettings* raknet_settings);
  private:
  const ::improbable::platform::runtime::RakNetLinkSettings& _internal_raknet_settings() const;
  ::improbable::platform::runtime::RakNetLinkSettings* _internal_mutable_raknet_settings();
  public:
  void unsafe_arena_set_allocated_raknet_settings(
      ::improbable::platform::runtime::RakNetLinkSettings* raknet_settings);
  ::improbable::platform::runtime::RakNetLinkSettings* unsafe_arena_release_raknet_settings();

  // .improbable.platform.runtime.TcpLinkSettings tcp_settings = 2;
  bool has_tcp_settings() const;
  private:
  bool _internal_has_tcp_settings() const;
  public:
  void clear_tcp_settings();
  const ::improbable::platform::runtime::TcpLinkSettings& tcp_settings() const;
  ::improbable::platform::runtime::TcpLinkSettings* release_tcp_settings();
  ::improbable::platform::runtime::TcpLinkSettings* mutable_tcp_settings();
  void set_allocated_tcp_settings(::improbable::platform::runtime::TcpLinkSettings* tcp_settings);
  private:
  const ::improbable::platform::runtime::TcpLinkSettings& _internal_tcp_settings() const;
  ::improbable::platform::runtime::TcpLinkSettings* _internal_mutable_tcp_settings();
  public:
  void unsafe_arena_set_allocated_tcp_settings(
      ::improbable::platform::runtime::TcpLinkSettings* tcp_settings);
  ::improbable::platform::runtime::TcpLinkSettings* unsafe_arena_release_tcp_settings();

  // .improbable.platform.runtime.KcpLinkSettings kcp_settings = 3;
  bool has_kcp_settings() const;
  private:
  bool _internal_has_kcp_settings() const;
  public:
  void clear_kcp_settings();
  const ::improbable::platform::runtime::KcpLinkSettings& kcp_settings() const;
  ::improbable::platform::runtime::KcpLinkSettings* release_kcp_settings();
  ::improbable::platform::runtime::KcpLinkSettings* mutable_kcp_settings();
  void set_allocated_kcp_settings(::improbable::platform::runtime::KcpLinkSettings* kcp_settings);
  private:
  const ::improbable::platform::runtime::KcpLinkSettings& _internal_kcp_settings() const;
  ::improbable::platform::runtime::KcpLinkSettings* _internal_mutable_kcp_settings();
  public:
  void unsafe_arena_set_allocated_kcp_settings(
      ::improbable::platform::runtime::KcpLinkSettings* kcp_settings);
  ::improbable::platform::runtime::KcpLinkSettings* unsafe_arena_release_kcp_settings();

  void clear_link_settings();
  LinkSettingsCase link_settings_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.LinkSettings)
 private:
  class _Internal;
  void set_has_raknet_settings();
  void set_has_tcp_settings();
  void set_has_kcp_settings();

  inline bool has_link_settings() const;
  inline void clear_has_link_settings();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union LinkSettingsUnion {
    LinkSettingsUnion() {}
    ::improbable::platform::runtime::RakNetLinkSettings* raknet_settings_;
    ::improbable::platform::runtime::TcpLinkSettings* tcp_settings_;
    ::improbable::platform::runtime::KcpLinkSettings* kcp_settings_;
  } link_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ProtocolCapabilitiesV1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ProtocolCapabilitiesV1) */ {
 public:
  inline ProtocolCapabilitiesV1() : ProtocolCapabilitiesV1(nullptr) {}
  virtual ~ProtocolCapabilitiesV1();

  ProtocolCapabilitiesV1(const ProtocolCapabilitiesV1& from);
  ProtocolCapabilitiesV1(ProtocolCapabilitiesV1&& from) noexcept
    : ProtocolCapabilitiesV1() {
    *this = ::std::move(from);
  }

  inline ProtocolCapabilitiesV1& operator=(const ProtocolCapabilitiesV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolCapabilitiesV1& operator=(ProtocolCapabilitiesV1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolCapabilitiesV1& default_instance();

  static inline const ProtocolCapabilitiesV1* internal_default_instance() {
    return reinterpret_cast<const ProtocolCapabilitiesV1*>(
               &_ProtocolCapabilitiesV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProtocolCapabilitiesV1& a, ProtocolCapabilitiesV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolCapabilitiesV1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolCapabilitiesV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolCapabilitiesV1* New() const final {
    return CreateMaybeMessage<ProtocolCapabilitiesV1>(nullptr);
  }

  ProtocolCapabilitiesV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolCapabilitiesV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolCapabilitiesV1& from);
  void MergeFrom(const ProtocolCapabilitiesV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolCapabilitiesV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ProtocolCapabilitiesV1";
  }
  protected:
  explicit ProtocolCapabilitiesV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ProtocolCapabilitiesV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ProtocolCapabilitiesV2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ProtocolCapabilitiesV2) */ {
 public:
  inline ProtocolCapabilitiesV2() : ProtocolCapabilitiesV2(nullptr) {}
  virtual ~ProtocolCapabilitiesV2();

  ProtocolCapabilitiesV2(const ProtocolCapabilitiesV2& from);
  ProtocolCapabilitiesV2(ProtocolCapabilitiesV2&& from) noexcept
    : ProtocolCapabilitiesV2() {
    *this = ::std::move(from);
  }

  inline ProtocolCapabilitiesV2& operator=(const ProtocolCapabilitiesV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolCapabilitiesV2& operator=(ProtocolCapabilitiesV2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolCapabilitiesV2& default_instance();

  static inline const ProtocolCapabilitiesV2* internal_default_instance() {
    return reinterpret_cast<const ProtocolCapabilitiesV2*>(
               &_ProtocolCapabilitiesV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProtocolCapabilitiesV2& a, ProtocolCapabilitiesV2& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolCapabilitiesV2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolCapabilitiesV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolCapabilitiesV2* New() const final {
    return CreateMaybeMessage<ProtocolCapabilitiesV2>(nullptr);
  }

  ProtocolCapabilitiesV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolCapabilitiesV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolCapabilitiesV2& from);
  void MergeFrom(const ProtocolCapabilitiesV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolCapabilitiesV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ProtocolCapabilitiesV2";
  }
  protected:
  explicit ProtocolCapabilitiesV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ProtocolCapabilitiesV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ProtocolCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ProtocolCapabilities) */ {
 public:
  inline ProtocolCapabilities() : ProtocolCapabilities(nullptr) {}
  virtual ~ProtocolCapabilities();

  ProtocolCapabilities(const ProtocolCapabilities& from);
  ProtocolCapabilities(ProtocolCapabilities&& from) noexcept
    : ProtocolCapabilities() {
    *this = ::std::move(from);
  }

  inline ProtocolCapabilities& operator=(const ProtocolCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolCapabilities& operator=(ProtocolCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolCapabilities& default_instance();

  static inline const ProtocolCapabilities* internal_default_instance() {
    return reinterpret_cast<const ProtocolCapabilities*>(
               &_ProtocolCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProtocolCapabilities& a, ProtocolCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolCapabilities* New() const final {
    return CreateMaybeMessage<ProtocolCapabilities>(nullptr);
  }

  ProtocolCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolCapabilities& from);
  void MergeFrom(const ProtocolCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ProtocolCapabilities";
  }
  protected:
  explicit ProtocolCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilitiesV1FieldNumber = 1,
    kCapabilitiesV2FieldNumber = 2,
  };
  // .improbable.platform.runtime.ProtocolCapabilitiesV1 capabilities_v1 = 1;
  bool has_capabilities_v1() const;
  private:
  bool _internal_has_capabilities_v1() const;
  public:
  void clear_capabilities_v1();
  const ::improbable::platform::runtime::ProtocolCapabilitiesV1& capabilities_v1() const;
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* release_capabilities_v1();
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* mutable_capabilities_v1();
  void set_allocated_capabilities_v1(::improbable::platform::runtime::ProtocolCapabilitiesV1* capabilities_v1);
  private:
  const ::improbable::platform::runtime::ProtocolCapabilitiesV1& _internal_capabilities_v1() const;
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* _internal_mutable_capabilities_v1();
  public:
  void unsafe_arena_set_allocated_capabilities_v1(
      ::improbable::platform::runtime::ProtocolCapabilitiesV1* capabilities_v1);
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* unsafe_arena_release_capabilities_v1();

  // .improbable.platform.runtime.ProtocolCapabilitiesV2 capabilities_v2 = 2;
  bool has_capabilities_v2() const;
  private:
  bool _internal_has_capabilities_v2() const;
  public:
  void clear_capabilities_v2();
  const ::improbable::platform::runtime::ProtocolCapabilitiesV2& capabilities_v2() const;
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* release_capabilities_v2();
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* mutable_capabilities_v2();
  void set_allocated_capabilities_v2(::improbable::platform::runtime::ProtocolCapabilitiesV2* capabilities_v2);
  private:
  const ::improbable::platform::runtime::ProtocolCapabilitiesV2& _internal_capabilities_v2() const;
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* _internal_mutable_capabilities_v2();
  public:
  void unsafe_arena_set_allocated_capabilities_v2(
      ::improbable::platform::runtime::ProtocolCapabilitiesV2* capabilities_v2);
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* unsafe_arena_release_capabilities_v2();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ProtocolCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* capabilities_v1_;
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* capabilities_v2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ReceptionistLoginPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ReceptionistLoginPayload) */ {
 public:
  inline ReceptionistLoginPayload() : ReceptionistLoginPayload(nullptr) {}
  virtual ~ReceptionistLoginPayload();

  ReceptionistLoginPayload(const ReceptionistLoginPayload& from);
  ReceptionistLoginPayload(ReceptionistLoginPayload&& from) noexcept
    : ReceptionistLoginPayload() {
    *this = ::std::move(from);
  }

  inline ReceptionistLoginPayload& operator=(const ReceptionistLoginPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceptionistLoginPayload& operator=(ReceptionistLoginPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceptionistLoginPayload& default_instance();

  static inline const ReceptionistLoginPayload* internal_default_instance() {
    return reinterpret_cast<const ReceptionistLoginPayload*>(
               &_ReceptionistLoginPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReceptionistLoginPayload& a, ReceptionistLoginPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceptionistLoginPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceptionistLoginPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceptionistLoginPayload* New() const final {
    return CreateMaybeMessage<ReceptionistLoginPayload>(nullptr);
  }

  ReceptionistLoginPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceptionistLoginPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceptionistLoginPayload& from);
  void MergeFrom(const ReceptionistLoginPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceptionistLoginPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ReceptionistLoginPayload";
  }
  protected:
  explicit ReceptionistLoginPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kLinkSettingsFieldNumber = 2,
  };
  // string metadata = 1;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .improbable.platform.runtime.LinkSettings link_settings = 2;
  bool has_link_settings() const;
  private:
  bool _internal_has_link_settings() const;
  public:
  void clear_link_settings();
  const ::improbable::platform::runtime::LinkSettings& link_settings() const;
  ::improbable::platform::runtime::LinkSettings* release_link_settings();
  ::improbable::platform::runtime::LinkSettings* mutable_link_settings();
  void set_allocated_link_settings(::improbable::platform::runtime::LinkSettings* link_settings);
  private:
  const ::improbable::platform::runtime::LinkSettings& _internal_link_settings() const;
  ::improbable::platform::runtime::LinkSettings* _internal_mutable_link_settings();
  public:
  void unsafe_arena_set_allocated_link_settings(
      ::improbable::platform::runtime::LinkSettings* link_settings);
  ::improbable::platform::runtime::LinkSettings* unsafe_arena_release_link_settings();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ReceptionistLoginPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::improbable::platform::runtime::LinkSettings* link_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerTypeFieldNumber = 1,
    kWorkerIdFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kProtocolCapabilitiesFieldNumber = 4,
  };
  // string worker_type = 1;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // string worker_id = 2;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // bytes payload = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_payload();
  PROTOBUF_DEPRECATED const std::string& payload() const;
  PROTOBUF_DEPRECATED void set_payload(const std::string& value);
  PROTOBUF_DEPRECATED void set_payload(std::string&& value);
  PROTOBUF_DEPRECATED void set_payload(const char* value);
  PROTOBUF_DEPRECATED void set_payload(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_payload();
  PROTOBUF_DEPRECATED std::string* release_payload();
  PROTOBUF_DEPRECATED void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // bytes protocol_capabilities = 4;
  void clear_protocol_capabilities();
  const std::string& protocol_capabilities() const;
  void set_protocol_capabilities(const std::string& value);
  void set_protocol_capabilities(std::string&& value);
  void set_protocol_capabilities(const char* value);
  void set_protocol_capabilities(const void* value, size_t size);
  std::string* mutable_protocol_capabilities();
  std::string* release_protocol_capabilities();
  void set_allocated_protocol_capabilities(std::string* protocol_capabilities);
  private:
  const std::string& _internal_protocol_capabilities() const;
  void _internal_set_protocol_capabilities(const std::string& value);
  std::string* _internal_mutable_protocol_capabilities();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_capabilities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class BridgeSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.BridgeSession) */ {
 public:
  inline BridgeSession() : BridgeSession(nullptr) {}
  virtual ~BridgeSession();

  BridgeSession(const BridgeSession& from);
  BridgeSession(BridgeSession&& from) noexcept
    : BridgeSession() {
    *this = ::std::move(from);
  }

  inline BridgeSession& operator=(const BridgeSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeSession& operator=(BridgeSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BridgeSession& default_instance();

  static inline const BridgeSession* internal_default_instance() {
    return reinterpret_cast<const BridgeSession*>(
               &_BridgeSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BridgeSession& a, BridgeSession& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgeSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BridgeSession* New() const final {
    return CreateMaybeMessage<BridgeSession>(nullptr);
  }

  BridgeSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BridgeSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BridgeSession& from);
  void MergeFrom(const BridgeSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.BridgeSession";
  }
  protected:
  explicit BridgeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.BridgeSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class BridgeConnectionDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.BridgeConnectionDetails) */ {
 public:
  inline BridgeConnectionDetails() : BridgeConnectionDetails(nullptr) {}
  virtual ~BridgeConnectionDetails();

  BridgeConnectionDetails(const BridgeConnectionDetails& from);
  BridgeConnectionDetails(BridgeConnectionDetails&& from) noexcept
    : BridgeConnectionDetails() {
    *this = ::std::move(from);
  }

  inline BridgeConnectionDetails& operator=(const BridgeConnectionDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeConnectionDetails& operator=(BridgeConnectionDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BridgeConnectionDetails& default_instance();

  static inline const BridgeConnectionDetails* internal_default_instance() {
    return reinterpret_cast<const BridgeConnectionDetails*>(
               &_BridgeConnectionDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BridgeConnectionDetails& a, BridgeConnectionDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgeConnectionDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeConnectionDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BridgeConnectionDetails* New() const final {
    return CreateMaybeMessage<BridgeConnectionDetails>(nullptr);
  }

  BridgeConnectionDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BridgeConnectionDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BridgeConnectionDetails& from);
  void MergeFrom(const BridgeConnectionDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeConnectionDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.BridgeConnectionDetails";
  }
  protected:
  explicit BridgeConnectionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalHostFieldNumber = 1,
    kInternalHostFieldNumber = 2,
    kDeploymentCertificateFieldNumber = 5,
    kSessionFieldNumber = 4,
    kInternalPortFieldNumber = 3,
    kExternalPortFieldNumber = 6,
  };
  // string external_host = 1;
  void clear_external_host();
  const std::string& external_host() const;
  void set_external_host(const std::string& value);
  void set_external_host(std::string&& value);
  void set_external_host(const char* value);
  void set_external_host(const char* value, size_t size);
  std::string* mutable_external_host();
  std::string* release_external_host();
  void set_allocated_external_host(std::string* external_host);
  private:
  const std::string& _internal_external_host() const;
  void _internal_set_external_host(const std::string& value);
  std::string* _internal_mutable_external_host();
  public:

  // string internal_host = 2;
  void clear_internal_host();
  const std::string& internal_host() const;
  void set_internal_host(const std::string& value);
  void set_internal_host(std::string&& value);
  void set_internal_host(const char* value);
  void set_internal_host(const char* value, size_t size);
  std::string* mutable_internal_host();
  std::string* release_internal_host();
  void set_allocated_internal_host(std::string* internal_host);
  private:
  const std::string& _internal_internal_host() const;
  void _internal_set_internal_host(const std::string& value);
  std::string* _internal_mutable_internal_host();
  public:

  // bytes deployment_certificate = 5;
  void clear_deployment_certificate();
  const std::string& deployment_certificate() const;
  void set_deployment_certificate(const std::string& value);
  void set_deployment_certificate(std::string&& value);
  void set_deployment_certificate(const char* value);
  void set_deployment_certificate(const void* value, size_t size);
  std::string* mutable_deployment_certificate();
  std::string* release_deployment_certificate();
  void set_allocated_deployment_certificate(std::string* deployment_certificate);
  private:
  const std::string& _internal_deployment_certificate() const;
  void _internal_set_deployment_certificate(const std::string& value);
  std::string* _internal_mutable_deployment_certificate();
  public:

  // .improbable.platform.runtime.BridgeSession session = 4;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::improbable::platform::runtime::BridgeSession& session() const;
  ::improbable::platform::runtime::BridgeSession* release_session();
  ::improbable::platform::runtime::BridgeSession* mutable_session();
  void set_allocated_session(::improbable::platform::runtime::BridgeSession* session);
  private:
  const ::improbable::platform::runtime::BridgeSession& _internal_session() const;
  ::improbable::platform::runtime::BridgeSession* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::improbable::platform::runtime::BridgeSession* session);
  ::improbable::platform::runtime::BridgeSession* unsafe_arena_release_session();

  // int32 internal_port = 3;
  void clear_internal_port();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_port() const;
  void set_internal_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_internal_port() const;
  void _internal_set_internal_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 external_port = 6;
  void clear_external_port();
  ::PROTOBUF_NAMESPACE_ID::int32 external_port() const;
  void set_external_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_external_port() const;
  void _internal_set_external_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.BridgeConnectionDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr external_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_certificate_;
  ::improbable::platform::runtime::BridgeSession* session_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 external_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ProtocolSettingsV1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ProtocolSettingsV1) */ {
 public:
  inline ProtocolSettingsV1() : ProtocolSettingsV1(nullptr) {}
  virtual ~ProtocolSettingsV1();

  ProtocolSettingsV1(const ProtocolSettingsV1& from);
  ProtocolSettingsV1(ProtocolSettingsV1&& from) noexcept
    : ProtocolSettingsV1() {
    *this = ::std::move(from);
  }

  inline ProtocolSettingsV1& operator=(const ProtocolSettingsV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSettingsV1& operator=(ProtocolSettingsV1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolSettingsV1& default_instance();

  static inline const ProtocolSettingsV1* internal_default_instance() {
    return reinterpret_cast<const ProtocolSettingsV1*>(
               &_ProtocolSettingsV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProtocolSettingsV1& a, ProtocolSettingsV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSettingsV1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSettingsV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSettingsV1* New() const final {
    return CreateMaybeMessage<ProtocolSettingsV1>(nullptr);
  }

  ProtocolSettingsV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSettingsV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolSettingsV1& from);
  void MergeFrom(const ProtocolSettingsV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSettingsV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ProtocolSettingsV1";
  }
  protected:
  explicit ProtocolSettingsV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgeDetailsFieldNumber = 1,
  };
  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
  bool has_bridge_details() const;
  private:
  bool _internal_has_bridge_details() const;
  public:
  void clear_bridge_details();
  const ::improbable::platform::runtime::BridgeConnectionDetails& bridge_details() const;
  ::improbable::platform::runtime::BridgeConnectionDetails* release_bridge_details();
  ::improbable::platform::runtime::BridgeConnectionDetails* mutable_bridge_details();
  void set_allocated_bridge_details(::improbable::platform::runtime::BridgeConnectionDetails* bridge_details);
  private:
  const ::improbable::platform::runtime::BridgeConnectionDetails& _internal_bridge_details() const;
  ::improbable::platform::runtime::BridgeConnectionDetails* _internal_mutable_bridge_details();
  public:
  void unsafe_arena_set_allocated_bridge_details(
      ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details);
  ::improbable::platform::runtime::BridgeConnectionDetails* unsafe_arena_release_bridge_details();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ProtocolSettingsV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ProtocolSettingsV2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ProtocolSettingsV2) */ {
 public:
  inline ProtocolSettingsV2() : ProtocolSettingsV2(nullptr) {}
  virtual ~ProtocolSettingsV2();

  ProtocolSettingsV2(const ProtocolSettingsV2& from);
  ProtocolSettingsV2(ProtocolSettingsV2&& from) noexcept
    : ProtocolSettingsV2() {
    *this = ::std::move(from);
  }

  inline ProtocolSettingsV2& operator=(const ProtocolSettingsV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSettingsV2& operator=(ProtocolSettingsV2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolSettingsV2& default_instance();

  static inline const ProtocolSettingsV2* internal_default_instance() {
    return reinterpret_cast<const ProtocolSettingsV2*>(
               &_ProtocolSettingsV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProtocolSettingsV2& a, ProtocolSettingsV2& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSettingsV2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSettingsV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSettingsV2* New() const final {
    return CreateMaybeMessage<ProtocolSettingsV2>(nullptr);
  }

  ProtocolSettingsV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSettingsV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolSettingsV2& from);
  void MergeFrom(const ProtocolSettingsV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSettingsV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ProtocolSettingsV2";
  }
  protected:
  explicit ProtocolSettingsV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgeDetailsFieldNumber = 1,
  };
  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
  bool has_bridge_details() const;
  private:
  bool _internal_has_bridge_details() const;
  public:
  void clear_bridge_details();
  const ::improbable::platform::runtime::BridgeConnectionDetails& bridge_details() const;
  ::improbable::platform::runtime::BridgeConnectionDetails* release_bridge_details();
  ::improbable::platform::runtime::BridgeConnectionDetails* mutable_bridge_details();
  void set_allocated_bridge_details(::improbable::platform::runtime::BridgeConnectionDetails* bridge_details);
  private:
  const ::improbable::platform::runtime::BridgeConnectionDetails& _internal_bridge_details() const;
  ::improbable::platform::runtime::BridgeConnectionDetails* _internal_mutable_bridge_details();
  public:
  void unsafe_arena_set_allocated_bridge_details(
      ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details);
  ::improbable::platform::runtime::BridgeConnectionDetails* unsafe_arena_release_bridge_details();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ProtocolSettingsV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class ProtocolSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ProtocolSettings) */ {
 public:
  inline ProtocolSettings() : ProtocolSettings(nullptr) {}
  virtual ~ProtocolSettings();

  ProtocolSettings(const ProtocolSettings& from);
  ProtocolSettings(ProtocolSettings&& from) noexcept
    : ProtocolSettings() {
    *this = ::std::move(from);
  }

  inline ProtocolSettings& operator=(const ProtocolSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolSettings& operator=(ProtocolSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolSettings& default_instance();

  enum SettingsCase {
    kProtocolSettingsV1 = 1,
    kProtocolSettingsV2 = 2,
    SETTINGS_NOT_SET = 0,
  };

  static inline const ProtocolSettings* internal_default_instance() {
    return reinterpret_cast<const ProtocolSettings*>(
               &_ProtocolSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProtocolSettings& a, ProtocolSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolSettings* New() const final {
    return CreateMaybeMessage<ProtocolSettings>(nullptr);
  }

  ProtocolSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolSettings& from);
  void MergeFrom(const ProtocolSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ProtocolSettings";
  }
  protected:
  explicit ProtocolSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolSettingsV1FieldNumber = 1,
    kProtocolSettingsV2FieldNumber = 2,
  };
  // .improbable.platform.runtime.ProtocolSettingsV1 protocol_settings_v1 = 1;
  bool has_protocol_settings_v1() const;
  private:
  bool _internal_has_protocol_settings_v1() const;
  public:
  void clear_protocol_settings_v1();
  const ::improbable::platform::runtime::ProtocolSettingsV1& protocol_settings_v1() const;
  ::improbable::platform::runtime::ProtocolSettingsV1* release_protocol_settings_v1();
  ::improbable::platform::runtime::ProtocolSettingsV1* mutable_protocol_settings_v1();
  void set_allocated_protocol_settings_v1(::improbable::platform::runtime::ProtocolSettingsV1* protocol_settings_v1);
  private:
  const ::improbable::platform::runtime::ProtocolSettingsV1& _internal_protocol_settings_v1() const;
  ::improbable::platform::runtime::ProtocolSettingsV1* _internal_mutable_protocol_settings_v1();
  public:
  void unsafe_arena_set_allocated_protocol_settings_v1(
      ::improbable::platform::runtime::ProtocolSettingsV1* protocol_settings_v1);
  ::improbable::platform::runtime::ProtocolSettingsV1* unsafe_arena_release_protocol_settings_v1();

  // .improbable.platform.runtime.ProtocolSettingsV2 protocol_settings_v2 = 2;
  bool has_protocol_settings_v2() const;
  private:
  bool _internal_has_protocol_settings_v2() const;
  public:
  void clear_protocol_settings_v2();
  const ::improbable::platform::runtime::ProtocolSettingsV2& protocol_settings_v2() const;
  ::improbable::platform::runtime::ProtocolSettingsV2* release_protocol_settings_v2();
  ::improbable::platform::runtime::ProtocolSettingsV2* mutable_protocol_settings_v2();
  void set_allocated_protocol_settings_v2(::improbable::platform::runtime::ProtocolSettingsV2* protocol_settings_v2);
  private:
  const ::improbable::platform::runtime::ProtocolSettingsV2& _internal_protocol_settings_v2() const;
  ::improbable::platform::runtime::ProtocolSettingsV2* _internal_mutable_protocol_settings_v2();
  public:
  void unsafe_arena_set_allocated_protocol_settings_v2(
      ::improbable::platform::runtime::ProtocolSettingsV2* protocol_settings_v2);
  ::improbable::platform::runtime::ProtocolSettingsV2* unsafe_arena_release_protocol_settings_v2();

  void clear_settings();
  SettingsCase settings_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ProtocolSettings)
 private:
  class _Internal;
  void set_has_protocol_settings_v1();
  void set_has_protocol_settings_v2();

  inline bool has_settings() const;
  inline void clear_has_settings();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SettingsUnion {
    SettingsUnion() {}
    ::improbable::platform::runtime::ProtocolSettingsV1* protocol_settings_v1_;
    ::improbable::platform::runtime::ProtocolSettingsV2* protocol_settings_v2_;
  } settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolSettingsFieldNumber = 2,
    kBridgeDetailsFieldNumber = 1,
  };
  // bytes protocol_settings = 2;
  void clear_protocol_settings();
  const std::string& protocol_settings() const;
  void set_protocol_settings(const std::string& value);
  void set_protocol_settings(std::string&& value);
  void set_protocol_settings(const char* value);
  void set_protocol_settings(const void* value, size_t size);
  std::string* mutable_protocol_settings();
  std::string* release_protocol_settings();
  void set_allocated_protocol_settings(std::string* protocol_settings);
  private:
  const std::string& _internal_protocol_settings() const;
  void _internal_set_protocol_settings(const std::string& value);
  std::string* _internal_mutable_protocol_settings();
  public:

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_bridge_details() const;
  private:
  bool _internal_has_bridge_details() const;
  public:
  PROTOBUF_DEPRECATED void clear_bridge_details();
  PROTOBUF_DEPRECATED const ::improbable::platform::runtime::BridgeConnectionDetails& bridge_details() const;
  PROTOBUF_DEPRECATED ::improbable::platform::runtime::BridgeConnectionDetails* release_bridge_details();
  PROTOBUF_DEPRECATED ::improbable::platform::runtime::BridgeConnectionDetails* mutable_bridge_details();
  PROTOBUF_DEPRECATED void set_allocated_bridge_details(::improbable::platform::runtime::BridgeConnectionDetails* bridge_details);
  private:
  const ::improbable::platform::runtime::BridgeConnectionDetails& _internal_bridge_details() const;
  ::improbable::platform::runtime::BridgeConnectionDetails* _internal_mutable_bridge_details();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_bridge_details(
      ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details);
  PROTOBUF_DEPRECATED ::improbable::platform::runtime::BridgeConnectionDetails* unsafe_arena_release_bridge_details();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_settings_;
  ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class RemainingCapacityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.RemainingCapacityRequest) */ {
 public:
  inline RemainingCapacityRequest() : RemainingCapacityRequest(nullptr) {}
  virtual ~RemainingCapacityRequest();

  RemainingCapacityRequest(const RemainingCapacityRequest& from);
  RemainingCapacityRequest(RemainingCapacityRequest&& from) noexcept
    : RemainingCapacityRequest() {
    *this = ::std::move(from);
  }

  inline RemainingCapacityRequest& operator=(const RemainingCapacityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemainingCapacityRequest& operator=(RemainingCapacityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemainingCapacityRequest& default_instance();

  static inline const RemainingCapacityRequest* internal_default_instance() {
    return reinterpret_cast<const RemainingCapacityRequest*>(
               &_RemainingCapacityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RemainingCapacityRequest& a, RemainingCapacityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemainingCapacityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemainingCapacityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemainingCapacityRequest* New() const final {
    return CreateMaybeMessage<RemainingCapacityRequest>(nullptr);
  }

  RemainingCapacityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemainingCapacityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemainingCapacityRequest& from);
  void MergeFrom(const RemainingCapacityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemainingCapacityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.RemainingCapacityRequest";
  }
  protected:
  explicit RemainingCapacityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.RemainingCapacityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// -------------------------------------------------------------------

class RemainingCapacityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.RemainingCapacityResponse) */ {
 public:
  inline RemainingCapacityResponse() : RemainingCapacityResponse(nullptr) {}
  virtual ~RemainingCapacityResponse();

  RemainingCapacityResponse(const RemainingCapacityResponse& from);
  RemainingCapacityResponse(RemainingCapacityResponse&& from) noexcept
    : RemainingCapacityResponse() {
    *this = ::std::move(from);
  }

  inline RemainingCapacityResponse& operator=(const RemainingCapacityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemainingCapacityResponse& operator=(RemainingCapacityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemainingCapacityResponse& default_instance();

  static inline const RemainingCapacityResponse* internal_default_instance() {
    return reinterpret_cast<const RemainingCapacityResponse*>(
               &_RemainingCapacityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RemainingCapacityResponse& a, RemainingCapacityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemainingCapacityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemainingCapacityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemainingCapacityResponse* New() const final {
    return CreateMaybeMessage<RemainingCapacityResponse>(nullptr);
  }

  RemainingCapacityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemainingCapacityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemainingCapacityResponse& from);
  void MergeFrom(const RemainingCapacityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemainingCapacityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.RemainingCapacityResponse";
  }
  protected:
  explicit RemainingCapacityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2freceptionist_2eproto);
    return ::descriptor_table_runtime_2freceptionist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemainingCapacityFieldNumber = 1,
  };
  // int64 remaining_capacity = 1;
  void clear_remaining_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 remaining_capacity() const;
  void set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remaining_capacity() const;
  void _internal_set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.RemainingCapacityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 remaining_capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2freceptionist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RakNetLinkSettings

// uint64 heartbeat_timeout_ms = 1;
inline void RakNetLinkSettings::clear_heartbeat_timeout_ms() {
  heartbeat_timeout_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RakNetLinkSettings::_internal_heartbeat_timeout_ms() const {
  return heartbeat_timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RakNetLinkSettings::heartbeat_timeout_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RakNetLinkSettings.heartbeat_timeout_ms)
  return _internal_heartbeat_timeout_ms();
}
inline void RakNetLinkSettings::_internal_set_heartbeat_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  heartbeat_timeout_ms_ = value;
}
inline void RakNetLinkSettings::set_heartbeat_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_heartbeat_timeout_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RakNetLinkSettings.heartbeat_timeout_ms)
}

// uint64 initial_connection_timeout_ms = 2;
inline void RakNetLinkSettings::clear_initial_connection_timeout_ms() {
  initial_connection_timeout_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RakNetLinkSettings::_internal_initial_connection_timeout_ms() const {
  return initial_connection_timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RakNetLinkSettings::initial_connection_timeout_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RakNetLinkSettings.initial_connection_timeout_ms)
  return _internal_initial_connection_timeout_ms();
}
inline void RakNetLinkSettings::_internal_set_initial_connection_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  initial_connection_timeout_ms_ = value;
}
inline void RakNetLinkSettings::set_initial_connection_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initial_connection_timeout_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RakNetLinkSettings.initial_connection_timeout_ms)
}

// -------------------------------------------------------------------

// TcpLinkSettings

// int32 multiplex_level = 1;
inline void TcpLinkSettings::clear_multiplex_level() {
  multiplex_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TcpLinkSettings::_internal_multiplex_level() const {
  return multiplex_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TcpLinkSettings::multiplex_level() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.TcpLinkSettings.multiplex_level)
  return _internal_multiplex_level();
}
inline void TcpLinkSettings::_internal_set_multiplex_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  multiplex_level_ = value;
}
inline void TcpLinkSettings::set_multiplex_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_multiplex_level(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.TcpLinkSettings.multiplex_level)
}

// -------------------------------------------------------------------

// ErasureCodecParameters

// uint32 original_packet_count = 1;
inline void ErasureCodecParameters::clear_original_packet_count() {
  original_packet_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErasureCodecParameters::_internal_original_packet_count() const {
  return original_packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErasureCodecParameters::original_packet_count() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ErasureCodecParameters.original_packet_count)
  return _internal_original_packet_count();
}
inline void ErasureCodecParameters::_internal_set_original_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  original_packet_count_ = value;
}
inline void ErasureCodecParameters::set_original_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_original_packet_count(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ErasureCodecParameters.original_packet_count)
}

// uint32 recovery_packet_count = 2;
inline void ErasureCodecParameters::clear_recovery_packet_count() {
  recovery_packet_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErasureCodecParameters::_internal_recovery_packet_count() const {
  return recovery_packet_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErasureCodecParameters::recovery_packet_count() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ErasureCodecParameters.recovery_packet_count)
  return _internal_recovery_packet_count();
}
inline void ErasureCodecParameters::_internal_set_recovery_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recovery_packet_count_ = value;
}
inline void ErasureCodecParameters::set_recovery_packet_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recovery_packet_count(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ErasureCodecParameters.recovery_packet_count)
}

// uint32 window_size = 3;
inline void ErasureCodecParameters::clear_window_size() {
  window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErasureCodecParameters::_internal_window_size() const {
  return window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ErasureCodecParameters::window_size() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ErasureCodecParameters.window_size)
  return _internal_window_size();
}
inline void ErasureCodecParameters::_internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  window_size_ = value;
}
inline void ErasureCodecParameters::set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ErasureCodecParameters.window_size)
}

// -------------------------------------------------------------------

// HeartbeatParameters

// uint64 interval_ms = 1;
inline void HeartbeatParameters::clear_interval_ms() {
  interval_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeartbeatParameters::_internal_interval_ms() const {
  return interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeartbeatParameters::interval_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.HeartbeatParameters.interval_ms)
  return _internal_interval_ms();
}
inline void HeartbeatParameters::_internal_set_interval_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  interval_ms_ = value;
}
inline void HeartbeatParameters::set_interval_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_interval_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.HeartbeatParameters.interval_ms)
}

// uint64 timeout_ms = 2;
inline void HeartbeatParameters::clear_timeout_ms() {
  timeout_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeartbeatParameters::_internal_timeout_ms() const {
  return timeout_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeartbeatParameters::timeout_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.HeartbeatParameters.timeout_ms)
  return _internal_timeout_ms();
}
inline void HeartbeatParameters::_internal_set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_ms_ = value;
}
inline void HeartbeatParameters::set_timeout_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.HeartbeatParameters.timeout_ms)
}

// -------------------------------------------------------------------

// KcpLinkSettings

// bool fast_retransmission = 1;
inline void KcpLinkSettings::clear_fast_retransmission() {
  fast_retransmission_ = false;
}
inline bool KcpLinkSettings::_internal_fast_retransmission() const {
  return fast_retransmission_;
}
inline bool KcpLinkSettings::fast_retransmission() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.fast_retransmission)
  return _internal_fast_retransmission();
}
inline void KcpLinkSettings::_internal_set_fast_retransmission(bool value) {
  
  fast_retransmission_ = value;
}
inline void KcpLinkSettings::set_fast_retransmission(bool value) {
  _internal_set_fast_retransmission(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.fast_retransmission)
}

// bool early_retransmission = 2;
inline void KcpLinkSettings::clear_early_retransmission() {
  early_retransmission_ = false;
}
inline bool KcpLinkSettings::_internal_early_retransmission() const {
  return early_retransmission_;
}
inline bool KcpLinkSettings::early_retransmission() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.early_retransmission)
  return _internal_early_retransmission();
}
inline void KcpLinkSettings::_internal_set_early_retransmission(bool value) {
  
  early_retransmission_ = value;
}
inline void KcpLinkSettings::set_early_retransmission(bool value) {
  _internal_set_early_retransmission(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.early_retransmission)
}

// bool non_concessional_flow_control = 3;
inline void KcpLinkSettings::clear_non_concessional_flow_control() {
  non_concessional_flow_control_ = false;
}
inline bool KcpLinkSettings::_internal_non_concessional_flow_control() const {
  return non_concessional_flow_control_;
}
inline bool KcpLinkSettings::non_concessional_flow_control() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.non_concessional_flow_control)
  return _internal_non_concessional_flow_control();
}
inline void KcpLinkSettings::_internal_set_non_concessional_flow_control(bool value) {
  
  non_concessional_flow_control_ = value;
}
inline void KcpLinkSettings::set_non_concessional_flow_control(bool value) {
  _internal_set_non_concessional_flow_control(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.non_concessional_flow_control)
}

// uint32 multiplex_level = 4;
inline void KcpLinkSettings::clear_multiplex_level() {
  multiplex_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::_internal_multiplex_level() const {
  return multiplex_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::multiplex_level() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.multiplex_level)
  return _internal_multiplex_level();
}
inline void KcpLinkSettings::_internal_set_multiplex_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  multiplex_level_ = value;
}
inline void KcpLinkSettings::set_multiplex_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multiplex_level(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.multiplex_level)
}

// uint32 update_interval_ms = 5;
inline void KcpLinkSettings::clear_update_interval_ms() {
  update_interval_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::_internal_update_interval_ms() const {
  return update_interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::update_interval_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.update_interval_ms)
  return _internal_update_interval_ms();
}
inline void KcpLinkSettings::_internal_set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_interval_ms_ = value;
}
inline void KcpLinkSettings::set_update_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_interval_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.update_interval_ms)
}

// uint32 min_rto_ms = 6;
inline void KcpLinkSettings::clear_min_rto_ms() {
  min_rto_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::_internal_min_rto_ms() const {
  return min_rto_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::min_rto_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.min_rto_ms)
  return _internal_min_rto_ms();
}
inline void KcpLinkSettings::_internal_set_min_rto_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_rto_ms_ = value;
}
inline void KcpLinkSettings::set_min_rto_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_rto_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.min_rto_ms)
}

// uint32 window_size = 7 [deprecated = true];
inline void KcpLinkSettings::clear_window_size() {
  window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::_internal_window_size() const {
  return window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::window_size() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.window_size)
  return _internal_window_size();
}
inline void KcpLinkSettings::_internal_set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  window_size_ = value;
}
inline void KcpLinkSettings::set_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_window_size(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.window_size)
}

// .improbable.platform.runtime.ErasureCodecParameters erasure_codec = 8;
inline bool KcpLinkSettings::_internal_has_erasure_codec() const {
  return this != internal_default_instance() && erasure_codec_ != nullptr;
}
inline bool KcpLinkSettings::has_erasure_codec() const {
  return _internal_has_erasure_codec();
}
inline void KcpLinkSettings::clear_erasure_codec() {
  if (GetArena() == nullptr && erasure_codec_ != nullptr) {
    delete erasure_codec_;
  }
  erasure_codec_ = nullptr;
}
inline const ::improbable::platform::runtime::ErasureCodecParameters& KcpLinkSettings::_internal_erasure_codec() const {
  const ::improbable::platform::runtime::ErasureCodecParameters* p = erasure_codec_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::ErasureCodecParameters&>(
      ::improbable::platform::runtime::_ErasureCodecParameters_default_instance_);
}
inline const ::improbable::platform::runtime::ErasureCodecParameters& KcpLinkSettings::erasure_codec() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.erasure_codec)
  return _internal_erasure_codec();
}
inline void KcpLinkSettings::unsafe_arena_set_allocated_erasure_codec(
    ::improbable::platform::runtime::ErasureCodecParameters* erasure_codec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(erasure_codec_);
  }
  erasure_codec_ = erasure_codec;
  if (erasure_codec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.KcpLinkSettings.erasure_codec)
}
inline ::improbable::platform::runtime::ErasureCodecParameters* KcpLinkSettings::release_erasure_codec() {
  
  ::improbable::platform::runtime::ErasureCodecParameters* temp = erasure_codec_;
  erasure_codec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::ErasureCodecParameters* KcpLinkSettings::unsafe_arena_release_erasure_codec() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.KcpLinkSettings.erasure_codec)
  
  ::improbable::platform::runtime::ErasureCodecParameters* temp = erasure_codec_;
  erasure_codec_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::ErasureCodecParameters* KcpLinkSettings::_internal_mutable_erasure_codec() {
  
  if (erasure_codec_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::ErasureCodecParameters>(GetArena());
    erasure_codec_ = p;
  }
  return erasure_codec_;
}
inline ::improbable::platform::runtime::ErasureCodecParameters* KcpLinkSettings::mutable_erasure_codec() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.KcpLinkSettings.erasure_codec)
  return _internal_mutable_erasure_codec();
}
inline void KcpLinkSettings::set_allocated_erasure_codec(::improbable::platform::runtime::ErasureCodecParameters* erasure_codec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete erasure_codec_;
  }
  if (erasure_codec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(erasure_codec);
    if (message_arena != submessage_arena) {
      erasure_codec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, erasure_codec, submessage_arena);
    }
    
  } else {
    
  }
  erasure_codec_ = erasure_codec;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.KcpLinkSettings.erasure_codec)
}

// .improbable.platform.runtime.HeartbeatParameters heartbeat = 9;
inline bool KcpLinkSettings::_internal_has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != nullptr;
}
inline bool KcpLinkSettings::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void KcpLinkSettings::clear_heartbeat() {
  if (GetArena() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
}
inline const ::improbable::platform::runtime::HeartbeatParameters& KcpLinkSettings::_internal_heartbeat() const {
  const ::improbable::platform::runtime::HeartbeatParameters* p = heartbeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::HeartbeatParameters&>(
      ::improbable::platform::runtime::_HeartbeatParameters_default_instance_);
}
inline const ::improbable::platform::runtime::HeartbeatParameters& KcpLinkSettings::heartbeat() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.heartbeat)
  return _internal_heartbeat();
}
inline void KcpLinkSettings::unsafe_arena_set_allocated_heartbeat(
    ::improbable::platform::runtime::HeartbeatParameters* heartbeat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_);
  }
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.KcpLinkSettings.heartbeat)
}
inline ::improbable::platform::runtime::HeartbeatParameters* KcpLinkSettings::release_heartbeat() {
  
  ::improbable::platform::runtime::HeartbeatParameters* temp = heartbeat_;
  heartbeat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::HeartbeatParameters* KcpLinkSettings::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.KcpLinkSettings.heartbeat)
  
  ::improbable::platform::runtime::HeartbeatParameters* temp = heartbeat_;
  heartbeat_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::HeartbeatParameters* KcpLinkSettings::_internal_mutable_heartbeat() {
  
  if (heartbeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::HeartbeatParameters>(GetArena());
    heartbeat_ = p;
  }
  return heartbeat_;
}
inline ::improbable::platform::runtime::HeartbeatParameters* KcpLinkSettings::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.KcpLinkSettings.heartbeat)
  return _internal_mutable_heartbeat();
}
inline void KcpLinkSettings::set_allocated_heartbeat(::improbable::platform::runtime::HeartbeatParameters* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heartbeat_;
  }
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_ = heartbeat;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.KcpLinkSettings.heartbeat)
}

// uint32 send_window_size = 10;
inline void KcpLinkSettings::clear_send_window_size() {
  send_window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::_internal_send_window_size() const {
  return send_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::send_window_size() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.send_window_size)
  return _internal_send_window_size();
}
inline void KcpLinkSettings::_internal_set_send_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_window_size_ = value;
}
inline void KcpLinkSettings::set_send_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_window_size(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.send_window_size)
}

// uint32 recv_window_size = 11;
inline void KcpLinkSettings::clear_recv_window_size() {
  recv_window_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::_internal_recv_window_size() const {
  return recv_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KcpLinkSettings::recv_window_size() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.recv_window_size)
  return _internal_recv_window_size();
}
inline void KcpLinkSettings::_internal_set_recv_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recv_window_size_ = value;
}
inline void KcpLinkSettings::set_recv_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recv_window_size(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.recv_window_size)
}

// .improbable.platform.runtime.SecurityLayer security_layer = 12;
inline void KcpLinkSettings::clear_security_layer() {
  security_layer_ = 0;
}
inline ::improbable::platform::runtime::SecurityLayer KcpLinkSettings::_internal_security_layer() const {
  return static_cast< ::improbable::platform::runtime::SecurityLayer >(security_layer_);
}
inline ::improbable::platform::runtime::SecurityLayer KcpLinkSettings::security_layer() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.KcpLinkSettings.security_layer)
  return _internal_security_layer();
}
inline void KcpLinkSettings::_internal_set_security_layer(::improbable::platform::runtime::SecurityLayer value) {
  
  security_layer_ = value;
}
inline void KcpLinkSettings::set_security_layer(::improbable::platform::runtime::SecurityLayer value) {
  _internal_set_security_layer(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.KcpLinkSettings.security_layer)
}

// -------------------------------------------------------------------

// LinkSettings

// .improbable.platform.runtime.RakNetLinkSettings raknet_settings = 1;
inline bool LinkSettings::_internal_has_raknet_settings() const {
  return link_settings_case() == kRaknetSettings;
}
inline bool LinkSettings::has_raknet_settings() const {
  return _internal_has_raknet_settings();
}
inline void LinkSettings::set_has_raknet_settings() {
  _oneof_case_[0] = kRaknetSettings;
}
inline void LinkSettings::clear_raknet_settings() {
  if (_internal_has_raknet_settings()) {
    if (GetArena() == nullptr) {
      delete link_settings_.raknet_settings_;
    }
    clear_has_link_settings();
  }
}
inline ::improbable::platform::runtime::RakNetLinkSettings* LinkSettings::release_raknet_settings() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LinkSettings.raknet_settings)
  if (_internal_has_raknet_settings()) {
    clear_has_link_settings();
      ::improbable::platform::runtime::RakNetLinkSettings* temp = link_settings_.raknet_settings_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    link_settings_.raknet_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::RakNetLinkSettings& LinkSettings::_internal_raknet_settings() const {
  return _internal_has_raknet_settings()
      ? *link_settings_.raknet_settings_
      : reinterpret_cast< ::improbable::platform::runtime::RakNetLinkSettings&>(::improbable::platform::runtime::_RakNetLinkSettings_default_instance_);
}
inline const ::improbable::platform::runtime::RakNetLinkSettings& LinkSettings::raknet_settings() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LinkSettings.raknet_settings)
  return _internal_raknet_settings();
}
inline ::improbable::platform::runtime::RakNetLinkSettings* LinkSettings::unsafe_arena_release_raknet_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.LinkSettings.raknet_settings)
  if (_internal_has_raknet_settings()) {
    clear_has_link_settings();
    ::improbable::platform::runtime::RakNetLinkSettings* temp = link_settings_.raknet_settings_;
    link_settings_.raknet_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkSettings::unsafe_arena_set_allocated_raknet_settings(::improbable::platform::runtime::RakNetLinkSettings* raknet_settings) {
  clear_link_settings();
  if (raknet_settings) {
    set_has_raknet_settings();
    link_settings_.raknet_settings_ = raknet_settings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.LinkSettings.raknet_settings)
}
inline ::improbable::platform::runtime::RakNetLinkSettings* LinkSettings::_internal_mutable_raknet_settings() {
  if (!_internal_has_raknet_settings()) {
    clear_link_settings();
    set_has_raknet_settings();
    link_settings_.raknet_settings_ = CreateMaybeMessage< ::improbable::platform::runtime::RakNetLinkSettings >(GetArena());
  }
  return link_settings_.raknet_settings_;
}
inline ::improbable::platform::runtime::RakNetLinkSettings* LinkSettings::mutable_raknet_settings() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LinkSettings.raknet_settings)
  return _internal_mutable_raknet_settings();
}

// .improbable.platform.runtime.TcpLinkSettings tcp_settings = 2;
inline bool LinkSettings::_internal_has_tcp_settings() const {
  return link_settings_case() == kTcpSettings;
}
inline bool LinkSettings::has_tcp_settings() const {
  return _internal_has_tcp_settings();
}
inline void LinkSettings::set_has_tcp_settings() {
  _oneof_case_[0] = kTcpSettings;
}
inline void LinkSettings::clear_tcp_settings() {
  if (_internal_has_tcp_settings()) {
    if (GetArena() == nullptr) {
      delete link_settings_.tcp_settings_;
    }
    clear_has_link_settings();
  }
}
inline ::improbable::platform::runtime::TcpLinkSettings* LinkSettings::release_tcp_settings() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LinkSettings.tcp_settings)
  if (_internal_has_tcp_settings()) {
    clear_has_link_settings();
      ::improbable::platform::runtime::TcpLinkSettings* temp = link_settings_.tcp_settings_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    link_settings_.tcp_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::TcpLinkSettings& LinkSettings::_internal_tcp_settings() const {
  return _internal_has_tcp_settings()
      ? *link_settings_.tcp_settings_
      : reinterpret_cast< ::improbable::platform::runtime::TcpLinkSettings&>(::improbable::platform::runtime::_TcpLinkSettings_default_instance_);
}
inline const ::improbable::platform::runtime::TcpLinkSettings& LinkSettings::tcp_settings() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LinkSettings.tcp_settings)
  return _internal_tcp_settings();
}
inline ::improbable::platform::runtime::TcpLinkSettings* LinkSettings::unsafe_arena_release_tcp_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.LinkSettings.tcp_settings)
  if (_internal_has_tcp_settings()) {
    clear_has_link_settings();
    ::improbable::platform::runtime::TcpLinkSettings* temp = link_settings_.tcp_settings_;
    link_settings_.tcp_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkSettings::unsafe_arena_set_allocated_tcp_settings(::improbable::platform::runtime::TcpLinkSettings* tcp_settings) {
  clear_link_settings();
  if (tcp_settings) {
    set_has_tcp_settings();
    link_settings_.tcp_settings_ = tcp_settings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.LinkSettings.tcp_settings)
}
inline ::improbable::platform::runtime::TcpLinkSettings* LinkSettings::_internal_mutable_tcp_settings() {
  if (!_internal_has_tcp_settings()) {
    clear_link_settings();
    set_has_tcp_settings();
    link_settings_.tcp_settings_ = CreateMaybeMessage< ::improbable::platform::runtime::TcpLinkSettings >(GetArena());
  }
  return link_settings_.tcp_settings_;
}
inline ::improbable::platform::runtime::TcpLinkSettings* LinkSettings::mutable_tcp_settings() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LinkSettings.tcp_settings)
  return _internal_mutable_tcp_settings();
}

// .improbable.platform.runtime.KcpLinkSettings kcp_settings = 3;
inline bool LinkSettings::_internal_has_kcp_settings() const {
  return link_settings_case() == kKcpSettings;
}
inline bool LinkSettings::has_kcp_settings() const {
  return _internal_has_kcp_settings();
}
inline void LinkSettings::set_has_kcp_settings() {
  _oneof_case_[0] = kKcpSettings;
}
inline void LinkSettings::clear_kcp_settings() {
  if (_internal_has_kcp_settings()) {
    if (GetArena() == nullptr) {
      delete link_settings_.kcp_settings_;
    }
    clear_has_link_settings();
  }
}
inline ::improbable::platform::runtime::KcpLinkSettings* LinkSettings::release_kcp_settings() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LinkSettings.kcp_settings)
  if (_internal_has_kcp_settings()) {
    clear_has_link_settings();
      ::improbable::platform::runtime::KcpLinkSettings* temp = link_settings_.kcp_settings_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    link_settings_.kcp_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::KcpLinkSettings& LinkSettings::_internal_kcp_settings() const {
  return _internal_has_kcp_settings()
      ? *link_settings_.kcp_settings_
      : reinterpret_cast< ::improbable::platform::runtime::KcpLinkSettings&>(::improbable::platform::runtime::_KcpLinkSettings_default_instance_);
}
inline const ::improbable::platform::runtime::KcpLinkSettings& LinkSettings::kcp_settings() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LinkSettings.kcp_settings)
  return _internal_kcp_settings();
}
inline ::improbable::platform::runtime::KcpLinkSettings* LinkSettings::unsafe_arena_release_kcp_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.LinkSettings.kcp_settings)
  if (_internal_has_kcp_settings()) {
    clear_has_link_settings();
    ::improbable::platform::runtime::KcpLinkSettings* temp = link_settings_.kcp_settings_;
    link_settings_.kcp_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LinkSettings::unsafe_arena_set_allocated_kcp_settings(::improbable::platform::runtime::KcpLinkSettings* kcp_settings) {
  clear_link_settings();
  if (kcp_settings) {
    set_has_kcp_settings();
    link_settings_.kcp_settings_ = kcp_settings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.LinkSettings.kcp_settings)
}
inline ::improbable::platform::runtime::KcpLinkSettings* LinkSettings::_internal_mutable_kcp_settings() {
  if (!_internal_has_kcp_settings()) {
    clear_link_settings();
    set_has_kcp_settings();
    link_settings_.kcp_settings_ = CreateMaybeMessage< ::improbable::platform::runtime::KcpLinkSettings >(GetArena());
  }
  return link_settings_.kcp_settings_;
}
inline ::improbable::platform::runtime::KcpLinkSettings* LinkSettings::mutable_kcp_settings() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LinkSettings.kcp_settings)
  return _internal_mutable_kcp_settings();
}

inline bool LinkSettings::has_link_settings() const {
  return link_settings_case() != LINK_SETTINGS_NOT_SET;
}
inline void LinkSettings::clear_has_link_settings() {
  _oneof_case_[0] = LINK_SETTINGS_NOT_SET;
}
inline LinkSettings::LinkSettingsCase LinkSettings::link_settings_case() const {
  return LinkSettings::LinkSettingsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProtocolCapabilitiesV1

// -------------------------------------------------------------------

// ProtocolCapabilitiesV2

// -------------------------------------------------------------------

// ProtocolCapabilities

// .improbable.platform.runtime.ProtocolCapabilitiesV1 capabilities_v1 = 1;
inline bool ProtocolCapabilities::_internal_has_capabilities_v1() const {
  return this != internal_default_instance() && capabilities_v1_ != nullptr;
}
inline bool ProtocolCapabilities::has_capabilities_v1() const {
  return _internal_has_capabilities_v1();
}
inline void ProtocolCapabilities::clear_capabilities_v1() {
  if (GetArena() == nullptr && capabilities_v1_ != nullptr) {
    delete capabilities_v1_;
  }
  capabilities_v1_ = nullptr;
}
inline const ::improbable::platform::runtime::ProtocolCapabilitiesV1& ProtocolCapabilities::_internal_capabilities_v1() const {
  const ::improbable::platform::runtime::ProtocolCapabilitiesV1* p = capabilities_v1_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::ProtocolCapabilitiesV1&>(
      ::improbable::platform::runtime::_ProtocolCapabilitiesV1_default_instance_);
}
inline const ::improbable::platform::runtime::ProtocolCapabilitiesV1& ProtocolCapabilities::capabilities_v1() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ProtocolCapabilities.capabilities_v1)
  return _internal_capabilities_v1();
}
inline void ProtocolCapabilities::unsafe_arena_set_allocated_capabilities_v1(
    ::improbable::platform::runtime::ProtocolCapabilitiesV1* capabilities_v1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_v1_);
  }
  capabilities_v1_ = capabilities_v1;
  if (capabilities_v1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ProtocolCapabilities.capabilities_v1)
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV1* ProtocolCapabilities::release_capabilities_v1() {
  
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* temp = capabilities_v1_;
  capabilities_v1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV1* ProtocolCapabilities::unsafe_arena_release_capabilities_v1() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ProtocolCapabilities.capabilities_v1)
  
  ::improbable::platform::runtime::ProtocolCapabilitiesV1* temp = capabilities_v1_;
  capabilities_v1_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV1* ProtocolCapabilities::_internal_mutable_capabilities_v1() {
  
  if (capabilities_v1_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::ProtocolCapabilitiesV1>(GetArena());
    capabilities_v1_ = p;
  }
  return capabilities_v1_;
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV1* ProtocolCapabilities::mutable_capabilities_v1() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ProtocolCapabilities.capabilities_v1)
  return _internal_mutable_capabilities_v1();
}
inline void ProtocolCapabilities::set_allocated_capabilities_v1(::improbable::platform::runtime::ProtocolCapabilitiesV1* capabilities_v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capabilities_v1_;
  }
  if (capabilities_v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capabilities_v1);
    if (message_arena != submessage_arena) {
      capabilities_v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities_v1, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_v1_ = capabilities_v1;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ProtocolCapabilities.capabilities_v1)
}

// .improbable.platform.runtime.ProtocolCapabilitiesV2 capabilities_v2 = 2;
inline bool ProtocolCapabilities::_internal_has_capabilities_v2() const {
  return this != internal_default_instance() && capabilities_v2_ != nullptr;
}
inline bool ProtocolCapabilities::has_capabilities_v2() const {
  return _internal_has_capabilities_v2();
}
inline void ProtocolCapabilities::clear_capabilities_v2() {
  if (GetArena() == nullptr && capabilities_v2_ != nullptr) {
    delete capabilities_v2_;
  }
  capabilities_v2_ = nullptr;
}
inline const ::improbable::platform::runtime::ProtocolCapabilitiesV2& ProtocolCapabilities::_internal_capabilities_v2() const {
  const ::improbable::platform::runtime::ProtocolCapabilitiesV2* p = capabilities_v2_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::ProtocolCapabilitiesV2&>(
      ::improbable::platform::runtime::_ProtocolCapabilitiesV2_default_instance_);
}
inline const ::improbable::platform::runtime::ProtocolCapabilitiesV2& ProtocolCapabilities::capabilities_v2() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ProtocolCapabilities.capabilities_v2)
  return _internal_capabilities_v2();
}
inline void ProtocolCapabilities::unsafe_arena_set_allocated_capabilities_v2(
    ::improbable::platform::runtime::ProtocolCapabilitiesV2* capabilities_v2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_v2_);
  }
  capabilities_v2_ = capabilities_v2;
  if (capabilities_v2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ProtocolCapabilities.capabilities_v2)
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV2* ProtocolCapabilities::release_capabilities_v2() {
  
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* temp = capabilities_v2_;
  capabilities_v2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV2* ProtocolCapabilities::unsafe_arena_release_capabilities_v2() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ProtocolCapabilities.capabilities_v2)
  
  ::improbable::platform::runtime::ProtocolCapabilitiesV2* temp = capabilities_v2_;
  capabilities_v2_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV2* ProtocolCapabilities::_internal_mutable_capabilities_v2() {
  
  if (capabilities_v2_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::ProtocolCapabilitiesV2>(GetArena());
    capabilities_v2_ = p;
  }
  return capabilities_v2_;
}
inline ::improbable::platform::runtime::ProtocolCapabilitiesV2* ProtocolCapabilities::mutable_capabilities_v2() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ProtocolCapabilities.capabilities_v2)
  return _internal_mutable_capabilities_v2();
}
inline void ProtocolCapabilities::set_allocated_capabilities_v2(::improbable::platform::runtime::ProtocolCapabilitiesV2* capabilities_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capabilities_v2_;
  }
  if (capabilities_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capabilities_v2);
    if (message_arena != submessage_arena) {
      capabilities_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities_v2, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_v2_ = capabilities_v2;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ProtocolCapabilities.capabilities_v2)
}

// -------------------------------------------------------------------

// ReceptionistLoginPayload

// string metadata = 1;
inline void ReceptionistLoginPayload::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& ReceptionistLoginPayload::metadata() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
  return _internal_metadata();
}
inline void ReceptionistLoginPayload::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
}
inline std::string* ReceptionistLoginPayload::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& ReceptionistLoginPayload::_internal_metadata() const {
  return metadata_.Get();
}
inline void ReceptionistLoginPayload::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceptionistLoginPayload::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
}
inline void ReceptionistLoginPayload::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
}
inline void ReceptionistLoginPayload::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
}
inline std::string* ReceptionistLoginPayload::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceptionistLoginPayload::release_metadata() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceptionistLoginPayload::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ReceptionistLoginPayload.metadata)
}

// .improbable.platform.runtime.LinkSettings link_settings = 2;
inline bool ReceptionistLoginPayload::_internal_has_link_settings() const {
  return this != internal_default_instance() && link_settings_ != nullptr;
}
inline bool ReceptionistLoginPayload::has_link_settings() const {
  return _internal_has_link_settings();
}
inline void ReceptionistLoginPayload::clear_link_settings() {
  if (GetArena() == nullptr && link_settings_ != nullptr) {
    delete link_settings_;
  }
  link_settings_ = nullptr;
}
inline const ::improbable::platform::runtime::LinkSettings& ReceptionistLoginPayload::_internal_link_settings() const {
  const ::improbable::platform::runtime::LinkSettings* p = link_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::LinkSettings&>(
      ::improbable::platform::runtime::_LinkSettings_default_instance_);
}
inline const ::improbable::platform::runtime::LinkSettings& ReceptionistLoginPayload::link_settings() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ReceptionistLoginPayload.link_settings)
  return _internal_link_settings();
}
inline void ReceptionistLoginPayload::unsafe_arena_set_allocated_link_settings(
    ::improbable::platform::runtime::LinkSettings* link_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_settings_);
  }
  link_settings_ = link_settings;
  if (link_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ReceptionistLoginPayload.link_settings)
}
inline ::improbable::platform::runtime::LinkSettings* ReceptionistLoginPayload::release_link_settings() {
  
  ::improbable::platform::runtime::LinkSettings* temp = link_settings_;
  link_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::LinkSettings* ReceptionistLoginPayload::unsafe_arena_release_link_settings() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ReceptionistLoginPayload.link_settings)
  
  ::improbable::platform::runtime::LinkSettings* temp = link_settings_;
  link_settings_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::LinkSettings* ReceptionistLoginPayload::_internal_mutable_link_settings() {
  
  if (link_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::LinkSettings>(GetArena());
    link_settings_ = p;
  }
  return link_settings_;
}
inline ::improbable::platform::runtime::LinkSettings* ReceptionistLoginPayload::mutable_link_settings() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ReceptionistLoginPayload.link_settings)
  return _internal_mutable_link_settings();
}
inline void ReceptionistLoginPayload::set_allocated_link_settings(::improbable::platform::runtime::LinkSettings* link_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_settings_;
  }
  if (link_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link_settings);
    if (message_arena != submessage_arena) {
      link_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_settings, submessage_arena);
    }
    
  } else {
    
  }
  link_settings_ = link_settings;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ReceptionistLoginPayload.link_settings)
}

// -------------------------------------------------------------------

// LoginRequest

// string worker_type = 1;
inline void LoginRequest::clear_worker_type() {
  worker_type_.ClearToEmpty();
}
inline const std::string& LoginRequest::worker_type() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoginRequest.worker_type)
  return _internal_worker_type();
}
inline void LoginRequest::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.LoginRequest.worker_type)
}
inline std::string* LoginRequest::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LoginRequest.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& LoginRequest::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void LoginRequest::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.LoginRequest.worker_type)
}
inline void LoginRequest::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.LoginRequest.worker_type)
}
inline void LoginRequest::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.LoginRequest.worker_type)
}
inline std::string* LoginRequest::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_worker_type() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LoginRequest.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LoginRequest.worker_type)
}

// string worker_id = 2;
inline void LoginRequest::clear_worker_id() {
  worker_id_.ClearToEmpty();
}
inline const std::string& LoginRequest::worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoginRequest.worker_id)
  return _internal_worker_id();
}
inline void LoginRequest::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.LoginRequest.worker_id)
}
inline std::string* LoginRequest::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LoginRequest.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& LoginRequest::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void LoginRequest::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.LoginRequest.worker_id)
}
inline void LoginRequest::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.LoginRequest.worker_id)
}
inline void LoginRequest::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.LoginRequest.worker_id)
}
inline std::string* LoginRequest::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LoginRequest.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LoginRequest.worker_id)
}

// bytes payload = 3 [deprecated = true];
inline void LoginRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& LoginRequest::payload() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoginRequest.payload)
  return _internal_payload();
}
inline void LoginRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.LoginRequest.payload)
}
inline std::string* LoginRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LoginRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& LoginRequest::_internal_payload() const {
  return payload_.Get();
}
inline void LoginRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.LoginRequest.payload)
}
inline void LoginRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.LoginRequest.payload)
}
inline void LoginRequest::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.LoginRequest.payload)
}
inline std::string* LoginRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_payload() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LoginRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LoginRequest.payload)
}

// bytes protocol_capabilities = 4;
inline void LoginRequest::clear_protocol_capabilities() {
  protocol_capabilities_.ClearToEmpty();
}
inline const std::string& LoginRequest::protocol_capabilities() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoginRequest.protocol_capabilities)
  return _internal_protocol_capabilities();
}
inline void LoginRequest::set_protocol_capabilities(const std::string& value) {
  _internal_set_protocol_capabilities(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.LoginRequest.protocol_capabilities)
}
inline std::string* LoginRequest::mutable_protocol_capabilities() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LoginRequest.protocol_capabilities)
  return _internal_mutable_protocol_capabilities();
}
inline const std::string& LoginRequest::_internal_protocol_capabilities() const {
  return protocol_capabilities_.Get();
}
inline void LoginRequest::_internal_set_protocol_capabilities(const std::string& value) {
  
  protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_protocol_capabilities(std::string&& value) {
  
  protocol_capabilities_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.LoginRequest.protocol_capabilities)
}
inline void LoginRequest::set_protocol_capabilities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.LoginRequest.protocol_capabilities)
}
inline void LoginRequest::set_protocol_capabilities(const void* value,
    size_t size) {
  
  protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.LoginRequest.protocol_capabilities)
}
inline std::string* LoginRequest::_internal_mutable_protocol_capabilities() {
  
  return protocol_capabilities_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_protocol_capabilities() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LoginRequest.protocol_capabilities)
  return protocol_capabilities_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_protocol_capabilities(std::string* protocol_capabilities) {
  if (protocol_capabilities != nullptr) {
    
  } else {
    
  }
  protocol_capabilities_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_capabilities,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LoginRequest.protocol_capabilities)
}

// -------------------------------------------------------------------

// BridgeSession

// bytes token = 1;
inline void BridgeSession::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& BridgeSession::token() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeSession.token)
  return _internal_token();
}
inline void BridgeSession::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.BridgeSession.token)
}
inline std::string* BridgeSession::mutable_token() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BridgeSession.token)
  return _internal_mutable_token();
}
inline const std::string& BridgeSession::_internal_token() const {
  return token_.Get();
}
inline void BridgeSession::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BridgeSession::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.BridgeSession.token)
}
inline void BridgeSession::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.BridgeSession.token)
}
inline void BridgeSession::set_token(const void* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.BridgeSession.token)
}
inline std::string* BridgeSession::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BridgeSession::release_token() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BridgeSession.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BridgeSession::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BridgeSession.token)
}

// -------------------------------------------------------------------

// BridgeConnectionDetails

// string external_host = 1;
inline void BridgeConnectionDetails::clear_external_host() {
  external_host_.ClearToEmpty();
}
inline const std::string& BridgeConnectionDetails::external_host() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeConnectionDetails.external_host)
  return _internal_external_host();
}
inline void BridgeConnectionDetails::set_external_host(const std::string& value) {
  _internal_set_external_host(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.BridgeConnectionDetails.external_host)
}
inline std::string* BridgeConnectionDetails::mutable_external_host() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BridgeConnectionDetails.external_host)
  return _internal_mutable_external_host();
}
inline const std::string& BridgeConnectionDetails::_internal_external_host() const {
  return external_host_.Get();
}
inline void BridgeConnectionDetails::_internal_set_external_host(const std::string& value) {
  
  external_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BridgeConnectionDetails::set_external_host(std::string&& value) {
  
  external_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.BridgeConnectionDetails.external_host)
}
inline void BridgeConnectionDetails::set_external_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  external_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.BridgeConnectionDetails.external_host)
}
inline void BridgeConnectionDetails::set_external_host(const char* value,
    size_t size) {
  
  external_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.BridgeConnectionDetails.external_host)
}
inline std::string* BridgeConnectionDetails::_internal_mutable_external_host() {
  
  return external_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BridgeConnectionDetails::release_external_host() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BridgeConnectionDetails.external_host)
  return external_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BridgeConnectionDetails::set_allocated_external_host(std::string* external_host) {
  if (external_host != nullptr) {
    
  } else {
    
  }
  external_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), external_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BridgeConnectionDetails.external_host)
}

// string internal_host = 2;
inline void BridgeConnectionDetails::clear_internal_host() {
  internal_host_.ClearToEmpty();
}
inline const std::string& BridgeConnectionDetails::internal_host() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
  return _internal_internal_host();
}
inline void BridgeConnectionDetails::set_internal_host(const std::string& value) {
  _internal_set_internal_host(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
}
inline std::string* BridgeConnectionDetails::mutable_internal_host() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
  return _internal_mutable_internal_host();
}
inline const std::string& BridgeConnectionDetails::_internal_internal_host() const {
  return internal_host_.Get();
}
inline void BridgeConnectionDetails::_internal_set_internal_host(const std::string& value) {
  
  internal_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BridgeConnectionDetails::set_internal_host(std::string&& value) {
  
  internal_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
}
inline void BridgeConnectionDetails::set_internal_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  internal_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
}
inline void BridgeConnectionDetails::set_internal_host(const char* value,
    size_t size) {
  
  internal_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
}
inline std::string* BridgeConnectionDetails::_internal_mutable_internal_host() {
  
  return internal_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BridgeConnectionDetails::release_internal_host() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
  return internal_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BridgeConnectionDetails::set_allocated_internal_host(std::string* internal_host) {
  if (internal_host != nullptr) {
    
  } else {
    
  }
  internal_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BridgeConnectionDetails.internal_host)
}

// int32 internal_port = 3;
inline void BridgeConnectionDetails::clear_internal_port() {
  internal_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BridgeConnectionDetails::_internal_internal_port() const {
  return internal_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BridgeConnectionDetails::internal_port() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeConnectionDetails.internal_port)
  return _internal_internal_port();
}
inline void BridgeConnectionDetails::_internal_set_internal_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  internal_port_ = value;
}
inline void BridgeConnectionDetails::set_internal_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_internal_port(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.BridgeConnectionDetails.internal_port)
}

// int32 external_port = 6;
inline void BridgeConnectionDetails::clear_external_port() {
  external_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BridgeConnectionDetails::_internal_external_port() const {
  return external_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BridgeConnectionDetails::external_port() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeConnectionDetails.external_port)
  return _internal_external_port();
}
inline void BridgeConnectionDetails::_internal_set_external_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  external_port_ = value;
}
inline void BridgeConnectionDetails::set_external_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_external_port(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.BridgeConnectionDetails.external_port)
}

// .improbable.platform.runtime.BridgeSession session = 4;
inline bool BridgeConnectionDetails::_internal_has_session() const {
  return this != internal_default_instance() && session_ != nullptr;
}
inline bool BridgeConnectionDetails::has_session() const {
  return _internal_has_session();
}
inline void BridgeConnectionDetails::clear_session() {
  if (GetArena() == nullptr && session_ != nullptr) {
    delete session_;
  }
  session_ = nullptr;
}
inline const ::improbable::platform::runtime::BridgeSession& BridgeConnectionDetails::_internal_session() const {
  const ::improbable::platform::runtime::BridgeSession* p = session_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::BridgeSession&>(
      ::improbable::platform::runtime::_BridgeSession_default_instance_);
}
inline const ::improbable::platform::runtime::BridgeSession& BridgeConnectionDetails::session() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeConnectionDetails.session)
  return _internal_session();
}
inline void BridgeConnectionDetails::unsafe_arena_set_allocated_session(
    ::improbable::platform::runtime::BridgeSession* session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_);
  }
  session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.BridgeConnectionDetails.session)
}
inline ::improbable::platform::runtime::BridgeSession* BridgeConnectionDetails::release_session() {
  
  ::improbable::platform::runtime::BridgeSession* temp = session_;
  session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::BridgeSession* BridgeConnectionDetails::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BridgeConnectionDetails.session)
  
  ::improbable::platform::runtime::BridgeSession* temp = session_;
  session_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::BridgeSession* BridgeConnectionDetails::_internal_mutable_session() {
  
  if (session_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::BridgeSession>(GetArena());
    session_ = p;
  }
  return session_;
}
inline ::improbable::platform::runtime::BridgeSession* BridgeConnectionDetails::mutable_session() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BridgeConnectionDetails.session)
  return _internal_mutable_session();
}
inline void BridgeConnectionDetails::set_allocated_session(::improbable::platform::runtime::BridgeSession* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BridgeConnectionDetails.session)
}

// bytes deployment_certificate = 5;
inline void BridgeConnectionDetails::clear_deployment_certificate() {
  deployment_certificate_.ClearToEmpty();
}
inline const std::string& BridgeConnectionDetails::deployment_certificate() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
  return _internal_deployment_certificate();
}
inline void BridgeConnectionDetails::set_deployment_certificate(const std::string& value) {
  _internal_set_deployment_certificate(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
}
inline std::string* BridgeConnectionDetails::mutable_deployment_certificate() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
  return _internal_mutable_deployment_certificate();
}
inline const std::string& BridgeConnectionDetails::_internal_deployment_certificate() const {
  return deployment_certificate_.Get();
}
inline void BridgeConnectionDetails::_internal_set_deployment_certificate(const std::string& value) {
  
  deployment_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BridgeConnectionDetails::set_deployment_certificate(std::string&& value) {
  
  deployment_certificate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
}
inline void BridgeConnectionDetails::set_deployment_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
}
inline void BridgeConnectionDetails::set_deployment_certificate(const void* value,
    size_t size) {
  
  deployment_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
}
inline std::string* BridgeConnectionDetails::_internal_mutable_deployment_certificate() {
  
  return deployment_certificate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BridgeConnectionDetails::release_deployment_certificate() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
  return deployment_certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BridgeConnectionDetails::set_allocated_deployment_certificate(std::string* deployment_certificate) {
  if (deployment_certificate != nullptr) {
    
  } else {
    
  }
  deployment_certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_certificate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BridgeConnectionDetails.deployment_certificate)
}

// -------------------------------------------------------------------

// ProtocolSettingsV1

// .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
inline bool ProtocolSettingsV1::_internal_has_bridge_details() const {
  return this != internal_default_instance() && bridge_details_ != nullptr;
}
inline bool ProtocolSettingsV1::has_bridge_details() const {
  return _internal_has_bridge_details();
}
inline void ProtocolSettingsV1::clear_bridge_details() {
  if (GetArena() == nullptr && bridge_details_ != nullptr) {
    delete bridge_details_;
  }
  bridge_details_ = nullptr;
}
inline const ::improbable::platform::runtime::BridgeConnectionDetails& ProtocolSettingsV1::_internal_bridge_details() const {
  const ::improbable::platform::runtime::BridgeConnectionDetails* p = bridge_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::BridgeConnectionDetails&>(
      ::improbable::platform::runtime::_BridgeConnectionDetails_default_instance_);
}
inline const ::improbable::platform::runtime::BridgeConnectionDetails& ProtocolSettingsV1::bridge_details() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ProtocolSettingsV1.bridge_details)
  return _internal_bridge_details();
}
inline void ProtocolSettingsV1::unsafe_arena_set_allocated_bridge_details(
    ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bridge_details_);
  }
  bridge_details_ = bridge_details;
  if (bridge_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ProtocolSettingsV1.bridge_details)
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV1::release_bridge_details() {
  
  ::improbable::platform::runtime::BridgeConnectionDetails* temp = bridge_details_;
  bridge_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV1::unsafe_arena_release_bridge_details() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ProtocolSettingsV1.bridge_details)
  
  ::improbable::platform::runtime::BridgeConnectionDetails* temp = bridge_details_;
  bridge_details_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV1::_internal_mutable_bridge_details() {
  
  if (bridge_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::BridgeConnectionDetails>(GetArena());
    bridge_details_ = p;
  }
  return bridge_details_;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV1::mutable_bridge_details() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ProtocolSettingsV1.bridge_details)
  return _internal_mutable_bridge_details();
}
inline void ProtocolSettingsV1::set_allocated_bridge_details(::improbable::platform::runtime::BridgeConnectionDetails* bridge_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bridge_details_;
  }
  if (bridge_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bridge_details);
    if (message_arena != submessage_arena) {
      bridge_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bridge_details, submessage_arena);
    }
    
  } else {
    
  }
  bridge_details_ = bridge_details;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ProtocolSettingsV1.bridge_details)
}

// -------------------------------------------------------------------

// ProtocolSettingsV2

// .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
inline bool ProtocolSettingsV2::_internal_has_bridge_details() const {
  return this != internal_default_instance() && bridge_details_ != nullptr;
}
inline bool ProtocolSettingsV2::has_bridge_details() const {
  return _internal_has_bridge_details();
}
inline void ProtocolSettingsV2::clear_bridge_details() {
  if (GetArena() == nullptr && bridge_details_ != nullptr) {
    delete bridge_details_;
  }
  bridge_details_ = nullptr;
}
inline const ::improbable::platform::runtime::BridgeConnectionDetails& ProtocolSettingsV2::_internal_bridge_details() const {
  const ::improbable::platform::runtime::BridgeConnectionDetails* p = bridge_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::BridgeConnectionDetails&>(
      ::improbable::platform::runtime::_BridgeConnectionDetails_default_instance_);
}
inline const ::improbable::platform::runtime::BridgeConnectionDetails& ProtocolSettingsV2::bridge_details() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ProtocolSettingsV2.bridge_details)
  return _internal_bridge_details();
}
inline void ProtocolSettingsV2::unsafe_arena_set_allocated_bridge_details(
    ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bridge_details_);
  }
  bridge_details_ = bridge_details;
  if (bridge_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ProtocolSettingsV2.bridge_details)
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV2::release_bridge_details() {
  
  ::improbable::platform::runtime::BridgeConnectionDetails* temp = bridge_details_;
  bridge_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV2::unsafe_arena_release_bridge_details() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ProtocolSettingsV2.bridge_details)
  
  ::improbable::platform::runtime::BridgeConnectionDetails* temp = bridge_details_;
  bridge_details_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV2::_internal_mutable_bridge_details() {
  
  if (bridge_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::BridgeConnectionDetails>(GetArena());
    bridge_details_ = p;
  }
  return bridge_details_;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* ProtocolSettingsV2::mutable_bridge_details() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ProtocolSettingsV2.bridge_details)
  return _internal_mutable_bridge_details();
}
inline void ProtocolSettingsV2::set_allocated_bridge_details(::improbable::platform::runtime::BridgeConnectionDetails* bridge_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bridge_details_;
  }
  if (bridge_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bridge_details);
    if (message_arena != submessage_arena) {
      bridge_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bridge_details, submessage_arena);
    }
    
  } else {
    
  }
  bridge_details_ = bridge_details;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ProtocolSettingsV2.bridge_details)
}

// -------------------------------------------------------------------

// ProtocolSettings

// .improbable.platform.runtime.ProtocolSettingsV1 protocol_settings_v1 = 1;
inline bool ProtocolSettings::_internal_has_protocol_settings_v1() const {
  return settings_case() == kProtocolSettingsV1;
}
inline bool ProtocolSettings::has_protocol_settings_v1() const {
  return _internal_has_protocol_settings_v1();
}
inline void ProtocolSettings::set_has_protocol_settings_v1() {
  _oneof_case_[0] = kProtocolSettingsV1;
}
inline void ProtocolSettings::clear_protocol_settings_v1() {
  if (_internal_has_protocol_settings_v1()) {
    if (GetArena() == nullptr) {
      delete settings_.protocol_settings_v1_;
    }
    clear_has_settings();
  }
}
inline ::improbable::platform::runtime::ProtocolSettingsV1* ProtocolSettings::release_protocol_settings_v1() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ProtocolSettings.protocol_settings_v1)
  if (_internal_has_protocol_settings_v1()) {
    clear_has_settings();
      ::improbable::platform::runtime::ProtocolSettingsV1* temp = settings_.protocol_settings_v1_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    settings_.protocol_settings_v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::ProtocolSettingsV1& ProtocolSettings::_internal_protocol_settings_v1() const {
  return _internal_has_protocol_settings_v1()
      ? *settings_.protocol_settings_v1_
      : reinterpret_cast< ::improbable::platform::runtime::ProtocolSettingsV1&>(::improbable::platform::runtime::_ProtocolSettingsV1_default_instance_);
}
inline const ::improbable::platform::runtime::ProtocolSettingsV1& ProtocolSettings::protocol_settings_v1() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ProtocolSettings.protocol_settings_v1)
  return _internal_protocol_settings_v1();
}
inline ::improbable::platform::runtime::ProtocolSettingsV1* ProtocolSettings::unsafe_arena_release_protocol_settings_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.ProtocolSettings.protocol_settings_v1)
  if (_internal_has_protocol_settings_v1()) {
    clear_has_settings();
    ::improbable::platform::runtime::ProtocolSettingsV1* temp = settings_.protocol_settings_v1_;
    settings_.protocol_settings_v1_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtocolSettings::unsafe_arena_set_allocated_protocol_settings_v1(::improbable::platform::runtime::ProtocolSettingsV1* protocol_settings_v1) {
  clear_settings();
  if (protocol_settings_v1) {
    set_has_protocol_settings_v1();
    settings_.protocol_settings_v1_ = protocol_settings_v1;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ProtocolSettings.protocol_settings_v1)
}
inline ::improbable::platform::runtime::ProtocolSettingsV1* ProtocolSettings::_internal_mutable_protocol_settings_v1() {
  if (!_internal_has_protocol_settings_v1()) {
    clear_settings();
    set_has_protocol_settings_v1();
    settings_.protocol_settings_v1_ = CreateMaybeMessage< ::improbable::platform::runtime::ProtocolSettingsV1 >(GetArena());
  }
  return settings_.protocol_settings_v1_;
}
inline ::improbable::platform::runtime::ProtocolSettingsV1* ProtocolSettings::mutable_protocol_settings_v1() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ProtocolSettings.protocol_settings_v1)
  return _internal_mutable_protocol_settings_v1();
}

// .improbable.platform.runtime.ProtocolSettingsV2 protocol_settings_v2 = 2;
inline bool ProtocolSettings::_internal_has_protocol_settings_v2() const {
  return settings_case() == kProtocolSettingsV2;
}
inline bool ProtocolSettings::has_protocol_settings_v2() const {
  return _internal_has_protocol_settings_v2();
}
inline void ProtocolSettings::set_has_protocol_settings_v2() {
  _oneof_case_[0] = kProtocolSettingsV2;
}
inline void ProtocolSettings::clear_protocol_settings_v2() {
  if (_internal_has_protocol_settings_v2()) {
    if (GetArena() == nullptr) {
      delete settings_.protocol_settings_v2_;
    }
    clear_has_settings();
  }
}
inline ::improbable::platform::runtime::ProtocolSettingsV2* ProtocolSettings::release_protocol_settings_v2() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ProtocolSettings.protocol_settings_v2)
  if (_internal_has_protocol_settings_v2()) {
    clear_has_settings();
      ::improbable::platform::runtime::ProtocolSettingsV2* temp = settings_.protocol_settings_v2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    settings_.protocol_settings_v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::ProtocolSettingsV2& ProtocolSettings::_internal_protocol_settings_v2() const {
  return _internal_has_protocol_settings_v2()
      ? *settings_.protocol_settings_v2_
      : reinterpret_cast< ::improbable::platform::runtime::ProtocolSettingsV2&>(::improbable::platform::runtime::_ProtocolSettingsV2_default_instance_);
}
inline const ::improbable::platform::runtime::ProtocolSettingsV2& ProtocolSettings::protocol_settings_v2() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ProtocolSettings.protocol_settings_v2)
  return _internal_protocol_settings_v2();
}
inline ::improbable::platform::runtime::ProtocolSettingsV2* ProtocolSettings::unsafe_arena_release_protocol_settings_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.ProtocolSettings.protocol_settings_v2)
  if (_internal_has_protocol_settings_v2()) {
    clear_has_settings();
    ::improbable::platform::runtime::ProtocolSettingsV2* temp = settings_.protocol_settings_v2_;
    settings_.protocol_settings_v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtocolSettings::unsafe_arena_set_allocated_protocol_settings_v2(::improbable::platform::runtime::ProtocolSettingsV2* protocol_settings_v2) {
  clear_settings();
  if (protocol_settings_v2) {
    set_has_protocol_settings_v2();
    settings_.protocol_settings_v2_ = protocol_settings_v2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ProtocolSettings.protocol_settings_v2)
}
inline ::improbable::platform::runtime::ProtocolSettingsV2* ProtocolSettings::_internal_mutable_protocol_settings_v2() {
  if (!_internal_has_protocol_settings_v2()) {
    clear_settings();
    set_has_protocol_settings_v2();
    settings_.protocol_settings_v2_ = CreateMaybeMessage< ::improbable::platform::runtime::ProtocolSettingsV2 >(GetArena());
  }
  return settings_.protocol_settings_v2_;
}
inline ::improbable::platform::runtime::ProtocolSettingsV2* ProtocolSettings::mutable_protocol_settings_v2() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ProtocolSettings.protocol_settings_v2)
  return _internal_mutable_protocol_settings_v2();
}

inline bool ProtocolSettings::has_settings() const {
  return settings_case() != SETTINGS_NOT_SET;
}
inline void ProtocolSettings::clear_has_settings() {
  _oneof_case_[0] = SETTINGS_NOT_SET;
}
inline ProtocolSettings::SettingsCase ProtocolSettings::settings_case() const {
  return ProtocolSettings::SettingsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LoginResponse

// .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1 [deprecated = true];
inline bool LoginResponse::_internal_has_bridge_details() const {
  return this != internal_default_instance() && bridge_details_ != nullptr;
}
inline bool LoginResponse::has_bridge_details() const {
  return _internal_has_bridge_details();
}
inline void LoginResponse::clear_bridge_details() {
  if (GetArena() == nullptr && bridge_details_ != nullptr) {
    delete bridge_details_;
  }
  bridge_details_ = nullptr;
}
inline const ::improbable::platform::runtime::BridgeConnectionDetails& LoginResponse::_internal_bridge_details() const {
  const ::improbable::platform::runtime::BridgeConnectionDetails* p = bridge_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::BridgeConnectionDetails&>(
      ::improbable::platform::runtime::_BridgeConnectionDetails_default_instance_);
}
inline const ::improbable::platform::runtime::BridgeConnectionDetails& LoginResponse::bridge_details() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoginResponse.bridge_details)
  return _internal_bridge_details();
}
inline void LoginResponse::unsafe_arena_set_allocated_bridge_details(
    ::improbable::platform::runtime::BridgeConnectionDetails* bridge_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bridge_details_);
  }
  bridge_details_ = bridge_details;
  if (bridge_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.LoginResponse.bridge_details)
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* LoginResponse::release_bridge_details() {
  
  ::improbable::platform::runtime::BridgeConnectionDetails* temp = bridge_details_;
  bridge_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* LoginResponse::unsafe_arena_release_bridge_details() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LoginResponse.bridge_details)
  
  ::improbable::platform::runtime::BridgeConnectionDetails* temp = bridge_details_;
  bridge_details_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* LoginResponse::_internal_mutable_bridge_details() {
  
  if (bridge_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::BridgeConnectionDetails>(GetArena());
    bridge_details_ = p;
  }
  return bridge_details_;
}
inline ::improbable::platform::runtime::BridgeConnectionDetails* LoginResponse::mutable_bridge_details() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LoginResponse.bridge_details)
  return _internal_mutable_bridge_details();
}
inline void LoginResponse::set_allocated_bridge_details(::improbable::platform::runtime::BridgeConnectionDetails* bridge_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bridge_details_;
  }
  if (bridge_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bridge_details);
    if (message_arena != submessage_arena) {
      bridge_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bridge_details, submessage_arena);
    }
    
  } else {
    
  }
  bridge_details_ = bridge_details;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LoginResponse.bridge_details)
}

// bytes protocol_settings = 2;
inline void LoginResponse::clear_protocol_settings() {
  protocol_settings_.ClearToEmpty();
}
inline const std::string& LoginResponse::protocol_settings() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoginResponse.protocol_settings)
  return _internal_protocol_settings();
}
inline void LoginResponse::set_protocol_settings(const std::string& value) {
  _internal_set_protocol_settings(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.LoginResponse.protocol_settings)
}
inline std::string* LoginResponse::mutable_protocol_settings() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.LoginResponse.protocol_settings)
  return _internal_mutable_protocol_settings();
}
inline const std::string& LoginResponse::_internal_protocol_settings() const {
  return protocol_settings_.Get();
}
inline void LoginResponse::_internal_set_protocol_settings(const std::string& value) {
  
  protocol_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginResponse::set_protocol_settings(std::string&& value) {
  
  protocol_settings_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.LoginResponse.protocol_settings)
}
inline void LoginResponse::set_protocol_settings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.LoginResponse.protocol_settings)
}
inline void LoginResponse::set_protocol_settings(const void* value,
    size_t size) {
  
  protocol_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.LoginResponse.protocol_settings)
}
inline std::string* LoginResponse::_internal_mutable_protocol_settings() {
  
  return protocol_settings_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginResponse::release_protocol_settings() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.LoginResponse.protocol_settings)
  return protocol_settings_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginResponse::set_allocated_protocol_settings(std::string* protocol_settings) {
  if (protocol_settings != nullptr) {
    
  } else {
    
  }
  protocol_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_settings,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LoginResponse.protocol_settings)
}

// -------------------------------------------------------------------

// RemainingCapacityRequest

// -------------------------------------------------------------------

// RemainingCapacityResponse

// int64 remaining_capacity = 1;
inline void RemainingCapacityResponse::clear_remaining_capacity() {
  remaining_capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemainingCapacityResponse::_internal_remaining_capacity() const {
  return remaining_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemainingCapacityResponse::remaining_capacity() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RemainingCapacityResponse.remaining_capacity)
  return _internal_remaining_capacity();
}
inline void RemainingCapacityResponse::_internal_set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remaining_capacity_ = value;
}
inline void RemainingCapacityResponse::set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remaining_capacity(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RemainingCapacityResponse.remaining_capacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace runtime
}  // namespace platform
}  // namespace improbable

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::improbable::platform::runtime::SecurityLayer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::platform::runtime::SecurityLayer>() {
  return ::improbable::platform::runtime::SecurityLayer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runtime_2freceptionist_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime/receptionist.proto

#include "runtime/receptionist.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BridgeSession_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatParameters_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KcpLinkSettings_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LinkSettings_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2freceptionist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TcpLinkSettings_runtime_2freceptionist_2eproto;
namespace improbable {
namespace platform {
namespace runtime {
class RakNetLinkSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RakNetLinkSettings> _instance;
} _RakNetLinkSettings_default_instance_;
class TcpLinkSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TcpLinkSettings> _instance;
} _TcpLinkSettings_default_instance_;
class ErasureCodecParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErasureCodecParameters> _instance;
} _ErasureCodecParameters_default_instance_;
class HeartbeatParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatParameters> _instance;
} _HeartbeatParameters_default_instance_;
class KcpLinkSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KcpLinkSettings> _instance;
} _KcpLinkSettings_default_instance_;
class LinkSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkSettings> _instance;
} _LinkSettings_default_instance_;
class ProtocolCapabilitiesV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolCapabilitiesV1> _instance;
} _ProtocolCapabilitiesV1_default_instance_;
class ProtocolCapabilitiesV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolCapabilitiesV2> _instance;
} _ProtocolCapabilitiesV2_default_instance_;
class ProtocolCapabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolCapabilities> _instance;
} _ProtocolCapabilities_default_instance_;
class ReceptionistLoginPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceptionistLoginPayload> _instance;
} _ReceptionistLoginPayload_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class BridgeSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BridgeSession> _instance;
} _BridgeSession_default_instance_;
class BridgeConnectionDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BridgeConnectionDetails> _instance;
} _BridgeConnectionDetails_default_instance_;
class ProtocolSettingsV1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolSettingsV1> _instance;
} _ProtocolSettingsV1_default_instance_;
class ProtocolSettingsV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolSettingsV2> _instance;
} _ProtocolSettingsV2_default_instance_;
class ProtocolSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolSettings> _instance;
} _ProtocolSettings_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class RemainingCapacityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemainingCapacityRequest> _instance;
} _RemainingCapacityRequest_default_instance_;
class RemainingCapacityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemainingCapacityResponse> _instance;
} _RemainingCapacityResponse_default_instance_;
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
static void InitDefaultsscc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_BridgeConnectionDetails_default_instance_;
    new (ptr) ::improbable::platform::runtime::BridgeConnectionDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto}, {
      &scc_info_BridgeSession_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_BridgeSession_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_BridgeSession_default_instance_;
    new (ptr) ::improbable::platform::runtime::BridgeSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BridgeSession_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BridgeSession_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ErasureCodecParameters_default_instance_;
    new (ptr) ::improbable::platform::runtime::ErasureCodecParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatParameters_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_HeartbeatParameters_default_instance_;
    new (ptr) ::improbable::platform::runtime::HeartbeatParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatParameters_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartbeatParameters_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_KcpLinkSettings_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_KcpLinkSettings_default_instance_;
    new (ptr) ::improbable::platform::runtime::KcpLinkSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KcpLinkSettings_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_KcpLinkSettings_runtime_2freceptionist_2eproto}, {
      &scc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto.base,
      &scc_info_HeartbeatParameters_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_LinkSettings_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_LinkSettings_default_instance_;
    new (ptr) ::improbable::platform::runtime::LinkSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LinkSettings_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LinkSettings_runtime_2freceptionist_2eproto}, {
      &scc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto.base,
      &scc_info_TcpLinkSettings_runtime_2freceptionist_2eproto.base,
      &scc_info_KcpLinkSettings_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_LoginRequest_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_LoginRequest_default_instance_;
    new (ptr) ::improbable::platform::runtime::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginRequest_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_LoginResponse_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_LoginResponse_default_instance_;
    new (ptr) ::improbable::platform::runtime::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginResponse_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginResponse_runtime_2freceptionist_2eproto}, {
      &scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolCapabilities_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ProtocolCapabilities_default_instance_;
    new (ptr) ::improbable::platform::runtime::ProtocolCapabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtocolCapabilities_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProtocolCapabilities_runtime_2freceptionist_2eproto}, {
      &scc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto.base,
      &scc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ProtocolCapabilitiesV1_default_instance_;
    new (ptr) ::improbable::platform::runtime::ProtocolCapabilitiesV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ProtocolCapabilitiesV2_default_instance_;
    new (ptr) ::improbable::platform::runtime::ProtocolCapabilitiesV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_ProtocolSettings_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ProtocolSettings_default_instance_;
    new (ptr) ::improbable::platform::runtime::ProtocolSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProtocolSettings_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProtocolSettings_runtime_2freceptionist_2eproto}, {
      &scc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto.base,
      &scc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ProtocolSettingsV1_default_instance_;
    new (ptr) ::improbable::platform::runtime::ProtocolSettingsV1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto}, {
      &scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ProtocolSettingsV2_default_instance_;
    new (ptr) ::improbable::platform::runtime::ProtocolSettingsV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto}, {
      &scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_RakNetLinkSettings_default_instance_;
    new (ptr) ::improbable::platform::runtime::RakNetLinkSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_ReceptionistLoginPayload_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ReceptionistLoginPayload_default_instance_;
    new (ptr) ::improbable::platform::runtime::ReceptionistLoginPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceptionistLoginPayload_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReceptionistLoginPayload_runtime_2freceptionist_2eproto}, {
      &scc_info_LinkSettings_runtime_2freceptionist_2eproto.base,}};

static void InitDefaultsscc_info_RemainingCapacityRequest_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_RemainingCapacityRequest_default_instance_;
    new (ptr) ::improbable::platform::runtime::RemainingCapacityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemainingCapacityRequest_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemainingCapacityRequest_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_RemainingCapacityResponse_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_RemainingCapacityResponse_default_instance_;
    new (ptr) ::improbable::platform::runtime::RemainingCapacityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemainingCapacityResponse_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemainingCapacityResponse_runtime_2freceptionist_2eproto}, {}};

static void InitDefaultsscc_info_TcpLinkSettings_runtime_2freceptionist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_TcpLinkSettings_default_instance_;
    new (ptr) ::improbable::platform::runtime::TcpLinkSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TcpLinkSettings_runtime_2freceptionist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TcpLinkSettings_runtime_2freceptionist_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_runtime_2freceptionist_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_runtime_2freceptionist_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_runtime_2freceptionist_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_runtime_2freceptionist_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::RakNetLinkSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::RakNetLinkSettings, heartbeat_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::RakNetLinkSettings, initial_connection_timeout_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::TcpLinkSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::TcpLinkSettings, multiplex_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ErasureCodecParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ErasureCodecParameters, original_packet_count_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ErasureCodecParameters, recovery_packet_count_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ErasureCodecParameters, window_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::HeartbeatParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::HeartbeatParameters, interval_ms_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::HeartbeatParameters, timeout_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, fast_retransmission_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, early_retransmission_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, non_concessional_flow_control_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, multiplex_level_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, update_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, min_rto_ms_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, window_size_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, erasure_codec_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, heartbeat_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, send_window_size_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, recv_window_size_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::KcpLinkSettings, security_layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LinkSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LinkSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LinkSettings, link_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolCapabilitiesV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolCapabilitiesV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolCapabilities, capabilities_v1_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolCapabilities, capabilities_v2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ReceptionistLoginPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ReceptionistLoginPayload, metadata_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ReceptionistLoginPayload, link_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginRequest, worker_type_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginRequest, worker_id_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginRequest, payload_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginRequest, protocol_capabilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeSession, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, external_host_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, internal_host_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, internal_port_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, external_port_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, session_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BridgeConnectionDetails, deployment_certificate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettingsV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettingsV1, bridge_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettingsV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettingsV2, bridge_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ProtocolSettings, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginResponse, bridge_details_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::LoginResponse, protocol_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::RemainingCapacityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::RemainingCapacityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::RemainingCapacityResponse, remaining_capacity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::improbable::platform::runtime::RakNetLinkSettings)},
  { 7, -1, sizeof(::improbable::platform::runtime::TcpLinkSettings)},
  { 13, -1, sizeof(::improbable::platform::runtime::ErasureCodecParameters)},
  { 21, -1, sizeof(::improbable::platform::runtime::HeartbeatParameters)},
  { 28, -1, sizeof(::improbable::platform::runtime::KcpLinkSettings)},
  { 45, -1, sizeof(::improbable::platform::runtime::LinkSettings)},
  { 54, -1, sizeof(::improbable::platform::runtime::ProtocolCapabilitiesV1)},
  { 59, -1, sizeof(::improbable::platform::runtime::ProtocolCapabilitiesV2)},
  { 64, -1, sizeof(::improbable::platform::runtime::ProtocolCapabilities)},
  { 71, -1, sizeof(::improbable::platform::runtime::ReceptionistLoginPayload)},
  { 78, -1, sizeof(::improbable::platform::runtime::LoginRequest)},
  { 87, -1, sizeof(::improbable::platform::runtime::BridgeSession)},
  { 93, -1, sizeof(::improbable::platform::runtime::BridgeConnectionDetails)},
  { 104, -1, sizeof(::improbable::platform::runtime::ProtocolSettingsV1)},
  { 110, -1, sizeof(::improbable::platform::runtime::ProtocolSettingsV2)},
  { 116, -1, sizeof(::improbable::platform::runtime::ProtocolSettings)},
  { 124, -1, sizeof(::improbable::platform::runtime::LoginResponse)},
  { 131, -1, sizeof(::improbable::platform::runtime::RemainingCapacityRequest)},
  { 136, -1, sizeof(::improbable::platform::runtime::RemainingCapacityResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_RakNetLinkSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_TcpLinkSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ErasureCodecParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_HeartbeatParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_KcpLinkSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_LinkSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ProtocolCapabilitiesV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ProtocolCapabilitiesV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ProtocolCapabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ReceptionistLoginPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_BridgeSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_BridgeConnectionDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ProtocolSettingsV1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ProtocolSettingsV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ProtocolSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_LoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_RemainingCapacityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_RemainingCapacityResponse_default_instance_),
};

const char descriptor_table_protodef_runtime_2freceptionist_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032runtime/receptionist.proto\022\033improbable"
  ".platform.runtime\"Y\n\022RakNetLinkSettings\022"
  "\034\n\024heartbeat_timeout_ms\030\001 \001(\004\022%\n\035initial"
  "_connection_timeout_ms\030\002 \001(\004\"*\n\017TcpLinkS"
  "ettings\022\027\n\017multiplex_level\030\001 \001(\005\"k\n\026Eras"
  "ureCodecParameters\022\035\n\025original_packet_co"
  "unt\030\001 \001(\r\022\035\n\025recovery_packet_count\030\002 \001(\r"
  "\022\023\n\013window_size\030\003 \001(\r\">\n\023HeartbeatParame"
  "ters\022\023\n\013interval_ms\030\001 \001(\004\022\022\n\ntimeout_ms\030"
  "\002 \001(\004\"\336\003\n\017KcpLinkSettings\022\033\n\023fast_retran"
  "smission\030\001 \001(\010\022\034\n\024early_retransmission\030\002"
  " \001(\010\022%\n\035non_concessional_flow_control\030\003 "
  "\001(\010\022\027\n\017multiplex_level\030\004 \001(\r\022\032\n\022update_i"
  "nterval_ms\030\005 \001(\r\022\022\n\nmin_rto_ms\030\006 \001(\r\022\027\n\013"
  "window_size\030\007 \001(\rB\002\030\001\022J\n\rerasure_codec\030\010"
  " \001(\01323.improbable.platform.runtime.Erasu"
  "reCodecParameters\022C\n\theartbeat\030\t \001(\01320.i"
  "mprobable.platform.runtime.HeartbeatPara"
  "meters\022\030\n\020send_window_size\030\n \001(\r\022\030\n\020recv"
  "_window_size\030\013 \001(\r\022B\n\016security_layer\030\014 \001"
  "(\0162*.improbable.platform.runtime.Securit"
  "yLayer\"\367\001\n\014LinkSettings\022J\n\017raknet_settin"
  "gs\030\001 \001(\0132/.improbable.platform.runtime.R"
  "akNetLinkSettingsH\000\022D\n\014tcp_settings\030\002 \001("
  "\0132,.improbable.platform.runtime.TcpLinkS"
  "ettingsH\000\022D\n\014kcp_settings\030\003 \001(\0132,.improb"
  "able.platform.runtime.KcpLinkSettingsH\000B"
  "\017\n\rlink_settings\"\030\n\026ProtocolCapabilities"
  "V1\"\030\n\026ProtocolCapabilitiesV2\"\262\001\n\024Protoco"
  "lCapabilities\022L\n\017capabilities_v1\030\001 \001(\01323"
  ".improbable.platform.runtime.ProtocolCap"
  "abilitiesV1\022L\n\017capabilities_v2\030\002 \001(\01323.i"
  "mprobable.platform.runtime.ProtocolCapab"
  "ilitiesV2\"r\n\030ReceptionistLoginPayload\022\020\n"
  "\010metadata\030\001 \001(\t\022@\n\rlink_settings\030\002 \001(\0132)"
  ".improbable.platform.runtime.LinkSetting"
  "s:\002\030\001\"j\n\014LoginRequest\022\023\n\013worker_type\030\001 \001"
  "(\t\022\021\n\tworker_id\030\002 \001(\t\022\023\n\007payload\030\003 \001(\014B\002"
  "\030\001\022\035\n\025protocol_capabilities\030\004 \001(\014\"\036\n\rBri"
  "dgeSession\022\r\n\005token\030\001 \001(\014\"\322\001\n\027BridgeConn"
  "ectionDetails\022\025\n\rexternal_host\030\001 \001(\t\022\025\n\r"
  "internal_host\030\002 \001(\t\022\025\n\rinternal_port\030\003 \001"
  "(\005\022\025\n\rexternal_port\030\006 \001(\005\022;\n\007session\030\004 \001"
  "(\0132*.improbable.platform.runtime.BridgeS"
  "ession\022\036\n\026deployment_certificate\030\005 \001(\014\"b"
  "\n\022ProtocolSettingsV1\022L\n\016bridge_details\030\001"
  " \001(\01324.improbable.platform.runtime.Bridg"
  "eConnectionDetails\"b\n\022ProtocolSettingsV2"
  "\022L\n\016bridge_details\030\001 \001(\01324.improbable.pl"
  "atform.runtime.BridgeConnectionDetails\"\300"
  "\001\n\020ProtocolSettings\022O\n\024protocol_settings"
  "_v1\030\001 \001(\0132/.improbable.platform.runtime."
  "ProtocolSettingsV1H\000\022O\n\024protocol_setting"
  "s_v2\030\002 \001(\0132/.improbable.platform.runtime"
  ".ProtocolSettingsV2H\000B\n\n\010settings\"|\n\rLog"
  "inResponse\022P\n\016bridge_details\030\001 \001(\01324.imp"
  "robable.platform.runtime.BridgeConnectio"
  "nDetailsB\002\030\001\022\031\n\021protocol_settings\030\002 \001(\014\""
  "\032\n\030RemainingCapacityRequest\"7\n\031Remaining"
  "CapacityResponse\022\032\n\022remaining_capacity\030\001"
  " \001(\003*\'\n\rSecurityLayer\022\010\n\004DTLS\020\000\022\014\n\010INSEC"
  "URE\020\0012\376\001\n\023ReceptionistService\022`\n\005Login\022)"
  ".improbable.platform.runtime.LoginReques"
  "t\032*.improbable.platform.runtime.LoginRes"
  "ponse\"\000\022\204\001\n\021RemainingCapacity\0225.improbab"
  "le.platform.runtime.RemainingCapacityReq"
  "uest\0326.improbable.platform.runtime.Remai"
  "ningCapacityResponse\"\000B\032B\030ReceptionistSe"
  "rviceProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_runtime_2freceptionist_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_runtime_2freceptionist_2eproto_sccs[19] = {
  &scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto.base,
  &scc_info_BridgeSession_runtime_2freceptionist_2eproto.base,
  &scc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto.base,
  &scc_info_HeartbeatParameters_runtime_2freceptionist_2eproto.base,
  &scc_info_KcpLinkSettings_runtime_2freceptionist_2eproto.base,
  &scc_info_LinkSettings_runtime_2freceptionist_2eproto.base,
  &scc_info_LoginRequest_runtime_2freceptionist_2eproto.base,
  &scc_info_LoginResponse_runtime_2freceptionist_2eproto.base,
  &scc_info_ProtocolCapabilities_runtime_2freceptionist_2eproto.base,
  &scc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto.base,
  &scc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto.base,
  &scc_info_ProtocolSettings_runtime_2freceptionist_2eproto.base,
  &scc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto.base,
  &scc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto.base,
  &scc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto.base,
  &scc_info_ReceptionistLoginPayload_runtime_2freceptionist_2eproto.base,
  &scc_info_RemainingCapacityRequest_runtime_2freceptionist_2eproto.base,
  &scc_info_RemainingCapacityResponse_runtime_2freceptionist_2eproto.base,
  &scc_info_TcpLinkSettings_runtime_2freceptionist_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_runtime_2freceptionist_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2freceptionist_2eproto = {
  false, false, descriptor_table_protodef_runtime_2freceptionist_2eproto, "runtime/receptionist.proto", 2738,
  &descriptor_table_runtime_2freceptionist_2eproto_once, descriptor_table_runtime_2freceptionist_2eproto_sccs, descriptor_table_runtime_2freceptionist_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_runtime_2freceptionist_2eproto::offsets,
  file_level_metadata_runtime_2freceptionist_2eproto, 19, file_level_enum_descriptors_runtime_2freceptionist_2eproto, file_level_service_descriptors_runtime_2freceptionist_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_runtime_2freceptionist_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_runtime_2freceptionist_2eproto)), true);
namespace improbable {
namespace platform {
namespace runtime {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityLayer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_runtime_2freceptionist_2eproto);
  return file_level_enum_descriptors_runtime_2freceptionist_2eproto[0];
}
bool SecurityLayer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RakNetLinkSettings::_Internal {
 public:
};

RakNetLinkSettings::RakNetLinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.RakNetLinkSettings)
}
RakNetLinkSettings::RakNetLinkSettings(const RakNetLinkSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heartbeat_timeout_ms_, &from.heartbeat_timeout_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_connection_timeout_ms_) -
    reinterpret_cast<char*>(&heartbeat_timeout_ms_)) + sizeof(initial_connection_timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.RakNetLinkSettings)
}

void RakNetLinkSettings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_timeout_ms_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&initial_connection_timeout_ms_) -
      reinterpret_cast<char*>(&heartbeat_timeout_ms_)) + sizeof(initial_connection_timeout_ms_));
}

RakNetLinkSettings::~RakNetLinkSettings() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.RakNetLinkSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RakNetLinkSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RakNetLinkSettings::ArenaDtor(void* object) {
  RakNetLinkSettings* _this = reinterpret_cast< RakNetLinkSettings* >(object);
  (void)_this;
}
void RakNetLinkSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RakNetLinkSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RakNetLinkSettings& RakNetLinkSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RakNetLinkSettings_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void RakNetLinkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.RakNetLinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heartbeat_timeout_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_connection_timeout_ms_) -
      reinterpret_cast<char*>(&heartbeat_timeout_ms_)) + sizeof(initial_connection_timeout_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RakNetLinkSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 heartbeat_timeout_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heartbeat_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 initial_connection_timeout_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          initial_connection_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RakNetLinkSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.RakNetLinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 heartbeat_timeout_ms = 1;
  if (this->heartbeat_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_heartbeat_timeout_ms(), target);
  }

  // uint64 initial_connection_timeout_ms = 2;
  if (this->initial_connection_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_initial_connection_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.RakNetLinkSettings)
  return target;
}

size_t RakNetLinkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.RakNetLinkSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 heartbeat_timeout_ms = 1;
  if (this->heartbeat_timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_heartbeat_timeout_ms());
  }

  // uint64 initial_connection_timeout_ms = 2;
  if (this->initial_connection_timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_initial_connection_timeout_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RakNetLinkSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.RakNetLinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RakNetLinkSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RakNetLinkSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.RakNetLinkSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.RakNetLinkSettings)
    MergeFrom(*source);
  }
}

void RakNetLinkSettings::MergeFrom(const RakNetLinkSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.RakNetLinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heartbeat_timeout_ms() != 0) {
    _internal_set_heartbeat_timeout_ms(from._internal_heartbeat_timeout_ms());
  }
  if (from.initial_connection_timeout_ms() != 0) {
    _internal_set_initial_connection_timeout_ms(from._internal_initial_connection_timeout_ms());
  }
}

void RakNetLinkSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.RakNetLinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RakNetLinkSettings::CopyFrom(const RakNetLinkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.RakNetLinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RakNetLinkSettings::IsInitialized() const {
  return true;
}

void RakNetLinkSettings::InternalSwap(RakNetLinkSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RakNetLinkSettings, initial_connection_timeout_ms_)
      + sizeof(RakNetLinkSettings::initial_connection_timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(RakNetLinkSettings, heartbeat_timeout_ms_)>(
          reinterpret_cast<char*>(&heartbeat_timeout_ms_),
          reinterpret_cast<char*>(&other->heartbeat_timeout_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RakNetLinkSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TcpLinkSettings::_Internal {
 public:
};

TcpLinkSettings::TcpLinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.TcpLinkSettings)
}
TcpLinkSettings::TcpLinkSettings(const TcpLinkSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multiplex_level_ = from.multiplex_level_;
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.TcpLinkSettings)
}

void TcpLinkSettings::SharedCtor() {
  multiplex_level_ = 0;
}

TcpLinkSettings::~TcpLinkSettings() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.TcpLinkSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TcpLinkSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TcpLinkSettings::ArenaDtor(void* object) {
  TcpLinkSettings* _this = reinterpret_cast< TcpLinkSettings* >(object);
  (void)_this;
}
void TcpLinkSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TcpLinkSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TcpLinkSettings& TcpLinkSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TcpLinkSettings_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void TcpLinkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.TcpLinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiplex_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TcpLinkSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 multiplex_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          multiplex_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TcpLinkSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.TcpLinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 multiplex_level = 1;
  if (this->multiplex_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_multiplex_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.TcpLinkSettings)
  return target;
}

size_t TcpLinkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.TcpLinkSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 multiplex_level = 1;
  if (this->multiplex_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_multiplex_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TcpLinkSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.TcpLinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TcpLinkSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TcpLinkSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.TcpLinkSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.TcpLinkSettings)
    MergeFrom(*source);
  }
}

void TcpLinkSettings::MergeFrom(const TcpLinkSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.TcpLinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.multiplex_level() != 0) {
    _internal_set_multiplex_level(from._internal_multiplex_level());
  }
}

void TcpLinkSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.TcpLinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpLinkSettings::CopyFrom(const TcpLinkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.TcpLinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpLinkSettings::IsInitialized() const {
  return true;
}

void TcpLinkSettings::InternalSwap(TcpLinkSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(multiplex_level_, other->multiplex_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TcpLinkSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErasureCodecParameters::_Internal {
 public:
};

ErasureCodecParameters::ErasureCodecParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ErasureCodecParameters)
}
ErasureCodecParameters::ErasureCodecParameters(const ErasureCodecParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&original_packet_count_, &from.original_packet_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_size_) -
    reinterpret_cast<char*>(&original_packet_count_)) + sizeof(window_size_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ErasureCodecParameters)
}

void ErasureCodecParameters::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&original_packet_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&window_size_) -
      reinterpret_cast<char*>(&original_packet_count_)) + sizeof(window_size_));
}

ErasureCodecParameters::~ErasureCodecParameters() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ErasureCodecParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErasureCodecParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ErasureCodecParameters::ArenaDtor(void* object) {
  ErasureCodecParameters* _this = reinterpret_cast< ErasureCodecParameters* >(object);
  (void)_this;
}
void ErasureCodecParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErasureCodecParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErasureCodecParameters& ErasureCodecParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErasureCodecParameters_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ErasureCodecParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ErasureCodecParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&original_packet_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_size_) -
      reinterpret_cast<char*>(&original_packet_count_)) + sizeof(window_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErasureCodecParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 original_packet_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          original_packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 recovery_packet_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recovery_packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 window_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErasureCodecParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ErasureCodecParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 original_packet_count = 1;
  if (this->original_packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_original_packet_count(), target);
  }

  // uint32 recovery_packet_count = 2;
  if (this->recovery_packet_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recovery_packet_count(), target);
  }

  // uint32 window_size = 3;
  if (this->window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_window_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ErasureCodecParameters)
  return target;
}

size_t ErasureCodecParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ErasureCodecParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 original_packet_count = 1;
  if (this->original_packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_original_packet_count());
  }

  // uint32 recovery_packet_count = 2;
  if (this->recovery_packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recovery_packet_count());
  }

  // uint32 window_size = 3;
  if (this->window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_window_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErasureCodecParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ErasureCodecParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ErasureCodecParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErasureCodecParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ErasureCodecParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ErasureCodecParameters)
    MergeFrom(*source);
  }
}

void ErasureCodecParameters::MergeFrom(const ErasureCodecParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ErasureCodecParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.original_packet_count() != 0) {
    _internal_set_original_packet_count(from._internal_original_packet_count());
  }
  if (from.recovery_packet_count() != 0) {
    _internal_set_recovery_packet_count(from._internal_recovery_packet_count());
  }
  if (from.window_size() != 0) {
    _internal_set_window_size(from._internal_window_size());
  }
}

void ErasureCodecParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ErasureCodecParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErasureCodecParameters::CopyFrom(const ErasureCodecParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ErasureCodecParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErasureCodecParameters::IsInitialized() const {
  return true;
}

void ErasureCodecParameters::InternalSwap(ErasureCodecParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErasureCodecParameters, window_size_)
      + sizeof(ErasureCodecParameters::window_size_)
      - PROTOBUF_FIELD_OFFSET(ErasureCodecParameters, original_packet_count_)>(
          reinterpret_cast<char*>(&original_packet_count_),
          reinterpret_cast<char*>(&other->original_packet_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErasureCodecParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeartbeatParameters::_Internal {
 public:
};

HeartbeatParameters::HeartbeatParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.HeartbeatParameters)
}
HeartbeatParameters::HeartbeatParameters(const HeartbeatParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interval_ms_, &from.interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&interval_ms_)) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.HeartbeatParameters)
}

void HeartbeatParameters::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&interval_ms_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&interval_ms_)) + sizeof(timeout_ms_));
}

HeartbeatParameters::~HeartbeatParameters() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.HeartbeatParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartbeatParameters::ArenaDtor(void* object) {
  HeartbeatParameters* _this = reinterpret_cast< HeartbeatParameters* >(object);
  (void)_this;
}
void HeartbeatParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatParameters& HeartbeatParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatParameters_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.HeartbeatParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&interval_ms_)) + sizeof(timeout_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 interval_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.HeartbeatParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 interval_ms = 1;
  if (this->interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_interval_ms(), target);
  }

  // uint64 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.HeartbeatParameters)
  return target;
}

size_t HeartbeatParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.HeartbeatParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 interval_ms = 1;
  if (this->interval_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_interval_ms());
  }

  // uint64 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeout_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.HeartbeatParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.HeartbeatParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.HeartbeatParameters)
    MergeFrom(*source);
  }
}

void HeartbeatParameters::MergeFrom(const HeartbeatParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.HeartbeatParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval_ms() != 0) {
    _internal_set_interval_ms(from._internal_interval_ms());
  }
  if (from.timeout_ms() != 0) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
}

void HeartbeatParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.HeartbeatParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatParameters::CopyFrom(const HeartbeatParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.HeartbeatParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatParameters::IsInitialized() const {
  return true;
}

void HeartbeatParameters::InternalSwap(HeartbeatParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatParameters, timeout_ms_)
      + sizeof(HeartbeatParameters::timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatParameters, interval_ms_)>(
          reinterpret_cast<char*>(&interval_ms_),
          reinterpret_cast<char*>(&other->interval_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KcpLinkSettings::_Internal {
 public:
  static const ::improbable::platform::runtime::ErasureCodecParameters& erasure_codec(const KcpLinkSettings* msg);
  static const ::improbable::platform::runtime::HeartbeatParameters& heartbeat(const KcpLinkSettings* msg);
};

const ::improbable::platform::runtime::ErasureCodecParameters&
KcpLinkSettings::_Internal::erasure_codec(const KcpLinkSettings* msg) {
  return *msg->erasure_codec_;
}
const ::improbable::platform::runtime::HeartbeatParameters&
KcpLinkSettings::_Internal::heartbeat(const KcpLinkSettings* msg) {
  return *msg->heartbeat_;
}
KcpLinkSettings::KcpLinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.KcpLinkSettings)
}
KcpLinkSettings::KcpLinkSettings(const KcpLinkSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_erasure_codec()) {
    erasure_codec_ = new ::improbable::platform::runtime::ErasureCodecParameters(*from.erasure_codec_);
  } else {
    erasure_codec_ = nullptr;
  }
  if (from._internal_has_heartbeat()) {
    heartbeat_ = new ::improbable::platform::runtime::HeartbeatParameters(*from.heartbeat_);
  } else {
    heartbeat_ = nullptr;
  }
  ::memcpy(&fast_retransmission_, &from.fast_retransmission_,
    static_cast<size_t>(reinterpret_cast<char*>(&security_layer_) -
    reinterpret_cast<char*>(&fast_retransmission_)) + sizeof(security_layer_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.KcpLinkSettings)
}

void KcpLinkSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KcpLinkSettings_runtime_2freceptionist_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&erasure_codec_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&security_layer_) -
      reinterpret_cast<char*>(&erasure_codec_)) + sizeof(security_layer_));
}

KcpLinkSettings::~KcpLinkSettings() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.KcpLinkSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KcpLinkSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete erasure_codec_;
  if (this != internal_default_instance()) delete heartbeat_;
}

void KcpLinkSettings::ArenaDtor(void* object) {
  KcpLinkSettings* _this = reinterpret_cast< KcpLinkSettings* >(object);
  (void)_this;
}
void KcpLinkSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KcpLinkSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KcpLinkSettings& KcpLinkSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KcpLinkSettings_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void KcpLinkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.KcpLinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && erasure_codec_ != nullptr) {
    delete erasure_codec_;
  }
  erasure_codec_ = nullptr;
  if (GetArena() == nullptr && heartbeat_ != nullptr) {
    delete heartbeat_;
  }
  heartbeat_ = nullptr;
  ::memset(&fast_retransmission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_layer_) -
      reinterpret_cast<char*>(&fast_retransmission_)) + sizeof(security_layer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KcpLinkSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool fast_retransmission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fast_retransmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool early_retransmission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          early_retransmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool non_concessional_flow_control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          non_concessional_flow_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 multiplex_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          multiplex_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 update_interval_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          update_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_rto_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          min_rto_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 window_size = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.ErasureCodecParameters erasure_codec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_erasure_codec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.HeartbeatParameters heartbeat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_window_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          send_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 recv_window_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          recv_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.SecurityLayer security_layer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_security_layer(static_cast<::improbable::platform::runtime::SecurityLayer>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KcpLinkSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.KcpLinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool fast_retransmission = 1;
  if (this->fast_retransmission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_fast_retransmission(), target);
  }

  // bool early_retransmission = 2;
  if (this->early_retransmission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_early_retransmission(), target);
  }

  // bool non_concessional_flow_control = 3;
  if (this->non_concessional_flow_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_non_concessional_flow_control(), target);
  }

  // uint32 multiplex_level = 4;
  if (this->multiplex_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_multiplex_level(), target);
  }

  // uint32 update_interval_ms = 5;
  if (this->update_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_update_interval_ms(), target);
  }

  // uint32 min_rto_ms = 6;
  if (this->min_rto_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_rto_ms(), target);
  }

  // uint32 window_size = 7 [deprecated = true];
  if (this->window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_window_size(), target);
  }

  // .improbable.platform.runtime.ErasureCodecParameters erasure_codec = 8;
  if (this->has_erasure_codec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::erasure_codec(this), target, stream);
  }

  // .improbable.platform.runtime.HeartbeatParameters heartbeat = 9;
  if (this->has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::heartbeat(this), target, stream);
  }

  // uint32 send_window_size = 10;
  if (this->send_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_send_window_size(), target);
  }

  // uint32 recv_window_size = 11;
  if (this->recv_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_recv_window_size(), target);
  }

  // .improbable.platform.runtime.SecurityLayer security_layer = 12;
  if (this->security_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_security_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.KcpLinkSettings)
  return target;
}

size_t KcpLinkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.KcpLinkSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.ErasureCodecParameters erasure_codec = 8;
  if (this->has_erasure_codec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *erasure_codec_);
  }

  // .improbable.platform.runtime.HeartbeatParameters heartbeat = 9;
  if (this->has_heartbeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_);
  }

  // bool fast_retransmission = 1;
  if (this->fast_retransmission() != 0) {
    total_size += 1 + 1;
  }

  // bool early_retransmission = 2;
  if (this->early_retransmission() != 0) {
    total_size += 1 + 1;
  }

  // bool non_concessional_flow_control = 3;
  if (this->non_concessional_flow_control() != 0) {
    total_size += 1 + 1;
  }

  // uint32 multiplex_level = 4;
  if (this->multiplex_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_multiplex_level());
  }

  // uint32 update_interval_ms = 5;
  if (this->update_interval_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_interval_ms());
  }

  // uint32 min_rto_ms = 6;
  if (this->min_rto_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_rto_ms());
  }

  // uint32 window_size = 7 [deprecated = true];
  if (this->window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_window_size());
  }

  // uint32 send_window_size = 10;
  if (this->send_window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_window_size());
  }

  // uint32 recv_window_size = 11;
  if (this->recv_window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recv_window_size());
  }

  // .improbable.platform.runtime.SecurityLayer security_layer = 12;
  if (this->security_layer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_security_layer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KcpLinkSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.KcpLinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const KcpLinkSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KcpLinkSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.KcpLinkSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.KcpLinkSettings)
    MergeFrom(*source);
  }
}

void KcpLinkSettings::MergeFrom(const KcpLinkSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.KcpLinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_erasure_codec()) {
    _internal_mutable_erasure_codec()->::improbable::platform::runtime::ErasureCodecParameters::MergeFrom(from._internal_erasure_codec());
  }
  if (from.has_heartbeat()) {
    _internal_mutable_heartbeat()->::improbable::platform::runtime::HeartbeatParameters::MergeFrom(from._internal_heartbeat());
  }
  if (from.fast_retransmission() != 0) {
    _internal_set_fast_retransmission(from._internal_fast_retransmission());
  }
  if (from.early_retransmission() != 0) {
    _internal_set_early_retransmission(from._internal_early_retransmission());
  }
  if (from.non_concessional_flow_control() != 0) {
    _internal_set_non_concessional_flow_control(from._internal_non_concessional_flow_control());
  }
  if (from.multiplex_level() != 0) {
    _internal_set_multiplex_level(from._internal_multiplex_level());
  }
  if (from.update_interval_ms() != 0) {
    _internal_set_update_interval_ms(from._internal_update_interval_ms());
  }
  if (from.min_rto_ms() != 0) {
    _internal_set_min_rto_ms(from._internal_min_rto_ms());
  }
  if (from.window_size() != 0) {
    _internal_set_window_size(from._internal_window_size());
  }
  if (from.send_window_size() != 0) {
    _internal_set_send_window_size(from._internal_send_window_size());
  }
  if (from.recv_window_size() != 0) {
    _internal_set_recv_window_size(from._internal_recv_window_size());
  }
  if (from.security_layer() != 0) {
    _internal_set_security_layer(from._internal_security_layer());
  }
}

void KcpLinkSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.KcpLinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KcpLinkSettings::CopyFrom(const KcpLinkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.KcpLinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KcpLinkSettings::IsInitialized() const {
  return true;
}

void KcpLinkSettings::InternalSwap(KcpLinkSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KcpLinkSettings, security_layer_)
      + sizeof(KcpLinkSettings::security_layer_)
      - PROTOBUF_FIELD_OFFSET(KcpLinkSettings, erasure_codec_)>(
          reinterpret_cast<char*>(&erasure_codec_),
          reinterpret_cast<char*>(&other->erasure_codec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KcpLinkSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LinkSettings::_Internal {
 public:
  static const ::improbable::platform::runtime::RakNetLinkSettings& raknet_settings(const LinkSettings* msg);
  static const ::improbable::platform::runtime::TcpLinkSettings& tcp_settings(const LinkSettings* msg);
  static const ::improbable::platform::runtime::KcpLinkSettings& kcp_settings(const LinkSettings* msg);
};

const ::improbable::platform::runtime::RakNetLinkSettings&
LinkSettings::_Internal::raknet_settings(const LinkSettings* msg) {
  return *msg->link_settings_.raknet_settings_;
}
const ::improbable::platform::runtime::TcpLinkSettings&
LinkSettings::_Internal::tcp_settings(const LinkSettings* msg) {
  return *msg->link_settings_.tcp_settings_;
}
const ::improbable::platform::runtime::KcpLinkSettings&
LinkSettings::_Internal::kcp_settings(const LinkSettings* msg) {
  return *msg->link_settings_.kcp_settings_;
}
void LinkSettings::set_allocated_raknet_settings(::improbable::platform::runtime::RakNetLinkSettings* raknet_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_link_settings();
  if (raknet_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(raknet_settings);
    if (message_arena != submessage_arena) {
      raknet_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raknet_settings, submessage_arena);
    }
    set_has_raknet_settings();
    link_settings_.raknet_settings_ = raknet_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LinkSettings.raknet_settings)
}
void LinkSettings::set_allocated_tcp_settings(::improbable::platform::runtime::TcpLinkSettings* tcp_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_link_settings();
  if (tcp_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tcp_settings);
    if (message_arena != submessage_arena) {
      tcp_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_settings, submessage_arena);
    }
    set_has_tcp_settings();
    link_settings_.tcp_settings_ = tcp_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LinkSettings.tcp_settings)
}
void LinkSettings::set_allocated_kcp_settings(::improbable::platform::runtime::KcpLinkSettings* kcp_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_link_settings();
  if (kcp_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kcp_settings);
    if (message_arena != submessage_arena) {
      kcp_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kcp_settings, submessage_arena);
    }
    set_has_kcp_settings();
    link_settings_.kcp_settings_ = kcp_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.LinkSettings.kcp_settings)
}
LinkSettings::LinkSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.LinkSettings)
}
LinkSettings::LinkSettings(const LinkSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_link_settings();
  switch (from.link_settings_case()) {
    case kRaknetSettings: {
      _internal_mutable_raknet_settings()->::improbable::platform::runtime::RakNetLinkSettings::MergeFrom(from._internal_raknet_settings());
      break;
    }
    case kTcpSettings: {
      _internal_mutable_tcp_settings()->::improbable::platform::runtime::TcpLinkSettings::MergeFrom(from._internal_tcp_settings());
      break;
    }
    case kKcpSettings: {
      _internal_mutable_kcp_settings()->::improbable::platform::runtime::KcpLinkSettings::MergeFrom(from._internal_kcp_settings());
      break;
    }
    case LINK_SETTINGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.LinkSettings)
}

void LinkSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkSettings_runtime_2freceptionist_2eproto.base);
  clear_has_link_settings();
}

LinkSettings::~LinkSettings() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.LinkSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_link_settings()) {
    clear_link_settings();
  }
}

void LinkSettings::ArenaDtor(void* object) {
  LinkSettings* _this = reinterpret_cast< LinkSettings* >(object);
  (void)_this;
}
void LinkSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkSettings& LinkSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkSettings_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void LinkSettings::clear_link_settings() {
// @@protoc_insertion_point(one_of_clear_start:improbable.platform.runtime.LinkSettings)
  switch (link_settings_case()) {
    case kRaknetSettings: {
      if (GetArena() == nullptr) {
        delete link_settings_.raknet_settings_;
      }
      break;
    }
    case kTcpSettings: {
      if (GetArena() == nullptr) {
        delete link_settings_.tcp_settings_;
      }
      break;
    }
    case kKcpSettings: {
      if (GetArena() == nullptr) {
        delete link_settings_.kcp_settings_;
      }
      break;
    }
    case LINK_SETTINGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LINK_SETTINGS_NOT_SET;
}


void LinkSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.LinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_link_settings();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.RakNetLinkSettings raknet_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_raknet_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.TcpLinkSettings tcp_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.KcpLinkSettings kcp_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kcp_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.LinkSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.RakNetLinkSettings raknet_settings = 1;
  if (_internal_has_raknet_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::raknet_settings(this), target, stream);
  }

  // .improbable.platform.runtime.TcpLinkSettings tcp_settings = 2;
  if (_internal_has_tcp_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tcp_settings(this), target, stream);
  }

  // .improbable.platform.runtime.KcpLinkSettings kcp_settings = 3;
  if (_internal_has_kcp_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kcp_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.LinkSettings)
  return target;
}

size_t LinkSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.LinkSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (link_settings_case()) {
    // .improbable.platform.runtime.RakNetLinkSettings raknet_settings = 1;
    case kRaknetSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *link_settings_.raknet_settings_);
      break;
    }
    // .improbable.platform.runtime.TcpLinkSettings tcp_settings = 2;
    case kTcpSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *link_settings_.tcp_settings_);
      break;
    }
    // .improbable.platform.runtime.KcpLinkSettings kcp_settings = 3;
    case kKcpSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *link_settings_.kcp_settings_);
      break;
    }
    case LINK_SETTINGS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.LinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.LinkSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.LinkSettings)
    MergeFrom(*source);
  }
}

void LinkSettings::MergeFrom(const LinkSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.LinkSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.link_settings_case()) {
    case kRaknetSettings: {
      _internal_mutable_raknet_settings()->::improbable::platform::runtime::RakNetLinkSettings::MergeFrom(from._internal_raknet_settings());
      break;
    }
    case kTcpSettings: {
      _internal_mutable_tcp_settings()->::improbable::platform::runtime::TcpLinkSettings::MergeFrom(from._internal_tcp_settings());
      break;
    }
    case kKcpSettings: {
      _internal_mutable_kcp_settings()->::improbable::platform::runtime::KcpLinkSettings::MergeFrom(from._internal_kcp_settings());
      break;
    }
    case LINK_SETTINGS_NOT_SET: {
      break;
    }
  }
}

void LinkSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.LinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkSettings::CopyFrom(const LinkSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.LinkSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkSettings::IsInitialized() const {
  return true;
}

void LinkSettings::InternalSwap(LinkSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(link_settings_, other->link_settings_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolCapabilitiesV1::_Internal {
 public:
};

ProtocolCapabilitiesV1::ProtocolCapabilitiesV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ProtocolCapabilitiesV1)
}
ProtocolCapabilitiesV1::ProtocolCapabilitiesV1(const ProtocolCapabilitiesV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ProtocolCapabilitiesV1)
}

void ProtocolCapabilitiesV1::SharedCtor() {
}

ProtocolCapabilitiesV1::~ProtocolCapabilitiesV1() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ProtocolCapabilitiesV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolCapabilitiesV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtocolCapabilitiesV1::ArenaDtor(void* object) {
  ProtocolCapabilitiesV1* _this = reinterpret_cast< ProtocolCapabilitiesV1* >(object);
  (void)_this;
}
void ProtocolCapabilitiesV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolCapabilitiesV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolCapabilitiesV1& ProtocolCapabilitiesV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolCapabilitiesV1_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ProtocolCapabilitiesV1::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolCapabilitiesV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolCapabilitiesV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ProtocolCapabilitiesV1)
  return target;
}

size_t ProtocolCapabilitiesV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolCapabilitiesV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolCapabilitiesV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolCapabilitiesV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ProtocolCapabilitiesV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ProtocolCapabilitiesV1)
    MergeFrom(*source);
  }
}

void ProtocolCapabilitiesV1::MergeFrom(const ProtocolCapabilitiesV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProtocolCapabilitiesV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolCapabilitiesV1::CopyFrom(const ProtocolCapabilitiesV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ProtocolCapabilitiesV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolCapabilitiesV1::IsInitialized() const {
  return true;
}

void ProtocolCapabilitiesV1::InternalSwap(ProtocolCapabilitiesV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolCapabilitiesV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolCapabilitiesV2::_Internal {
 public:
};

ProtocolCapabilitiesV2::ProtocolCapabilitiesV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ProtocolCapabilitiesV2)
}
ProtocolCapabilitiesV2::ProtocolCapabilitiesV2(const ProtocolCapabilitiesV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ProtocolCapabilitiesV2)
}

void ProtocolCapabilitiesV2::SharedCtor() {
}

ProtocolCapabilitiesV2::~ProtocolCapabilitiesV2() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ProtocolCapabilitiesV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolCapabilitiesV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProtocolCapabilitiesV2::ArenaDtor(void* object) {
  ProtocolCapabilitiesV2* _this = reinterpret_cast< ProtocolCapabilitiesV2* >(object);
  (void)_this;
}
void ProtocolCapabilitiesV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolCapabilitiesV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolCapabilitiesV2& ProtocolCapabilitiesV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolCapabilitiesV2_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ProtocolCapabilitiesV2::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolCapabilitiesV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolCapabilitiesV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ProtocolCapabilitiesV2)
  return target;
}

size_t ProtocolCapabilitiesV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolCapabilitiesV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolCapabilitiesV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolCapabilitiesV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ProtocolCapabilitiesV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ProtocolCapabilitiesV2)
    MergeFrom(*source);
  }
}

void ProtocolCapabilitiesV2::MergeFrom(const ProtocolCapabilitiesV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProtocolCapabilitiesV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolCapabilitiesV2::CopyFrom(const ProtocolCapabilitiesV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ProtocolCapabilitiesV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolCapabilitiesV2::IsInitialized() const {
  return true;
}

void ProtocolCapabilitiesV2::InternalSwap(ProtocolCapabilitiesV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolCapabilitiesV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolCapabilities::_Internal {
 public:
  static const ::improbable::platform::runtime::ProtocolCapabilitiesV1& capabilities_v1(const ProtocolCapabilities* msg);
  static const ::improbable::platform::runtime::ProtocolCapabilitiesV2& capabilities_v2(const ProtocolCapabilities* msg);
};

const ::improbable::platform::runtime::ProtocolCapabilitiesV1&
ProtocolCapabilities::_Internal::capabilities_v1(const ProtocolCapabilities* msg) {
  return *msg->capabilities_v1_;
}
const ::improbable::platform::runtime::ProtocolCapabilitiesV2&
ProtocolCapabilities::_Internal::capabilities_v2(const ProtocolCapabilities* msg) {
  return *msg->capabilities_v2_;
}
ProtocolCapabilities::ProtocolCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ProtocolCapabilities)
}
ProtocolCapabilities::ProtocolCapabilities(const ProtocolCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_capabilities_v1()) {
    capabilities_v1_ = new ::improbable::platform::runtime::ProtocolCapabilitiesV1(*from.capabilities_v1_);
  } else {
    capabilities_v1_ = nullptr;
  }
  if (from._internal_has_capabilities_v2()) {
    capabilities_v2_ = new ::improbable::platform::runtime::ProtocolCapabilitiesV2(*from.capabilities_v2_);
  } else {
    capabilities_v2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ProtocolCapabilities)
}

void ProtocolCapabilities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolCapabilities_runtime_2freceptionist_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&capabilities_v1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&capabilities_v2_) -
      reinterpret_cast<char*>(&capabilities_v1_)) + sizeof(capabilities_v2_));
}

ProtocolCapabilities::~ProtocolCapabilities() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ProtocolCapabilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete capabilities_v1_;
  if (this != internal_default_instance()) delete capabilities_v2_;
}

void ProtocolCapabilities::ArenaDtor(void* object) {
  ProtocolCapabilities* _this = reinterpret_cast< ProtocolCapabilities* >(object);
  (void)_this;
}
void ProtocolCapabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolCapabilities& ProtocolCapabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolCapabilities_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ProtocolCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ProtocolCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && capabilities_v1_ != nullptr) {
    delete capabilities_v1_;
  }
  capabilities_v1_ = nullptr;
  if (GetArena() == nullptr && capabilities_v2_ != nullptr) {
    delete capabilities_v2_;
  }
  capabilities_v2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolCapabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.ProtocolCapabilitiesV1 capabilities_v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities_v1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.ProtocolCapabilitiesV2 capabilities_v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolCapabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ProtocolCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.ProtocolCapabilitiesV1 capabilities_v1 = 1;
  if (this->has_capabilities_v1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::capabilities_v1(this), target, stream);
  }

  // .improbable.platform.runtime.ProtocolCapabilitiesV2 capabilities_v2 = 2;
  if (this->has_capabilities_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::capabilities_v2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ProtocolCapabilities)
  return target;
}

size_t ProtocolCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ProtocolCapabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.ProtocolCapabilitiesV1 capabilities_v1 = 1;
  if (this->has_capabilities_v1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_v1_);
  }

  // .improbable.platform.runtime.ProtocolCapabilitiesV2 capabilities_v2 = 2;
  if (this->has_capabilities_v2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capabilities_v2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolCapabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ProtocolCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolCapabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolCapabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ProtocolCapabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ProtocolCapabilities)
    MergeFrom(*source);
  }
}

void ProtocolCapabilities::MergeFrom(const ProtocolCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ProtocolCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capabilities_v1()) {
    _internal_mutable_capabilities_v1()->::improbable::platform::runtime::ProtocolCapabilitiesV1::MergeFrom(from._internal_capabilities_v1());
  }
  if (from.has_capabilities_v2()) {
    _internal_mutable_capabilities_v2()->::improbable::platform::runtime::ProtocolCapabilitiesV2::MergeFrom(from._internal_capabilities_v2());
  }
}

void ProtocolCapabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ProtocolCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolCapabilities::CopyFrom(const ProtocolCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ProtocolCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolCapabilities::IsInitialized() const {
  return true;
}

void ProtocolCapabilities::InternalSwap(ProtocolCapabilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolCapabilities, capabilities_v2_)
      + sizeof(ProtocolCapabilities::capabilities_v2_)
      - PROTOBUF_FIELD_OFFSET(ProtocolCapabilities, capabilities_v1_)>(
          reinterpret_cast<char*>(&capabilities_v1_),
          reinterpret_cast<char*>(&other->capabilities_v1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolCapabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReceptionistLoginPayload::_Internal {
 public:
  static const ::improbable::platform::runtime::LinkSettings& link_settings(const ReceptionistLoginPayload* msg);
};

const ::improbable::platform::runtime::LinkSettings&
ReceptionistLoginPayload::_Internal::link_settings(const ReceptionistLoginPayload* msg) {
  return *msg->link_settings_;
}
ReceptionistLoginPayload::ReceptionistLoginPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ReceptionistLoginPayload)
}
ReceptionistLoginPayload::ReceptionistLoginPayload(const ReceptionistLoginPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  if (from._internal_has_link_settings()) {
    link_settings_ = new ::improbable::platform::runtime::LinkSettings(*from.link_settings_);
  } else {
    link_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ReceptionistLoginPayload)
}

void ReceptionistLoginPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceptionistLoginPayload_runtime_2freceptionist_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_settings_ = nullptr;
}

ReceptionistLoginPayload::~ReceptionistLoginPayload() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ReceptionistLoginPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReceptionistLoginPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete link_settings_;
}

void ReceptionistLoginPayload::ArenaDtor(void* object) {
  ReceptionistLoginPayload* _this = reinterpret_cast< ReceptionistLoginPayload* >(object);
  (void)_this;
}
void ReceptionistLoginPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceptionistLoginPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceptionistLoginPayload& ReceptionistLoginPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceptionistLoginPayload_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ReceptionistLoginPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ReceptionistLoginPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.ClearToEmpty();
  if (GetArena() == nullptr && link_settings_ != nullptr) {
    delete link_settings_;
  }
  link_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceptionistLoginPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.platform.runtime.ReceptionistLoginPayload.metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.LinkSettings link_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceptionistLoginPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ReceptionistLoginPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metadata = 1;
  if (this->metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.platform.runtime.ReceptionistLoginPayload.metadata");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_metadata(), target);
  }

  // .improbable.platform.runtime.LinkSettings link_settings = 2;
  if (this->has_link_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ReceptionistLoginPayload)
  return target;
}

size_t ReceptionistLoginPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ReceptionistLoginPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metadata = 1;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata());
  }

  // .improbable.platform.runtime.LinkSettings link_settings = 2;
  if (this->has_link_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceptionistLoginPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ReceptionistLoginPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceptionistLoginPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceptionistLoginPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ReceptionistLoginPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ReceptionistLoginPayload)
    MergeFrom(*source);
  }
}

void ReceptionistLoginPayload::MergeFrom(const ReceptionistLoginPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ReceptionistLoginPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
  if (from.has_link_settings()) {
    _internal_mutable_link_settings()->::improbable::platform::runtime::LinkSettings::MergeFrom(from._internal_link_settings());
  }
}

void ReceptionistLoginPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ReceptionistLoginPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceptionistLoginPayload::CopyFrom(const ReceptionistLoginPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ReceptionistLoginPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceptionistLoginPayload::IsInitialized() const {
  return true;
}

void ReceptionistLoginPayload::InternalSwap(ReceptionistLoginPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(link_settings_, other->link_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceptionistLoginPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worker_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_type().empty()) {
    worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_type(), 
      GetArena());
  }
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_id().empty()) {
    worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_id(), 
      GetArena());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  protocol_capabilities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_capabilities().empty()) {
    protocol_capabilities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_capabilities(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_runtime_2freceptionist_2eproto.base);
  worker_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_capabilities_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.LoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  worker_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_capabilities_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_type_.ClearToEmpty();
  worker_id_.ClearToEmpty();
  payload_.ClearToEmpty();
  protocol_capabilities_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string worker_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_worker_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.platform.runtime.LoginRequest.worker_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string worker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.platform.runtime.LoginRequest.worker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes protocol_capabilities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_protocol_capabilities();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_type = 1;
  if (this->worker_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_type().data(), static_cast<int>(this->_internal_worker_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.platform.runtime.LoginRequest.worker_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_type(), target);
  }

  // string worker_id = 2;
  if (this->worker_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.platform.runtime.LoginRequest.worker_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_worker_id(), target);
  }

  // bytes payload = 3 [deprecated = true];
  if (this->payload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // bytes protocol_capabilities = 4;
  if (this->protocol_capabilities().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_protocol_capabilities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worker_type = 1;
  if (this->worker_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_type());
  }

  // string worker_id = 2;
  if (this->worker_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // bytes payload = 3 [deprecated = true];
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // bytes protocol_capabilities = 4;
  if (this->protocol_capabilities().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_protocol_capabilities());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worker_type().size() > 0) {
    _internal_set_worker_type(from._internal_worker_type());
  }
  if (from.worker_id().size() > 0) {
    _internal_set_worker_id(from._internal_worker_id());
  }
  if (from.payload().size() > 0) {
    _internal_set_payload(from._internal_payload());
  }
  if (from.protocol_capabilities().size() > 0) {
    _internal_set_protocol_capabilities(from._internal_protocol_capabilities());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  worker_type_.Swap(&other->worker_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  worker_id_.Swap(&other->worker_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_capabilities_.Swap(&other->protocol_capabilities_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BridgeSession::_Internal {
 public:
};

BridgeSession::BridgeSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.BridgeSession)
}
BridgeSession::BridgeSession(const BridgeSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.BridgeSession)
}

void BridgeSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BridgeSession_runtime_2freceptionist_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BridgeSession::~BridgeSession() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.BridgeSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BridgeSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BridgeSession::ArenaDtor(void* object) {
  BridgeSession* _this = reinterpret_cast< BridgeSession* >(object);
  (void)_this;
}
void BridgeSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BridgeSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BridgeSession& BridgeSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BridgeSession_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void BridgeSession::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.BridgeSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BridgeSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.BridgeSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.BridgeSession)
  return target;
}

size_t BridgeSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.BridgeSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.BridgeSession)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BridgeSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.BridgeSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.BridgeSession)
    MergeFrom(*source);
  }
}

void BridgeSession::MergeFrom(const BridgeSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.BridgeSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void BridgeSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.BridgeSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeSession::CopyFrom(const BridgeSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.BridgeSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeSession::IsInitialized() const {
  return true;
}

void BridgeSession::InternalSwap(BridgeSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BridgeConnectionDetails::_Internal {
 public:
  static const ::improbable::platform::runtime::BridgeSession& session(const BridgeConnectionDetails* msg);
};

const ::improbable::platform::runtime::BridgeSession&
BridgeConnectionDetails::_Internal::session(const BridgeConnectionDetails* msg) {
  return *msg->session_;
}
BridgeConnectionDetails::BridgeConnectionDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.BridgeConnectionDetails)
}
BridgeConnectionDetails::BridgeConnectionDetails(const BridgeConnectionDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  external_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_external_host().empty()) {
    external_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_host(), 
      GetArena());
  }
  internal_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_internal_host().empty()) {
    internal_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_internal_host(), 
      GetArena());
  }
  deployment_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deployment_certificate().empty()) {
    deployment_certificate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deployment_certificate(), 
      GetArena());
  }
  if (from._internal_has_session()) {
    session_ = new ::improbable::platform::runtime::BridgeSession(*from.session_);
  } else {
    session_ = nullptr;
  }
  ::memcpy(&internal_port_, &from.internal_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_port_) -
    reinterpret_cast<char*>(&internal_port_)) + sizeof(external_port_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.BridgeConnectionDetails)
}

void BridgeConnectionDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto.base);
  external_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deployment_certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&session_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&external_port_) -
      reinterpret_cast<char*>(&session_)) + sizeof(external_port_));
}

BridgeConnectionDetails::~BridgeConnectionDetails() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.BridgeConnectionDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BridgeConnectionDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  external_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deployment_certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete session_;
}

void BridgeConnectionDetails::ArenaDtor(void* object) {
  BridgeConnectionDetails* _this = reinterpret_cast< BridgeConnectionDetails* >(object);
  (void)_this;
}
void BridgeConnectionDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BridgeConnectionDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BridgeConnectionDetails& BridgeConnectionDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BridgeConnectionDetails_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void BridgeConnectionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.BridgeConnectionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  external_host_.ClearToEmpty();
  internal_host_.ClearToEmpty();
  deployment_certificate_.ClearToEmpty();
  if (GetArena() == nullptr && session_ != nullptr) {
    delete session_;
  }
  session_ = nullptr;
  ::memset(&internal_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_port_) -
      reinterpret_cast<char*>(&internal_port_)) + sizeof(external_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeConnectionDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string external_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_external_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.platform.runtime.BridgeConnectionDetails.external_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string internal_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_internal_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.platform.runtime.BridgeConnectionDetails.internal_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 internal_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          internal_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.BridgeSession session = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes deployment_certificate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_deployment_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 external_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          external_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BridgeConnectionDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.BridgeConnectionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string external_host = 1;
  if (this->external_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_host().data(), static_cast<int>(this->_internal_external_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.platform.runtime.BridgeConnectionDetails.external_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_external_host(), target);
  }

  // string internal_host = 2;
  if (this->internal_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_internal_host().data(), static_cast<int>(this->_internal_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.platform.runtime.BridgeConnectionDetails.internal_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_internal_host(), target);
  }

  // int32 internal_port = 3;
  if (this->internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_internal_port(), target);
  }

  // .improbable.platform.runtime.BridgeSession session = 4;
  if (this->has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::session(this), target, stream);
  }

  // bytes deployment_certificate = 5;
  if (this->deployment_certificate().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_deployment_certificate(), target);
  }

  // int32 external_port = 6;
  if (this->external_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_external_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.BridgeConnectionDetails)
  return target;
}

size_t BridgeConnectionDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.BridgeConnectionDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string external_host = 1;
  if (this->external_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_host());
  }

  // string internal_host = 2;
  if (this->internal_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_internal_host());
  }

  // bytes deployment_certificate = 5;
  if (this->deployment_certificate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deployment_certificate());
  }

  // .improbable.platform.runtime.BridgeSession session = 4;
  if (this->has_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_);
  }

  // int32 internal_port = 3;
  if (this->internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_internal_port());
  }

  // int32 external_port = 6;
  if (this->external_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_external_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BridgeConnectionDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.BridgeConnectionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const BridgeConnectionDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BridgeConnectionDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.BridgeConnectionDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.BridgeConnectionDetails)
    MergeFrom(*source);
  }
}

void BridgeConnectionDetails::MergeFrom(const BridgeConnectionDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.BridgeConnectionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.external_host().size() > 0) {
    _internal_set_external_host(from._internal_external_host());
  }
  if (from.internal_host().size() > 0) {
    _internal_set_internal_host(from._internal_internal_host());
  }
  if (from.deployment_certificate().size() > 0) {
    _internal_set_deployment_certificate(from._internal_deployment_certificate());
  }
  if (from.has_session()) {
    _internal_mutable_session()->::improbable::platform::runtime::BridgeSession::MergeFrom(from._internal_session());
  }
  if (from.internal_port() != 0) {
    _internal_set_internal_port(from._internal_internal_port());
  }
  if (from.external_port() != 0) {
    _internal_set_external_port(from._internal_external_port());
  }
}

void BridgeConnectionDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.BridgeConnectionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BridgeConnectionDetails::CopyFrom(const BridgeConnectionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.BridgeConnectionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeConnectionDetails::IsInitialized() const {
  return true;
}

void BridgeConnectionDetails::InternalSwap(BridgeConnectionDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  external_host_.Swap(&other->external_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  internal_host_.Swap(&other->internal_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deployment_certificate_.Swap(&other->deployment_certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BridgeConnectionDetails, external_port_)
      + sizeof(BridgeConnectionDetails::external_port_)
      - PROTOBUF_FIELD_OFFSET(BridgeConnectionDetails, session_)>(
          reinterpret_cast<char*>(&session_),
          reinterpret_cast<char*>(&other->session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeConnectionDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolSettingsV1::_Internal {
 public:
  static const ::improbable::platform::runtime::BridgeConnectionDetails& bridge_details(const ProtocolSettingsV1* msg);
};

const ::improbable::platform::runtime::BridgeConnectionDetails&
ProtocolSettingsV1::_Internal::bridge_details(const ProtocolSettingsV1* msg) {
  return *msg->bridge_details_;
}
ProtocolSettingsV1::ProtocolSettingsV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ProtocolSettingsV1)
}
ProtocolSettingsV1::ProtocolSettingsV1(const ProtocolSettingsV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bridge_details()) {
    bridge_details_ = new ::improbable::platform::runtime::BridgeConnectionDetails(*from.bridge_details_);
  } else {
    bridge_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ProtocolSettingsV1)
}

void ProtocolSettingsV1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto.base);
  bridge_details_ = nullptr;
}

ProtocolSettingsV1::~ProtocolSettingsV1() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ProtocolSettingsV1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolSettingsV1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bridge_details_;
}

void ProtocolSettingsV1::ArenaDtor(void* object) {
  ProtocolSettingsV1* _this = reinterpret_cast< ProtocolSettingsV1* >(object);
  (void)_this;
}
void ProtocolSettingsV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolSettingsV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolSettingsV1& ProtocolSettingsV1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolSettingsV1_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ProtocolSettingsV1::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ProtocolSettingsV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bridge_details_ != nullptr) {
    delete bridge_details_;
  }
  bridge_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolSettingsV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bridge_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolSettingsV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ProtocolSettingsV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
  if (this->has_bridge_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bridge_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ProtocolSettingsV1)
  return target;
}

size_t ProtocolSettingsV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ProtocolSettingsV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
  if (this->has_bridge_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bridge_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolSettingsV1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ProtocolSettingsV1)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolSettingsV1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolSettingsV1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ProtocolSettingsV1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ProtocolSettingsV1)
    MergeFrom(*source);
  }
}

void ProtocolSettingsV1::MergeFrom(const ProtocolSettingsV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ProtocolSettingsV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bridge_details()) {
    _internal_mutable_bridge_details()->::improbable::platform::runtime::BridgeConnectionDetails::MergeFrom(from._internal_bridge_details());
  }
}

void ProtocolSettingsV1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ProtocolSettingsV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSettingsV1::CopyFrom(const ProtocolSettingsV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ProtocolSettingsV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolSettingsV1::IsInitialized() const {
  return true;
}

void ProtocolSettingsV1::InternalSwap(ProtocolSettingsV1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(bridge_details_, other->bridge_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolSettingsV1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolSettingsV2::_Internal {
 public:
  static const ::improbable::platform::runtime::BridgeConnectionDetails& bridge_details(const ProtocolSettingsV2* msg);
};

const ::improbable::platform::runtime::BridgeConnectionDetails&
ProtocolSettingsV2::_Internal::bridge_details(const ProtocolSettingsV2* msg) {
  return *msg->bridge_details_;
}
ProtocolSettingsV2::ProtocolSettingsV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ProtocolSettingsV2)
}
ProtocolSettingsV2::ProtocolSettingsV2(const ProtocolSettingsV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bridge_details()) {
    bridge_details_ = new ::improbable::platform::runtime::BridgeConnectionDetails(*from.bridge_details_);
  } else {
    bridge_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ProtocolSettingsV2)
}

void ProtocolSettingsV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto.base);
  bridge_details_ = nullptr;
}

ProtocolSettingsV2::~ProtocolSettingsV2() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ProtocolSettingsV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolSettingsV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bridge_details_;
}

void ProtocolSettingsV2::ArenaDtor(void* object) {
  ProtocolSettingsV2* _this = reinterpret_cast< ProtocolSettingsV2* >(object);
  (void)_this;
}
void ProtocolSettingsV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolSettingsV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolSettingsV2& ProtocolSettingsV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolSettingsV2_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ProtocolSettingsV2::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ProtocolSettingsV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bridge_details_ != nullptr) {
    delete bridge_details_;
  }
  bridge_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolSettingsV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bridge_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolSettingsV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ProtocolSettingsV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
  if (this->has_bridge_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bridge_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ProtocolSettingsV2)
  return target;
}

size_t ProtocolSettingsV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ProtocolSettingsV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1;
  if (this->has_bridge_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bridge_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolSettingsV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ProtocolSettingsV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolSettingsV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolSettingsV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ProtocolSettingsV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ProtocolSettingsV2)
    MergeFrom(*source);
  }
}

void ProtocolSettingsV2::MergeFrom(const ProtocolSettingsV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ProtocolSettingsV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bridge_details()) {
    _internal_mutable_bridge_details()->::improbable::platform::runtime::BridgeConnectionDetails::MergeFrom(from._internal_bridge_details());
  }
}

void ProtocolSettingsV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ProtocolSettingsV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSettingsV2::CopyFrom(const ProtocolSettingsV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ProtocolSettingsV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolSettingsV2::IsInitialized() const {
  return true;
}

void ProtocolSettingsV2::InternalSwap(ProtocolSettingsV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(bridge_details_, other->bridge_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolSettingsV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProtocolSettings::_Internal {
 public:
  static const ::improbable::platform::runtime::ProtocolSettingsV1& protocol_settings_v1(const ProtocolSettings* msg);
  static const ::improbable::platform::runtime::ProtocolSettingsV2& protocol_settings_v2(const ProtocolSettings* msg);
};

const ::improbable::platform::runtime::ProtocolSettingsV1&
ProtocolSettings::_Internal::protocol_settings_v1(const ProtocolSettings* msg) {
  return *msg->settings_.protocol_settings_v1_;
}
const ::improbable::platform::runtime::ProtocolSettingsV2&
ProtocolSettings::_Internal::protocol_settings_v2(const ProtocolSettings* msg) {
  return *msg->settings_.protocol_settings_v2_;
}
void ProtocolSettings::set_allocated_protocol_settings_v1(::improbable::platform::runtime::ProtocolSettingsV1* protocol_settings_v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_settings();
  if (protocol_settings_v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(protocol_settings_v1);
    if (message_arena != submessage_arena) {
      protocol_settings_v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_settings_v1, submessage_arena);
    }
    set_has_protocol_settings_v1();
    settings_.protocol_settings_v1_ = protocol_settings_v1;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ProtocolSettings.protocol_settings_v1)
}
void ProtocolSettings::set_allocated_protocol_settings_v2(::improbable::platform::runtime::ProtocolSettingsV2* protocol_settings_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_settings();
  if (protocol_settings_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(protocol_settings_v2);
    if (message_arena != submessage_arena) {
      protocol_settings_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_settings_v2, submessage_arena);
    }
    set_has_protocol_settings_v2();
    settings_.protocol_settings_v2_ = protocol_settings_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ProtocolSettings.protocol_settings_v2)
}
ProtocolSettings::ProtocolSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ProtocolSettings)
}
ProtocolSettings::ProtocolSettings(const ProtocolSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_settings();
  switch (from.settings_case()) {
    case kProtocolSettingsV1: {
      _internal_mutable_protocol_settings_v1()->::improbable::platform::runtime::ProtocolSettingsV1::MergeFrom(from._internal_protocol_settings_v1());
      break;
    }
    case kProtocolSettingsV2: {
      _internal_mutable_protocol_settings_v2()->::improbable::platform::runtime::ProtocolSettingsV2::MergeFrom(from._internal_protocol_settings_v2());
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ProtocolSettings)
}

void ProtocolSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProtocolSettings_runtime_2freceptionist_2eproto.base);
  clear_has_settings();
}

ProtocolSettings::~ProtocolSettings() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ProtocolSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProtocolSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_settings()) {
    clear_settings();
  }
}

void ProtocolSettings::ArenaDtor(void* object) {
  ProtocolSettings* _this = reinterpret_cast< ProtocolSettings* >(object);
  (void)_this;
}
void ProtocolSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolSettings& ProtocolSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolSettings_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void ProtocolSettings::clear_settings() {
// @@protoc_insertion_point(one_of_clear_start:improbable.platform.runtime.ProtocolSettings)
  switch (settings_case()) {
    case kProtocolSettingsV1: {
      if (GetArena() == nullptr) {
        delete settings_.protocol_settings_v1_;
      }
      break;
    }
    case kProtocolSettingsV2: {
      if (GetArena() == nullptr) {
        delete settings_.protocol_settings_v2_;
      }
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SETTINGS_NOT_SET;
}


void ProtocolSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ProtocolSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_settings();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.ProtocolSettingsV1 protocol_settings_v1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol_settings_v1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.ProtocolSettingsV2 protocol_settings_v2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol_settings_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ProtocolSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.ProtocolSettingsV1 protocol_settings_v1 = 1;
  if (_internal_has_protocol_settings_v1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::protocol_settings_v1(this), target, stream);
  }

  // .improbable.platform.runtime.ProtocolSettingsV2 protocol_settings_v2 = 2;
  if (_internal_has_protocol_settings_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::protocol_settings_v2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ProtocolSettings)
  return target;
}

size_t ProtocolSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ProtocolSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (settings_case()) {
    // .improbable.platform.runtime.ProtocolSettingsV1 protocol_settings_v1 = 1;
    case kProtocolSettingsV1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_.protocol_settings_v1_);
      break;
    }
    // .improbable.platform.runtime.ProtocolSettingsV2 protocol_settings_v2 = 2;
    case kProtocolSettingsV2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_.protocol_settings_v2_);
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ProtocolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ProtocolSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ProtocolSettings)
    MergeFrom(*source);
  }
}

void ProtocolSettings::MergeFrom(const ProtocolSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ProtocolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.settings_case()) {
    case kProtocolSettingsV1: {
      _internal_mutable_protocol_settings_v1()->::improbable::platform::runtime::ProtocolSettingsV1::MergeFrom(from._internal_protocol_settings_v1());
      break;
    }
    case kProtocolSettingsV2: {
      _internal_mutable_protocol_settings_v2()->::improbable::platform::runtime::ProtocolSettingsV2::MergeFrom(from._internal_protocol_settings_v2());
      break;
    }
    case SETTINGS_NOT_SET: {
      break;
    }
  }
}

void ProtocolSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ProtocolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolSettings::CopyFrom(const ProtocolSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ProtocolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolSettings::IsInitialized() const {
  return true;
}

void ProtocolSettings::InternalSwap(ProtocolSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginResponse::_Internal {
 public:
  static const ::improbable::platform::runtime::BridgeConnectionDetails& bridge_details(const LoginResponse* msg);
};

const ::improbable::platform::runtime::BridgeConnectionDetails&
LoginResponse::_Internal::bridge_details(const LoginResponse* msg) {
  return *msg->bridge_details_;
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_settings().empty()) {
    protocol_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_settings(), 
      GetArena());
  }
  if (from._internal_has_bridge_details()) {
    bridge_details_ = new ::improbable::platform::runtime::BridgeConnectionDetails(*from.bridge_details_);
  } else {
    bridge_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_runtime_2freceptionist_2eproto.base);
  protocol_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bridge_details_ = nullptr;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.LoginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bridge_details_;
}

void LoginResponse::ArenaDtor(void* object) {
  LoginResponse* _this = reinterpret_cast< LoginResponse* >(object);
  (void)_this;
}
void LoginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_settings_.ClearToEmpty();
  if (GetArena() == nullptr && bridge_details_ != nullptr) {
    delete bridge_details_;
  }
  bridge_details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bridge_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes protocol_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocol_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1 [deprecated = true];
  if (this->has_bridge_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bridge_details(this), target, stream);
  }

  // bytes protocol_settings = 2;
  if (this->protocol_settings().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_protocol_settings(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes protocol_settings = 2;
  if (this->protocol_settings().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_protocol_settings());
  }

  // .improbable.platform.runtime.BridgeConnectionDetails bridge_details = 1 [deprecated = true];
  if (this->has_bridge_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bridge_details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_settings().size() > 0) {
    _internal_set_protocol_settings(from._internal_protocol_settings());
  }
  if (from.has_bridge_details()) {
    _internal_mutable_bridge_details()->::improbable::platform::runtime::BridgeConnectionDetails::MergeFrom(from._internal_bridge_details());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_settings_.Swap(&other->protocol_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bridge_details_, other->bridge_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemainingCapacityRequest::_Internal {
 public:
};

RemainingCapacityRequest::RemainingCapacityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.RemainingCapacityRequest)
}
RemainingCapacityRequest::RemainingCapacityRequest(const RemainingCapacityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.RemainingCapacityRequest)
}

void RemainingCapacityRequest::SharedCtor() {
}

RemainingCapacityRequest::~RemainingCapacityRequest() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.RemainingCapacityRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemainingCapacityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemainingCapacityRequest::ArenaDtor(void* object) {
  RemainingCapacityRequest* _this = reinterpret_cast< RemainingCapacityRequest* >(object);
  (void)_this;
}
void RemainingCapacityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemainingCapacityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemainingCapacityRequest& RemainingCapacityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemainingCapacityRequest_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void RemainingCapacityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.RemainingCapacityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemainingCapacityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemainingCapacityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.RemainingCapacityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.RemainingCapacityRequest)
  return target;
}

size_t RemainingCapacityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.RemainingCapacityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemainingCapacityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.RemainingCapacityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemainingCapacityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemainingCapacityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.RemainingCapacityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.RemainingCapacityRequest)
    MergeFrom(*source);
  }
}

void RemainingCapacityRequest::MergeFrom(const RemainingCapacityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.RemainingCapacityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemainingCapacityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.RemainingCapacityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemainingCapacityRequest::CopyFrom(const RemainingCapacityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.RemainingCapacityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemainingCapacityRequest::IsInitialized() const {
  return true;
}

void RemainingCapacityRequest::InternalSwap(RemainingCapacityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemainingCapacityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemainingCapacityResponse::_Internal {
 public:
};

RemainingCapacityResponse::RemainingCapacityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.RemainingCapacityResponse)
}
RemainingCapacityResponse::RemainingCapacityResponse(const RemainingCapacityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remaining_capacity_ = from.remaining_capacity_;
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.RemainingCapacityResponse)
}

void RemainingCapacityResponse::SharedCtor() {
  remaining_capacity_ = PROTOBUF_LONGLONG(0);
}

RemainingCapacityResponse::~RemainingCapacityResponse() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.RemainingCapacityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemainingCapacityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemainingCapacityResponse::ArenaDtor(void* object) {
  RemainingCapacityResponse* _this = reinterpret_cast< RemainingCapacityResponse* >(object);
  (void)_this;
}
void RemainingCapacityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemainingCapacityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemainingCapacityResponse& RemainingCapacityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemainingCapacityResponse_runtime_2freceptionist_2eproto.base);
  return *internal_default_instance();
}


void RemainingCapacityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.RemainingCapacityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remaining_capacity_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemainingCapacityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 remaining_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          remaining_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemainingCapacityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.RemainingCapacityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remaining_capacity = 1;
  if (this->remaining_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_remaining_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.RemainingCapacityResponse)
  return target;
}

size_t RemainingCapacityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.RemainingCapacityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remaining_capacity = 1;
  if (this->remaining_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remaining_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemainingCapacityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.RemainingCapacityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemainingCapacityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemainingCapacityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.RemainingCapacityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.RemainingCapacityResponse)
    MergeFrom(*source);
  }
}

void RemainingCapacityResponse::MergeFrom(const RemainingCapacityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.RemainingCapacityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remaining_capacity() != 0) {
    _internal_set_remaining_capacity(from._internal_remaining_capacity());
  }
}

void RemainingCapacityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.RemainingCapacityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemainingCapacityResponse::CopyFrom(const RemainingCapacityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.RemainingCapacityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemainingCapacityResponse::IsInitialized() const {
  return true;
}

void RemainingCapacityResponse::InternalSwap(RemainingCapacityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(remaining_capacity_, other->remaining_capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemainingCapacityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::RakNetLinkSettings* Arena::CreateMaybeMessage< ::improbable::platform::runtime::RakNetLinkSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::RakNetLinkSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::TcpLinkSettings* Arena::CreateMaybeMessage< ::improbable::platform::runtime::TcpLinkSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::TcpLinkSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ErasureCodecParameters* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ErasureCodecParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ErasureCodecParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::HeartbeatParameters* Arena::CreateMaybeMessage< ::improbable::platform::runtime::HeartbeatParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::HeartbeatParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::KcpLinkSettings* Arena::CreateMaybeMessage< ::improbable::platform::runtime::KcpLinkSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::KcpLinkSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::LinkSettings* Arena::CreateMaybeMessage< ::improbable::platform::runtime::LinkSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::LinkSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ProtocolCapabilitiesV1* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ProtocolCapabilitiesV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ProtocolCapabilitiesV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ProtocolCapabilitiesV2* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ProtocolCapabilitiesV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ProtocolCapabilitiesV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ProtocolCapabilities* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ProtocolCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ProtocolCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ReceptionistLoginPayload* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ReceptionistLoginPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ReceptionistLoginPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::LoginRequest* Arena::CreateMaybeMessage< ::improbable::platform::runtime::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::BridgeSession* Arena::CreateMaybeMessage< ::improbable::platform::runtime::BridgeSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::BridgeSession >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::BridgeConnectionDetails* Arena::CreateMaybeMessage< ::improbable::platform::runtime::BridgeConnectionDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::BridgeConnectionDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ProtocolSettingsV1* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ProtocolSettingsV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ProtocolSettingsV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ProtocolSettingsV2* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ProtocolSettingsV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ProtocolSettingsV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ProtocolSettings* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ProtocolSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ProtocolSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::LoginResponse* Arena::CreateMaybeMessage< ::improbable::platform::runtime::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::RemainingCapacityRequest* Arena::CreateMaybeMessage< ::improbable::platform::runtime::RemainingCapacityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::RemainingCapacityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::RemainingCapacityResponse* Arena::CreateMaybeMessage< ::improbable::platform::runtime::RemainingCapacityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::RemainingCapacityResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

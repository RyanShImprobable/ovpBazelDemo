// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime/inspection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runtime_2finspection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runtime_2finspection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/field_mask.pb.h>
#include "runtime/common.pb.h"
#include "runtime/query.pb.h"
#include "runtime/worker_attribute.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runtime_2finspection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runtime_2finspection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[63]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2finspection_2eproto;
namespace improbable {
namespace platform {
namespace runtime {
class ChunkDetails;
class ChunkDetailsDefaultTypeInternal;
extern ChunkDetailsDefaultTypeInternal _ChunkDetails_default_instance_;
class ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse;
class ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUseDefaultTypeInternal;
extern ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUseDefaultTypeInternal _ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse_default_instance_;
class ChunkDetails_WorkerAssignmentsEntry_DoNotUse;
class ChunkDetails_WorkerAssignmentsEntry_DoNotUseDefaultTypeInternal;
extern ChunkDetails_WorkerAssignmentsEntry_DoNotUseDefaultTypeInternal _ChunkDetails_WorkerAssignmentsEntry_DoNotUse_default_instance_;
class DeleteEntitiesRequest;
class DeleteEntitiesRequestDefaultTypeInternal;
extern DeleteEntitiesRequestDefaultTypeInternal _DeleteEntitiesRequest_default_instance_;
class DeleteEntitiesResponse;
class DeleteEntitiesResponseDefaultTypeInternal;
extern DeleteEntitiesResponseDefaultTypeInternal _DeleteEntitiesResponse_default_instance_;
class DeleteWorkerRequest;
class DeleteWorkerRequestDefaultTypeInternal;
extern DeleteWorkerRequestDefaultTypeInternal _DeleteWorkerRequest_default_instance_;
class DeleteWorkerResponse;
class DeleteWorkerResponseDefaultTypeInternal;
extern DeleteWorkerResponseDefaultTypeInternal _DeleteWorkerResponse_default_instance_;
class EntityData;
class EntityDataDefaultTypeInternal;
extern EntityDataDefaultTypeInternal _EntityData_default_instance_;
class EntityHeatmapOptions;
class EntityHeatmapOptionsDefaultTypeInternal;
extern EntityHeatmapOptionsDefaultTypeInternal _EntityHeatmapOptions_default_instance_;
class EntityHeatmapOptions_Resolution;
class EntityHeatmapOptions_ResolutionDefaultTypeInternal;
extern EntityHeatmapOptions_ResolutionDefaultTypeInternal _EntityHeatmapOptions_Resolution_default_instance_;
class EntityHeatmapOptions_Resolution_AutoResolution;
class EntityHeatmapOptions_Resolution_AutoResolutionDefaultTypeInternal;
extern EntityHeatmapOptions_Resolution_AutoResolutionDefaultTypeInternal _EntityHeatmapOptions_Resolution_AutoResolution_default_instance_;
class EntityHeatmapOptions_Resolution_ChunkResolution;
class EntityHeatmapOptions_Resolution_ChunkResolutionDefaultTypeInternal;
extern EntityHeatmapOptions_Resolution_ChunkResolutionDefaultTypeInternal _EntityHeatmapOptions_Resolution_ChunkResolution_default_instance_;
class EntityHeatmapOptions_Resolution_SquareGridResolution;
class EntityHeatmapOptions_Resolution_SquareGridResolutionDefaultTypeInternal;
extern EntityHeatmapOptions_Resolution_SquareGridResolutionDefaultTypeInternal _EntityHeatmapOptions_Resolution_SquareGridResolution_default_instance_;
class EntityPosition;
class EntityPositionDefaultTypeInternal;
extern EntityPositionDefaultTypeInternal _EntityPosition_default_instance_;
class GetAllWorkersRequest;
class GetAllWorkersRequestDefaultTypeInternal;
extern GetAllWorkersRequestDefaultTypeInternal _GetAllWorkersRequest_default_instance_;
class GetAllWorkersResponse;
class GetAllWorkersResponseDefaultTypeInternal;
extern GetAllWorkersResponseDefaultTypeInternal _GetAllWorkersResponse_default_instance_;
class GetChunksRequest;
class GetChunksRequestDefaultTypeInternal;
extern GetChunksRequestDefaultTypeInternal _GetChunksRequest_default_instance_;
class GetChunksResponse;
class GetChunksResponseDefaultTypeInternal;
extern GetChunksResponseDefaultTypeInternal _GetChunksResponse_default_instance_;
class GetEntityDetailsRequest;
class GetEntityDetailsRequestDefaultTypeInternal;
extern GetEntityDetailsRequestDefaultTypeInternal _GetEntityDetailsRequest_default_instance_;
class GetEntityDetailsResponse;
class GetEntityDetailsResponseDefaultTypeInternal;
extern GetEntityDetailsResponseDefaultTypeInternal _GetEntityDetailsResponse_default_instance_;
class GetEntityHeatmapRequest;
class GetEntityHeatmapRequestDefaultTypeInternal;
extern GetEntityHeatmapRequestDefaultTypeInternal _GetEntityHeatmapRequest_default_instance_;
class GetEntityHeatmapResponse;
class GetEntityHeatmapResponseDefaultTypeInternal;
extern GetEntityHeatmapResponseDefaultTypeInternal _GetEntityHeatmapResponse_default_instance_;
class GetLoadBalancingStrategyRequest;
class GetLoadBalancingStrategyRequestDefaultTypeInternal;
extern GetLoadBalancingStrategyRequestDefaultTypeInternal _GetLoadBalancingStrategyRequest_default_instance_;
class GetLoadBalancingStrategyResponse;
class GetLoadBalancingStrategyResponseDefaultTypeInternal;
extern GetLoadBalancingStrategyResponseDefaultTypeInternal _GetLoadBalancingStrategyResponse_default_instance_;
class GetVirtualWorkerMappingRequest;
class GetVirtualWorkerMappingRequestDefaultTypeInternal;
extern GetVirtualWorkerMappingRequestDefaultTypeInternal _GetVirtualWorkerMappingRequest_default_instance_;
class GetVirtualWorkerMappingResponse;
class GetVirtualWorkerMappingResponseDefaultTypeInternal;
extern GetVirtualWorkerMappingResponseDefaultTypeInternal _GetVirtualWorkerMappingResponse_default_instance_;
class GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse;
class GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUseDefaultTypeInternal;
extern GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUseDefaultTypeInternal _GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse_default_instance_;
class GetWorkerDetailsRequest;
class GetWorkerDetailsRequestDefaultTypeInternal;
extern GetWorkerDetailsRequestDefaultTypeInternal _GetWorkerDetailsRequest_default_instance_;
class GetWorkerDetailsResponse;
class GetWorkerDetailsResponseDefaultTypeInternal;
extern GetWorkerDetailsResponseDefaultTypeInternal _GetWorkerDetailsResponse_default_instance_;
class GetWorkerInterestRequest;
class GetWorkerInterestRequestDefaultTypeInternal;
extern GetWorkerInterestRequestDefaultTypeInternal _GetWorkerInterestRequest_default_instance_;
class GetWorkerInterestResponse;
class GetWorkerInterestResponseDefaultTypeInternal;
extern GetWorkerInterestResponseDefaultTypeInternal _GetWorkerInterestResponse_default_instance_;
class GetWorkerInterestResponse_WorkerInterestConfiguration;
class GetWorkerInterestResponse_WorkerInterestConfigurationDefaultTypeInternal;
extern GetWorkerInterestResponse_WorkerInterestConfigurationDefaultTypeInternal _GetWorkerInterestResponse_WorkerInterestConfiguration_default_instance_;
class GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse;
class GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUseDefaultTypeInternal;
extern GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUseDefaultTypeInternal _GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse_default_instance_;
class GetWorldExtentsRequest;
class GetWorldExtentsRequestDefaultTypeInternal;
extern GetWorldExtentsRequestDefaultTypeInternal _GetWorldExtentsRequest_default_instance_;
class GetWorldExtentsResponse;
class GetWorldExtentsResponseDefaultTypeInternal;
extern GetWorldExtentsResponseDefaultTypeInternal _GetWorldExtentsResponse_default_instance_;
class GetWorldExtentsResponse_WorldSubdivision;
class GetWorldExtentsResponse_WorldSubdivisionDefaultTypeInternal;
extern GetWorldExtentsResponse_WorldSubdivisionDefaultTypeInternal _GetWorldExtentsResponse_WorldSubdivision_default_instance_;
class GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision;
class GetWorldExtentsResponse_WorldSubdivision_GsimSubdivisionDefaultTypeInternal;
extern GetWorldExtentsResponse_WorldSubdivision_GsimSubdivisionDefaultTypeInternal _GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision_default_instance_;
class GridPartition;
class GridPartitionDefaultTypeInternal;
extern GridPartitionDefaultTypeInternal _GridPartition_default_instance_;
class GridPartitionStrategy;
class GridPartitionStrategyDefaultTypeInternal;
extern GridPartitionStrategyDefaultTypeInternal _GridPartitionStrategy_default_instance_;
class Heatmap;
class HeatmapDefaultTypeInternal;
extern HeatmapDefaultTypeInternal _Heatmap_default_instance_;
class Heatmap_Cell;
class Heatmap_CellDefaultTypeInternal;
extern Heatmap_CellDefaultTypeInternal _Heatmap_Cell_default_instance_;
class InspectionEntityAuthorityState;
class InspectionEntityAuthorityStateDefaultTypeInternal;
extern InspectionEntityAuthorityStateDefaultTypeInternal _InspectionEntityAuthorityState_default_instance_;
class InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse;
class InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUseDefaultTypeInternal;
extern InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUseDefaultTypeInternal _InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse_default_instance_;
class InspectionEntityComponentId;
class InspectionEntityComponentIdDefaultTypeInternal;
extern InspectionEntityComponentIdDefaultTypeInternal _InspectionEntityComponentId_default_instance_;
class InspectionEntityComponentUpdate;
class InspectionEntityComponentUpdateDefaultTypeInternal;
extern InspectionEntityComponentUpdateDefaultTypeInternal _InspectionEntityComponentUpdate_default_instance_;
class InspectionEntitySnapshot;
class InspectionEntitySnapshotDefaultTypeInternal;
extern InspectionEntitySnapshotDefaultTypeInternal _InspectionEntitySnapshot_default_instance_;
class InspectionEntitySnapshot_ComponentsEntry_DoNotUse;
class InspectionEntitySnapshot_ComponentsEntry_DoNotUseDefaultTypeInternal;
extern InspectionEntitySnapshot_ComponentsEntry_DoNotUseDefaultTypeInternal _InspectionEntitySnapshot_ComponentsEntry_DoNotUse_default_instance_;
class InspectionEntitySubscriptionQuery;
class InspectionEntitySubscriptionQueryDefaultTypeInternal;
extern InspectionEntitySubscriptionQueryDefaultTypeInternal _InspectionEntitySubscriptionQuery_default_instance_;
class InspectionEntitySubscriptionResponse;
class InspectionEntitySubscriptionResponseDefaultTypeInternal;
extern InspectionEntitySubscriptionResponseDefaultTypeInternal _InspectionEntitySubscriptionResponse_default_instance_;
class InspectorStreamingQuery;
class InspectorStreamingQueryDefaultTypeInternal;
extern InspectorStreamingQueryDefaultTypeInternal _InspectorStreamingQuery_default_instance_;
class LoadBalancingGridFormat;
class LoadBalancingGridFormatDefaultTypeInternal;
extern LoadBalancingGridFormatDefaultTypeInternal _LoadBalancingGridFormat_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class Region_RectanglesRegion;
class Region_RectanglesRegionDefaultTypeInternal;
extern Region_RectanglesRegionDefaultTypeInternal _Region_RectanglesRegion_default_instance_;
class RenderableComponent;
class RenderableComponentDefaultTypeInternal;
extern RenderableComponentDefaultTypeInternal _RenderableComponent_default_instance_;
class WorkerDetails;
class WorkerDetailsDefaultTypeInternal;
extern WorkerDetailsDefaultTypeInternal _WorkerDetails_default_instance_;
class WorkerDetails_ComponentSet;
class WorkerDetails_ComponentSetDefaultTypeInternal;
extern WorkerDetails_ComponentSetDefaultTypeInternal _WorkerDetails_ComponentSet_default_instance_;
class WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse;
class WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUseDefaultTypeInternal;
extern WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUseDefaultTypeInternal _WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse_default_instance_;
class WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse;
class WorkerDetails_DelegatedEntityComponentsEntry_DoNotUseDefaultTypeInternal;
extern WorkerDetails_DelegatedEntityComponentsEntry_DoNotUseDefaultTypeInternal _WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse_default_instance_;
class WorkerDetails_MetricsEntry_DoNotUse;
class WorkerDetails_MetricsEntry_DoNotUseDefaultTypeInternal;
extern WorkerDetails_MetricsEntry_DoNotUseDefaultTypeInternal _WorkerDetails_MetricsEntry_DoNotUse_default_instance_;
class WorkerLoadbalancingStatus;
class WorkerLoadbalancingStatusDefaultTypeInternal;
extern WorkerLoadbalancingStatusDefaultTypeInternal _WorkerLoadbalancingStatus_default_instance_;
class WorkerNodeRequest;
class WorkerNodeRequestDefaultTypeInternal;
extern WorkerNodeRequestDefaultTypeInternal _WorkerNodeRequest_default_instance_;
class WorkerNodeResponse;
class WorkerNodeResponseDefaultTypeInternal;
extern WorkerNodeResponseDefaultTypeInternal _WorkerNodeResponse_default_instance_;
class WorkerSummary;
class WorkerSummaryDefaultTypeInternal;
extern WorkerSummaryDefaultTypeInternal _WorkerSummary_default_instance_;
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::platform::runtime::ChunkDetails* Arena::CreateMaybeMessage<::improbable::platform::runtime::ChunkDetails>(Arena*);
template<> ::improbable::platform::runtime::ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::ChunkDetails_WorkerAssignmentsEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::ChunkDetails_WorkerAssignmentsEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::DeleteEntitiesRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::DeleteEntitiesRequest>(Arena*);
template<> ::improbable::platform::runtime::DeleteEntitiesResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::DeleteEntitiesResponse>(Arena*);
template<> ::improbable::platform::runtime::DeleteWorkerRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::DeleteWorkerRequest>(Arena*);
template<> ::improbable::platform::runtime::DeleteWorkerResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::DeleteWorkerResponse>(Arena*);
template<> ::improbable::platform::runtime::EntityData* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityData>(Arena*);
template<> ::improbable::platform::runtime::EntityHeatmapOptions* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions>(Arena*);
template<> ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions_Resolution>(Arena*);
template<> ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution>(Arena*);
template<> ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution>(Arena*);
template<> ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution>(Arena*);
template<> ::improbable::platform::runtime::EntityPosition* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityPosition>(Arena*);
template<> ::improbable::platform::runtime::GetAllWorkersRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetAllWorkersRequest>(Arena*);
template<> ::improbable::platform::runtime::GetAllWorkersResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetAllWorkersResponse>(Arena*);
template<> ::improbable::platform::runtime::GetChunksRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetChunksRequest>(Arena*);
template<> ::improbable::platform::runtime::GetChunksResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetChunksResponse>(Arena*);
template<> ::improbable::platform::runtime::GetEntityDetailsRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetEntityDetailsRequest>(Arena*);
template<> ::improbable::platform::runtime::GetEntityDetailsResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetEntityDetailsResponse>(Arena*);
template<> ::improbable::platform::runtime::GetEntityHeatmapRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetEntityHeatmapRequest>(Arena*);
template<> ::improbable::platform::runtime::GetEntityHeatmapResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetEntityHeatmapResponse>(Arena*);
template<> ::improbable::platform::runtime::GetLoadBalancingStrategyRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetLoadBalancingStrategyRequest>(Arena*);
template<> ::improbable::platform::runtime::GetLoadBalancingStrategyResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetLoadBalancingStrategyResponse>(Arena*);
template<> ::improbable::platform::runtime::GetVirtualWorkerMappingRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetVirtualWorkerMappingRequest>(Arena*);
template<> ::improbable::platform::runtime::GetVirtualWorkerMappingResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetVirtualWorkerMappingResponse>(Arena*);
template<> ::improbable::platform::runtime::GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::GetWorkerDetailsRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorkerDetailsRequest>(Arena*);
template<> ::improbable::platform::runtime::GetWorkerDetailsResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorkerDetailsResponse>(Arena*);
template<> ::improbable::platform::runtime::GetWorkerInterestRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorkerInterestRequest>(Arena*);
template<> ::improbable::platform::runtime::GetWorkerInterestResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorkerInterestResponse>(Arena*);
template<> ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration>(Arena*);
template<> ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::GetWorldExtentsRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorldExtentsRequest>(Arena*);
template<> ::improbable::platform::runtime::GetWorldExtentsResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorldExtentsResponse>(Arena*);
template<> ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision>(Arena*);
template<> ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* Arena::CreateMaybeMessage<::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision>(Arena*);
template<> ::improbable::platform::runtime::GridPartition* Arena::CreateMaybeMessage<::improbable::platform::runtime::GridPartition>(Arena*);
template<> ::improbable::platform::runtime::GridPartitionStrategy* Arena::CreateMaybeMessage<::improbable::platform::runtime::GridPartitionStrategy>(Arena*);
template<> ::improbable::platform::runtime::Heatmap* Arena::CreateMaybeMessage<::improbable::platform::runtime::Heatmap>(Arena*);
template<> ::improbable::platform::runtime::Heatmap_Cell* Arena::CreateMaybeMessage<::improbable::platform::runtime::Heatmap_Cell>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntityAuthorityState* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityAuthorityState>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntityComponentId* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityComponentId>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntityComponentUpdate* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityComponentUpdate>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntitySnapshot* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntitySnapshot>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntitySnapshot_ComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntitySnapshot_ComponentsEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntitySubscriptionQuery* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntitySubscriptionQuery>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntitySubscriptionResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntitySubscriptionResponse>(Arena*);
template<> ::improbable::platform::runtime::InspectorStreamingQuery* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectorStreamingQuery>(Arena*);
template<> ::improbable::platform::runtime::LoadBalancingGridFormat* Arena::CreateMaybeMessage<::improbable::platform::runtime::LoadBalancingGridFormat>(Arena*);
template<> ::improbable::platform::runtime::Region* Arena::CreateMaybeMessage<::improbable::platform::runtime::Region>(Arena*);
template<> ::improbable::platform::runtime::Region_RectanglesRegion* Arena::CreateMaybeMessage<::improbable::platform::runtime::Region_RectanglesRegion>(Arena*);
template<> ::improbable::platform::runtime::RenderableComponent* Arena::CreateMaybeMessage<::improbable::platform::runtime::RenderableComponent>(Arena*);
template<> ::improbable::platform::runtime::WorkerDetails* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerDetails>(Arena*);
template<> ::improbable::platform::runtime::WorkerDetails_ComponentSet* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerDetails_ComponentSet>(Arena*);
template<> ::improbable::platform::runtime::WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::WorkerDetails_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerDetails_MetricsEntry_DoNotUse>(Arena*);
template<> ::improbable::platform::runtime::WorkerLoadbalancingStatus* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerLoadbalancingStatus>(Arena*);
template<> ::improbable::platform::runtime::WorkerNodeRequest* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerNodeRequest>(Arena*);
template<> ::improbable::platform::runtime::WorkerNodeResponse* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerNodeResponse>(Arena*);
template<> ::improbable::platform::runtime::WorkerSummary* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerSummary>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace platform {
namespace runtime {

enum WorkerLoadbalancingStatus_LoadCategory : int {
  WorkerLoadbalancingStatus_LoadCategory_UNKNOWN = 0,
  WorkerLoadbalancingStatus_LoadCategory_UNDERLOADED = 1,
  WorkerLoadbalancingStatus_LoadCategory_NORMAL = 2,
  WorkerLoadbalancingStatus_LoadCategory_OVERLOADED = 3,
  WorkerLoadbalancingStatus_LoadCategory_WorkerLoadbalancingStatus_LoadCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorkerLoadbalancingStatus_LoadCategory_WorkerLoadbalancingStatus_LoadCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorkerLoadbalancingStatus_LoadCategory_IsValid(int value);
constexpr WorkerLoadbalancingStatus_LoadCategory WorkerLoadbalancingStatus_LoadCategory_LoadCategory_MIN = WorkerLoadbalancingStatus_LoadCategory_UNKNOWN;
constexpr WorkerLoadbalancingStatus_LoadCategory WorkerLoadbalancingStatus_LoadCategory_LoadCategory_MAX = WorkerLoadbalancingStatus_LoadCategory_OVERLOADED;
constexpr int WorkerLoadbalancingStatus_LoadCategory_LoadCategory_ARRAYSIZE = WorkerLoadbalancingStatus_LoadCategory_LoadCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerLoadbalancingStatus_LoadCategory_descriptor();
template<typename T>
inline const std::string& WorkerLoadbalancingStatus_LoadCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkerLoadbalancingStatus_LoadCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkerLoadbalancingStatus_LoadCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkerLoadbalancingStatus_LoadCategory_descriptor(), enum_t_value);
}
inline bool WorkerLoadbalancingStatus_LoadCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkerLoadbalancingStatus_LoadCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkerLoadbalancingStatus_LoadCategory>(
    WorkerLoadbalancingStatus_LoadCategory_descriptor(), name, value);
}
// ===================================================================

class EntityData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityData) */ {
 public:
  inline EntityData() : EntityData(nullptr) {}
  virtual ~EntityData();

  EntityData(const EntityData& from);
  EntityData(EntityData&& from) noexcept
    : EntityData() {
    *this = ::std::move(from);
  }

  inline EntityData& operator=(const EntityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityData& operator=(EntityData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityData& default_instance();

  static inline const EntityData* internal_default_instance() {
    return reinterpret_cast<const EntityData*>(
               &_EntityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityData& a, EntityData& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityData* New() const final {
    return CreateMaybeMessage<EntityData>(nullptr);
  }

  EntityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityData& from);
  void MergeFrom(const EntityData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityData";
  }
  protected:
  explicit EntityData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenderableComponentsFieldNumber = 2,
    kPrefabFieldNumber = 3,
    kEntityPositionFieldNumber = 4,
    kEntityIdFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.RenderableComponent renderable_components = 2;
  int renderable_components_size() const;
  private:
  int _internal_renderable_components_size() const;
  public:
  void clear_renderable_components();
  ::improbable::platform::runtime::RenderableComponent* mutable_renderable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::RenderableComponent >*
      mutable_renderable_components();
  private:
  const ::improbable::platform::runtime::RenderableComponent& _internal_renderable_components(int index) const;
  ::improbable::platform::runtime::RenderableComponent* _internal_add_renderable_components();
  public:
  const ::improbable::platform::runtime::RenderableComponent& renderable_components(int index) const;
  ::improbable::platform::runtime::RenderableComponent* add_renderable_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::RenderableComponent >&
      renderable_components() const;

  // string prefab = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_prefab();
  PROTOBUF_DEPRECATED const std::string& prefab() const;
  PROTOBUF_DEPRECATED void set_prefab(const std::string& value);
  PROTOBUF_DEPRECATED void set_prefab(std::string&& value);
  PROTOBUF_DEPRECATED void set_prefab(const char* value);
  PROTOBUF_DEPRECATED void set_prefab(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_prefab();
  PROTOBUF_DEPRECATED std::string* release_prefab();
  PROTOBUF_DEPRECATED void set_allocated_prefab(std::string* prefab);
  private:
  const std::string& _internal_prefab() const;
  void _internal_set_prefab(const std::string& value);
  std::string* _internal_mutable_prefab();
  public:

  // .improbable.platform.runtime.EntityPosition entity_position = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_entity_position() const;
  private:
  bool _internal_has_entity_position() const;
  public:
  PROTOBUF_DEPRECATED void clear_entity_position();
  PROTOBUF_DEPRECATED const ::improbable::platform::runtime::EntityPosition& entity_position() const;
  PROTOBUF_DEPRECATED ::improbable::platform::runtime::EntityPosition* release_entity_position();
  PROTOBUF_DEPRECATED ::improbable::platform::runtime::EntityPosition* mutable_entity_position();
  PROTOBUF_DEPRECATED void set_allocated_entity_position(::improbable::platform::runtime::EntityPosition* entity_position);
  private:
  const ::improbable::platform::runtime::EntityPosition& _internal_entity_position() const;
  ::improbable::platform::runtime::EntityPosition* _internal_mutable_entity_position();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_entity_position(
      ::improbable::platform::runtime::EntityPosition* entity_position);
  PROTOBUF_DEPRECATED ::improbable::platform::runtime::EntityPosition* unsafe_arena_release_entity_position();

  // int64 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::RenderableComponent > renderable_components_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefab_;
  ::improbable::platform::runtime::EntityPosition* entity_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class EntityPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityPosition) */ {
 public:
  inline EntityPosition() : EntityPosition(nullptr) {}
  virtual ~EntityPosition();

  EntityPosition(const EntityPosition& from);
  EntityPosition(EntityPosition&& from) noexcept
    : EntityPosition() {
    *this = ::std::move(from);
  }

  inline EntityPosition& operator=(const EntityPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPosition& operator=(EntityPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPosition& default_instance();

  static inline const EntityPosition* internal_default_instance() {
    return reinterpret_cast<const EntityPosition*>(
               &_EntityPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityPosition& a, EntityPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPosition* New() const final {
    return CreateMaybeMessage<EntityPosition>(nullptr);
  }

  EntityPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPosition& from);
  void MergeFrom(const EntityPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityPosition";
  }
  protected:
  explicit EntityPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class RenderableComponent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.RenderableComponent) */ {
 public:
  inline RenderableComponent() : RenderableComponent(nullptr) {}
  virtual ~RenderableComponent();

  RenderableComponent(const RenderableComponent& from);
  RenderableComponent(RenderableComponent&& from) noexcept
    : RenderableComponent() {
    *this = ::std::move(from);
  }

  inline RenderableComponent& operator=(const RenderableComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderableComponent& operator=(RenderableComponent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenderableComponent& default_instance();

  static inline const RenderableComponent* internal_default_instance() {
    return reinterpret_cast<const RenderableComponent*>(
               &_RenderableComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RenderableComponent& a, RenderableComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderableComponent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderableComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderableComponent* New() const final {
    return CreateMaybeMessage<RenderableComponent>(nullptr);
  }

  RenderableComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderableComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenderableComponent& from);
  void MergeFrom(const RenderableComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderableComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.RenderableComponent";
  }
  protected:
  explicit RenderableComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kAssignedWorkerIdFieldNumber = 3,
    kComponentIdFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string assigned_worker_id = 3;
  void clear_assigned_worker_id();
  const std::string& assigned_worker_id() const;
  void set_assigned_worker_id(const std::string& value);
  void set_assigned_worker_id(std::string&& value);
  void set_assigned_worker_id(const char* value);
  void set_assigned_worker_id(const char* value, size_t size);
  std::string* mutable_assigned_worker_id();
  std::string* release_assigned_worker_id();
  void set_allocated_assigned_worker_id(std::string* assigned_worker_id);
  private:
  const std::string& _internal_assigned_worker_id() const;
  void _internal_set_assigned_worker_id(const std::string& value);
  std::string* _internal_mutable_assigned_worker_id();
  public:

  // uint32 component_id = 4;
  void clear_component_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 component_id() const;
  void set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component_id() const;
  void _internal_set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.RenderableComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assigned_worker_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 component_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class WorkerNodeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerNodeRequest) */ {
 public:
  inline WorkerNodeRequest() : WorkerNodeRequest(nullptr) {}
  virtual ~WorkerNodeRequest();

  WorkerNodeRequest(const WorkerNodeRequest& from);
  WorkerNodeRequest(WorkerNodeRequest&& from) noexcept
    : WorkerNodeRequest() {
    *this = ::std::move(from);
  }

  inline WorkerNodeRequest& operator=(const WorkerNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerNodeRequest& operator=(WorkerNodeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerNodeRequest& default_instance();

  static inline const WorkerNodeRequest* internal_default_instance() {
    return reinterpret_cast<const WorkerNodeRequest*>(
               &_WorkerNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkerNodeRequest& a, WorkerNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerNodeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerNodeRequest* New() const final {
    return CreateMaybeMessage<WorkerNodeRequest>(nullptr);
  }

  WorkerNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerNodeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerNodeRequest& from);
  void MergeFrom(const WorkerNodeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerNodeRequest";
  }
  protected:
  explicit WorkerNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIdFieldNumber = 1,
  };
  // string worker_id = 1;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class WorkerNodeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerNodeResponse) */ {
 public:
  inline WorkerNodeResponse() : WorkerNodeResponse(nullptr) {}
  virtual ~WorkerNodeResponse();

  WorkerNodeResponse(const WorkerNodeResponse& from);
  WorkerNodeResponse(WorkerNodeResponse&& from) noexcept
    : WorkerNodeResponse() {
    *this = ::std::move(from);
  }

  inline WorkerNodeResponse& operator=(const WorkerNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerNodeResponse& operator=(WorkerNodeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerNodeResponse& default_instance();

  static inline const WorkerNodeResponse* internal_default_instance() {
    return reinterpret_cast<const WorkerNodeResponse*>(
               &_WorkerNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorkerNodeResponse& a, WorkerNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerNodeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerNodeResponse* New() const final {
    return CreateMaybeMessage<WorkerNodeResponse>(nullptr);
  }

  WorkerNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerNodeResponse& from);
  void MergeFrom(const WorkerNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerNodeResponse";
  }
  protected:
  explicit WorkerNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
  };
  // string node_name = 1;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.DeleteWorkerRequest) */ {
 public:
  inline DeleteWorkerRequest() : DeleteWorkerRequest(nullptr) {}
  virtual ~DeleteWorkerRequest();

  DeleteWorkerRequest(const DeleteWorkerRequest& from);
  DeleteWorkerRequest(DeleteWorkerRequest&& from) noexcept
    : DeleteWorkerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteWorkerRequest& operator=(const DeleteWorkerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkerRequest& operator=(DeleteWorkerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteWorkerRequest& default_instance();

  static inline const DeleteWorkerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkerRequest*>(
               &_DeleteWorkerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteWorkerRequest& a, DeleteWorkerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteWorkerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteWorkerRequest* New() const final {
    return CreateMaybeMessage<DeleteWorkerRequest>(nullptr);
  }

  DeleteWorkerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteWorkerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteWorkerRequest& from);
  void MergeFrom(const DeleteWorkerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.DeleteWorkerRequest";
  }
  protected:
  explicit DeleteWorkerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIdFieldNumber = 1,
  };
  // string worker_id = 1;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.DeleteWorkerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class DeleteWorkerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.DeleteWorkerResponse) */ {
 public:
  inline DeleteWorkerResponse() : DeleteWorkerResponse(nullptr) {}
  virtual ~DeleteWorkerResponse();

  DeleteWorkerResponse(const DeleteWorkerResponse& from);
  DeleteWorkerResponse(DeleteWorkerResponse&& from) noexcept
    : DeleteWorkerResponse() {
    *this = ::std::move(from);
  }

  inline DeleteWorkerResponse& operator=(const DeleteWorkerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteWorkerResponse& operator=(DeleteWorkerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteWorkerResponse& default_instance();

  static inline const DeleteWorkerResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteWorkerResponse*>(
               &_DeleteWorkerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteWorkerResponse& a, DeleteWorkerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteWorkerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteWorkerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteWorkerResponse* New() const final {
    return CreateMaybeMessage<DeleteWorkerResponse>(nullptr);
  }

  DeleteWorkerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteWorkerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteWorkerResponse& from);
  void MergeFrom(const DeleteWorkerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteWorkerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.DeleteWorkerResponse";
  }
  protected:
  explicit DeleteWorkerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.DeleteWorkerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class DeleteEntitiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.DeleteEntitiesRequest) */ {
 public:
  inline DeleteEntitiesRequest() : DeleteEntitiesRequest(nullptr) {}
  virtual ~DeleteEntitiesRequest();

  DeleteEntitiesRequest(const DeleteEntitiesRequest& from);
  DeleteEntitiesRequest(DeleteEntitiesRequest&& from) noexcept
    : DeleteEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteEntitiesRequest& operator=(const DeleteEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEntitiesRequest& operator=(DeleteEntitiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEntitiesRequest& default_instance();

  static inline const DeleteEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteEntitiesRequest*>(
               &_DeleteEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteEntitiesRequest& a, DeleteEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEntitiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEntitiesRequest* New() const final {
    return CreateMaybeMessage<DeleteEntitiesRequest>(nullptr);
  }

  DeleteEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEntitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEntitiesRequest& from);
  void MergeFrom(const DeleteEntitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEntitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.DeleteEntitiesRequest";
  }
  protected:
  explicit DeleteEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdsFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.EntityId entity_ids = 1;
  int entity_ids_size() const;
  private:
  int _internal_entity_ids_size() const;
  public:
  void clear_entity_ids();
  ::improbable::platform::runtime::EntityId* mutable_entity_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::EntityId >*
      mutable_entity_ids();
  private:
  const ::improbable::platform::runtime::EntityId& _internal_entity_ids(int index) const;
  ::improbable::platform::runtime::EntityId* _internal_add_entity_ids();
  public:
  const ::improbable::platform::runtime::EntityId& entity_ids(int index) const;
  ::improbable::platform::runtime::EntityId* add_entity_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::EntityId >&
      entity_ids() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.DeleteEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::EntityId > entity_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class DeleteEntitiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.DeleteEntitiesResponse) */ {
 public:
  inline DeleteEntitiesResponse() : DeleteEntitiesResponse(nullptr) {}
  virtual ~DeleteEntitiesResponse();

  DeleteEntitiesResponse(const DeleteEntitiesResponse& from);
  DeleteEntitiesResponse(DeleteEntitiesResponse&& from) noexcept
    : DeleteEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline DeleteEntitiesResponse& operator=(const DeleteEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteEntitiesResponse& operator=(DeleteEntitiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteEntitiesResponse& default_instance();

  static inline const DeleteEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteEntitiesResponse*>(
               &_DeleteEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteEntitiesResponse& a, DeleteEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteEntitiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteEntitiesResponse* New() const final {
    return CreateMaybeMessage<DeleteEntitiesResponse>(nullptr);
  }

  DeleteEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteEntitiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteEntitiesResponse& from);
  void MergeFrom(const DeleteEntitiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteEntitiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.DeleteEntitiesResponse";
  }
  protected:
  explicit DeleteEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.DeleteEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class Heatmap_Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.Heatmap.Cell) */ {
 public:
  inline Heatmap_Cell() : Heatmap_Cell(nullptr) {}
  virtual ~Heatmap_Cell();

  Heatmap_Cell(const Heatmap_Cell& from);
  Heatmap_Cell(Heatmap_Cell&& from) noexcept
    : Heatmap_Cell() {
    *this = ::std::move(from);
  }

  inline Heatmap_Cell& operator=(const Heatmap_Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heatmap_Cell& operator=(Heatmap_Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heatmap_Cell& default_instance();

  static inline const Heatmap_Cell* internal_default_instance() {
    return reinterpret_cast<const Heatmap_Cell*>(
               &_Heatmap_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Heatmap_Cell& a, Heatmap_Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Heatmap_Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heatmap_Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heatmap_Cell* New() const final {
    return CreateMaybeMessage<Heatmap_Cell>(nullptr);
  }

  Heatmap_Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heatmap_Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heatmap_Cell& from);
  void MergeFrom(const Heatmap_Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heatmap_Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.Heatmap.Cell";
  }
  protected:
  explicit Heatmap_Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentFieldNumber = 2,
    kEntityCountFieldNumber = 1,
  };
  // .improbable.platform.runtime.Rectangle extent = 2;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::improbable::platform::runtime::Rectangle& extent() const;
  ::improbable::platform::runtime::Rectangle* release_extent();
  ::improbable::platform::runtime::Rectangle* mutable_extent();
  void set_allocated_extent(::improbable::platform::runtime::Rectangle* extent);
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_extent() const;
  ::improbable::platform::runtime::Rectangle* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::improbable::platform::runtime::Rectangle* extent);
  ::improbable::platform::runtime::Rectangle* unsafe_arena_release_extent();

  // int64 entity_count = 1;
  void clear_entity_count();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_count() const;
  void set_entity_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_count() const;
  void _internal_set_entity_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.Heatmap.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Rectangle* extent_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class Heatmap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.Heatmap) */ {
 public:
  inline Heatmap() : Heatmap(nullptr) {}
  virtual ~Heatmap();

  Heatmap(const Heatmap& from);
  Heatmap(Heatmap&& from) noexcept
    : Heatmap() {
    *this = ::std::move(from);
  }

  inline Heatmap& operator=(const Heatmap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heatmap& operator=(Heatmap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heatmap& default_instance();

  static inline const Heatmap* internal_default_instance() {
    return reinterpret_cast<const Heatmap*>(
               &_Heatmap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Heatmap& a, Heatmap& b) {
    a.Swap(&b);
  }
  inline void Swap(Heatmap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heatmap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heatmap* New() const final {
    return CreateMaybeMessage<Heatmap>(nullptr);
  }

  Heatmap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heatmap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heatmap& from);
  void MergeFrom(const Heatmap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heatmap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.Heatmap";
  }
  protected:
  explicit Heatmap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Heatmap_Cell Cell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.Heatmap.Cell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::improbable::platform::runtime::Heatmap_Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Heatmap_Cell >*
      mutable_cells();
  private:
  const ::improbable::platform::runtime::Heatmap_Cell& _internal_cells(int index) const;
  ::improbable::platform::runtime::Heatmap_Cell* _internal_add_cells();
  public:
  const ::improbable::platform::runtime::Heatmap_Cell& cells(int index) const;
  ::improbable::platform::runtime::Heatmap_Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Heatmap_Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.Heatmap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Heatmap_Cell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class EntityHeatmapOptions_Resolution_ChunkResolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityHeatmapOptions.Resolution.ChunkResolution) */ {
 public:
  inline EntityHeatmapOptions_Resolution_ChunkResolution() : EntityHeatmapOptions_Resolution_ChunkResolution(nullptr) {}
  virtual ~EntityHeatmapOptions_Resolution_ChunkResolution();

  EntityHeatmapOptions_Resolution_ChunkResolution(const EntityHeatmapOptions_Resolution_ChunkResolution& from);
  EntityHeatmapOptions_Resolution_ChunkResolution(EntityHeatmapOptions_Resolution_ChunkResolution&& from) noexcept
    : EntityHeatmapOptions_Resolution_ChunkResolution() {
    *this = ::std::move(from);
  }

  inline EntityHeatmapOptions_Resolution_ChunkResolution& operator=(const EntityHeatmapOptions_Resolution_ChunkResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityHeatmapOptions_Resolution_ChunkResolution& operator=(EntityHeatmapOptions_Resolution_ChunkResolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityHeatmapOptions_Resolution_ChunkResolution& default_instance();

  static inline const EntityHeatmapOptions_Resolution_ChunkResolution* internal_default_instance() {
    return reinterpret_cast<const EntityHeatmapOptions_Resolution_ChunkResolution*>(
               &_EntityHeatmapOptions_Resolution_ChunkResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EntityHeatmapOptions_Resolution_ChunkResolution& a, EntityHeatmapOptions_Resolution_ChunkResolution& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityHeatmapOptions_Resolution_ChunkResolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityHeatmapOptions_Resolution_ChunkResolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityHeatmapOptions_Resolution_ChunkResolution* New() const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution_ChunkResolution>(nullptr);
  }

  EntityHeatmapOptions_Resolution_ChunkResolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution_ChunkResolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityHeatmapOptions_Resolution_ChunkResolution& from);
  void MergeFrom(const EntityHeatmapOptions_Resolution_ChunkResolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityHeatmapOptions_Resolution_ChunkResolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityHeatmapOptions.Resolution.ChunkResolution";
  }
  protected:
  explicit EntityHeatmapOptions_Resolution_ChunkResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityHeatmapOptions.Resolution.ChunkResolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class EntityHeatmapOptions_Resolution_SquareGridResolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution) */ {
 public:
  inline EntityHeatmapOptions_Resolution_SquareGridResolution() : EntityHeatmapOptions_Resolution_SquareGridResolution(nullptr) {}
  virtual ~EntityHeatmapOptions_Resolution_SquareGridResolution();

  EntityHeatmapOptions_Resolution_SquareGridResolution(const EntityHeatmapOptions_Resolution_SquareGridResolution& from);
  EntityHeatmapOptions_Resolution_SquareGridResolution(EntityHeatmapOptions_Resolution_SquareGridResolution&& from) noexcept
    : EntityHeatmapOptions_Resolution_SquareGridResolution() {
    *this = ::std::move(from);
  }

  inline EntityHeatmapOptions_Resolution_SquareGridResolution& operator=(const EntityHeatmapOptions_Resolution_SquareGridResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityHeatmapOptions_Resolution_SquareGridResolution& operator=(EntityHeatmapOptions_Resolution_SquareGridResolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityHeatmapOptions_Resolution_SquareGridResolution& default_instance();

  static inline const EntityHeatmapOptions_Resolution_SquareGridResolution* internal_default_instance() {
    return reinterpret_cast<const EntityHeatmapOptions_Resolution_SquareGridResolution*>(
               &_EntityHeatmapOptions_Resolution_SquareGridResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EntityHeatmapOptions_Resolution_SquareGridResolution& a, EntityHeatmapOptions_Resolution_SquareGridResolution& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityHeatmapOptions_Resolution_SquareGridResolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityHeatmapOptions_Resolution_SquareGridResolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityHeatmapOptions_Resolution_SquareGridResolution* New() const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution_SquareGridResolution>(nullptr);
  }

  EntityHeatmapOptions_Resolution_SquareGridResolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution_SquareGridResolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityHeatmapOptions_Resolution_SquareGridResolution& from);
  void MergeFrom(const EntityHeatmapOptions_Resolution_SquareGridResolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityHeatmapOptions_Resolution_SquareGridResolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution";
  }
  protected:
  explicit EntityHeatmapOptions_Resolution_SquareGridResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeLengthFieldNumber = 1,
  };
  // int32 edge_length = 1;
  void clear_edge_length();
  ::PROTOBUF_NAMESPACE_ID::int32 edge_length() const;
  void set_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_edge_length() const;
  void _internal_set_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 edge_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class EntityHeatmapOptions_Resolution_AutoResolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution) */ {
 public:
  inline EntityHeatmapOptions_Resolution_AutoResolution() : EntityHeatmapOptions_Resolution_AutoResolution(nullptr) {}
  virtual ~EntityHeatmapOptions_Resolution_AutoResolution();

  EntityHeatmapOptions_Resolution_AutoResolution(const EntityHeatmapOptions_Resolution_AutoResolution& from);
  EntityHeatmapOptions_Resolution_AutoResolution(EntityHeatmapOptions_Resolution_AutoResolution&& from) noexcept
    : EntityHeatmapOptions_Resolution_AutoResolution() {
    *this = ::std::move(from);
  }

  inline EntityHeatmapOptions_Resolution_AutoResolution& operator=(const EntityHeatmapOptions_Resolution_AutoResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityHeatmapOptions_Resolution_AutoResolution& operator=(EntityHeatmapOptions_Resolution_AutoResolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityHeatmapOptions_Resolution_AutoResolution& default_instance();

  static inline const EntityHeatmapOptions_Resolution_AutoResolution* internal_default_instance() {
    return reinterpret_cast<const EntityHeatmapOptions_Resolution_AutoResolution*>(
               &_EntityHeatmapOptions_Resolution_AutoResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EntityHeatmapOptions_Resolution_AutoResolution& a, EntityHeatmapOptions_Resolution_AutoResolution& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityHeatmapOptions_Resolution_AutoResolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityHeatmapOptions_Resolution_AutoResolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityHeatmapOptions_Resolution_AutoResolution* New() const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution_AutoResolution>(nullptr);
  }

  EntityHeatmapOptions_Resolution_AutoResolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution_AutoResolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityHeatmapOptions_Resolution_AutoResolution& from);
  void MergeFrom(const EntityHeatmapOptions_Resolution_AutoResolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityHeatmapOptions_Resolution_AutoResolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution";
  }
  protected:
  explicit EntityHeatmapOptions_Resolution_AutoResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxCellsFieldNumber = 1,
  };
  // int32 max_cells = 1;
  void clear_max_cells();
  ::PROTOBUF_NAMESPACE_ID::int32 max_cells() const;
  void set_max_cells(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_cells() const;
  void _internal_set_max_cells(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class EntityHeatmapOptions_Resolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityHeatmapOptions.Resolution) */ {
 public:
  inline EntityHeatmapOptions_Resolution() : EntityHeatmapOptions_Resolution(nullptr) {}
  virtual ~EntityHeatmapOptions_Resolution();

  EntityHeatmapOptions_Resolution(const EntityHeatmapOptions_Resolution& from);
  EntityHeatmapOptions_Resolution(EntityHeatmapOptions_Resolution&& from) noexcept
    : EntityHeatmapOptions_Resolution() {
    *this = ::std::move(from);
  }

  inline EntityHeatmapOptions_Resolution& operator=(const EntityHeatmapOptions_Resolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityHeatmapOptions_Resolution& operator=(EntityHeatmapOptions_Resolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityHeatmapOptions_Resolution& default_instance();

  enum ResolutionTypeCase {
    kAsChunks = 1,
    kSquareGrid = 2,
    kAutoResolution = 3,
    RESOLUTION_TYPE_NOT_SET = 0,
  };

  static inline const EntityHeatmapOptions_Resolution* internal_default_instance() {
    return reinterpret_cast<const EntityHeatmapOptions_Resolution*>(
               &_EntityHeatmapOptions_Resolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EntityHeatmapOptions_Resolution& a, EntityHeatmapOptions_Resolution& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityHeatmapOptions_Resolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityHeatmapOptions_Resolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityHeatmapOptions_Resolution* New() const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution>(nullptr);
  }

  EntityHeatmapOptions_Resolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityHeatmapOptions_Resolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityHeatmapOptions_Resolution& from);
  void MergeFrom(const EntityHeatmapOptions_Resolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityHeatmapOptions_Resolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityHeatmapOptions.Resolution";
  }
  protected:
  explicit EntityHeatmapOptions_Resolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EntityHeatmapOptions_Resolution_ChunkResolution ChunkResolution;
  typedef EntityHeatmapOptions_Resolution_SquareGridResolution SquareGridResolution;
  typedef EntityHeatmapOptions_Resolution_AutoResolution AutoResolution;

  // accessors -------------------------------------------------------

  enum : int {
    kAsChunksFieldNumber = 1,
    kSquareGridFieldNumber = 2,
    kAutoResolutionFieldNumber = 3,
  };
  // .improbable.platform.runtime.EntityHeatmapOptions.Resolution.ChunkResolution as_chunks = 1;
  bool has_as_chunks() const;
  private:
  bool _internal_has_as_chunks() const;
  public:
  void clear_as_chunks();
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution& as_chunks() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* release_as_chunks();
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* mutable_as_chunks();
  void set_allocated_as_chunks(::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* as_chunks);
  private:
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution& _internal_as_chunks() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* _internal_mutable_as_chunks();
  public:
  void unsafe_arena_set_allocated_as_chunks(
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* as_chunks);
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* unsafe_arena_release_as_chunks();

  // .improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution square_grid = 2;
  bool has_square_grid() const;
  private:
  bool _internal_has_square_grid() const;
  public:
  void clear_square_grid();
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution& square_grid() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* release_square_grid();
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* mutable_square_grid();
  void set_allocated_square_grid(::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* square_grid);
  private:
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution& _internal_square_grid() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* _internal_mutable_square_grid();
  public:
  void unsafe_arena_set_allocated_square_grid(
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* square_grid);
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* unsafe_arena_release_square_grid();

  // .improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution auto_resolution = 3;
  bool has_auto_resolution() const;
  private:
  bool _internal_has_auto_resolution() const;
  public:
  void clear_auto_resolution();
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution& auto_resolution() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* release_auto_resolution();
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* mutable_auto_resolution();
  void set_allocated_auto_resolution(::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* auto_resolution);
  private:
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution& _internal_auto_resolution() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* _internal_mutable_auto_resolution();
  public:
  void unsafe_arena_set_allocated_auto_resolution(
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* auto_resolution);
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* unsafe_arena_release_auto_resolution();

  void clear_resolution_type();
  ResolutionTypeCase resolution_type_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityHeatmapOptions.Resolution)
 private:
  class _Internal;
  void set_has_as_chunks();
  void set_has_square_grid();
  void set_has_auto_resolution();

  inline bool has_resolution_type() const;
  inline void clear_has_resolution_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResolutionTypeUnion {
    ResolutionTypeUnion() {}
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* as_chunks_;
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* square_grid_;
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* auto_resolution_;
  } resolution_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class EntityHeatmapOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityHeatmapOptions) */ {
 public:
  inline EntityHeatmapOptions() : EntityHeatmapOptions(nullptr) {}
  virtual ~EntityHeatmapOptions();

  EntityHeatmapOptions(const EntityHeatmapOptions& from);
  EntityHeatmapOptions(EntityHeatmapOptions&& from) noexcept
    : EntityHeatmapOptions() {
    *this = ::std::move(from);
  }

  inline EntityHeatmapOptions& operator=(const EntityHeatmapOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityHeatmapOptions& operator=(EntityHeatmapOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityHeatmapOptions& default_instance();

  static inline const EntityHeatmapOptions* internal_default_instance() {
    return reinterpret_cast<const EntityHeatmapOptions*>(
               &_EntityHeatmapOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EntityHeatmapOptions& a, EntityHeatmapOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityHeatmapOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityHeatmapOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityHeatmapOptions* New() const final {
    return CreateMaybeMessage<EntityHeatmapOptions>(nullptr);
  }

  EntityHeatmapOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityHeatmapOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityHeatmapOptions& from);
  void MergeFrom(const EntityHeatmapOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityHeatmapOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityHeatmapOptions";
  }
  protected:
  explicit EntityHeatmapOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EntityHeatmapOptions_Resolution Resolution;

  // accessors -------------------------------------------------------

  enum : int {
    kViewportFieldNumber = 1,
    kResolutionFieldNumber = 2,
  };
  // .improbable.platform.runtime.Rectangle viewport = 1;
  bool has_viewport() const;
  private:
  bool _internal_has_viewport() const;
  public:
  void clear_viewport();
  const ::improbable::platform::runtime::Rectangle& viewport() const;
  ::improbable::platform::runtime::Rectangle* release_viewport();
  ::improbable::platform::runtime::Rectangle* mutable_viewport();
  void set_allocated_viewport(::improbable::platform::runtime::Rectangle* viewport);
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_viewport() const;
  ::improbable::platform::runtime::Rectangle* _internal_mutable_viewport();
  public:
  void unsafe_arena_set_allocated_viewport(
      ::improbable::platform::runtime::Rectangle* viewport);
  ::improbable::platform::runtime::Rectangle* unsafe_arena_release_viewport();

  // .improbable.platform.runtime.EntityHeatmapOptions.Resolution resolution = 2;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution& resolution() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* release_resolution();
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* mutable_resolution();
  void set_allocated_resolution(::improbable::platform::runtime::EntityHeatmapOptions_Resolution* resolution);
  private:
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution& _internal_resolution() const;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* resolution);
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* unsafe_arena_release_resolution();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityHeatmapOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Rectangle* viewport_;
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetEntityHeatmapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetEntityHeatmapRequest) */ {
 public:
  inline GetEntityHeatmapRequest() : GetEntityHeatmapRequest(nullptr) {}
  virtual ~GetEntityHeatmapRequest();

  GetEntityHeatmapRequest(const GetEntityHeatmapRequest& from);
  GetEntityHeatmapRequest(GetEntityHeatmapRequest&& from) noexcept
    : GetEntityHeatmapRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityHeatmapRequest& operator=(const GetEntityHeatmapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityHeatmapRequest& operator=(GetEntityHeatmapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityHeatmapRequest& default_instance();

  static inline const GetEntityHeatmapRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityHeatmapRequest*>(
               &_GetEntityHeatmapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetEntityHeatmapRequest& a, GetEntityHeatmapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityHeatmapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityHeatmapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityHeatmapRequest* New() const final {
    return CreateMaybeMessage<GetEntityHeatmapRequest>(nullptr);
  }

  GetEntityHeatmapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityHeatmapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityHeatmapRequest& from);
  void MergeFrom(const GetEntityHeatmapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityHeatmapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetEntityHeatmapRequest";
  }
  protected:
  explicit GetEntityHeatmapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityHeatmapOptionsFieldNumber = 1,
    kDesiredResponseIntervalMsFieldNumber = 2,
  };
  // .improbable.platform.runtime.EntityHeatmapOptions entity_heatmap_options = 1;
  bool has_entity_heatmap_options() const;
  private:
  bool _internal_has_entity_heatmap_options() const;
  public:
  void clear_entity_heatmap_options();
  const ::improbable::platform::runtime::EntityHeatmapOptions& entity_heatmap_options() const;
  ::improbable::platform::runtime::EntityHeatmapOptions* release_entity_heatmap_options();
  ::improbable::platform::runtime::EntityHeatmapOptions* mutable_entity_heatmap_options();
  void set_allocated_entity_heatmap_options(::improbable::platform::runtime::EntityHeatmapOptions* entity_heatmap_options);
  private:
  const ::improbable::platform::runtime::EntityHeatmapOptions& _internal_entity_heatmap_options() const;
  ::improbable::platform::runtime::EntityHeatmapOptions* _internal_mutable_entity_heatmap_options();
  public:
  void unsafe_arena_set_allocated_entity_heatmap_options(
      ::improbable::platform::runtime::EntityHeatmapOptions* entity_heatmap_options);
  ::improbable::platform::runtime::EntityHeatmapOptions* unsafe_arena_release_entity_heatmap_options();

  // int64 desired_response_interval_ms = 2;
  void clear_desired_response_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 desired_response_interval_ms() const;
  void set_desired_response_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_desired_response_interval_ms() const;
  void _internal_set_desired_response_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetEntityHeatmapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::EntityHeatmapOptions* entity_heatmap_options_;
  ::PROTOBUF_NAMESPACE_ID::int64 desired_response_interval_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetEntityHeatmapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetEntityHeatmapResponse) */ {
 public:
  inline GetEntityHeatmapResponse() : GetEntityHeatmapResponse(nullptr) {}
  virtual ~GetEntityHeatmapResponse();

  GetEntityHeatmapResponse(const GetEntityHeatmapResponse& from);
  GetEntityHeatmapResponse(GetEntityHeatmapResponse&& from) noexcept
    : GetEntityHeatmapResponse() {
    *this = ::std::move(from);
  }

  inline GetEntityHeatmapResponse& operator=(const GetEntityHeatmapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityHeatmapResponse& operator=(GetEntityHeatmapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityHeatmapResponse& default_instance();

  static inline const GetEntityHeatmapResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntityHeatmapResponse*>(
               &_GetEntityHeatmapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetEntityHeatmapResponse& a, GetEntityHeatmapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityHeatmapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityHeatmapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityHeatmapResponse* New() const final {
    return CreateMaybeMessage<GetEntityHeatmapResponse>(nullptr);
  }

  GetEntityHeatmapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityHeatmapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityHeatmapResponse& from);
  void MergeFrom(const GetEntityHeatmapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityHeatmapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetEntityHeatmapResponse";
  }
  protected:
  explicit GetEntityHeatmapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeatmapFieldNumber = 1,
    kQueryCostFieldNumber = 2,
  };
  // .improbable.platform.runtime.Heatmap heatmap = 1;
  bool has_heatmap() const;
  private:
  bool _internal_has_heatmap() const;
  public:
  void clear_heatmap();
  const ::improbable::platform::runtime::Heatmap& heatmap() const;
  ::improbable::platform::runtime::Heatmap* release_heatmap();
  ::improbable::platform::runtime::Heatmap* mutable_heatmap();
  void set_allocated_heatmap(::improbable::platform::runtime::Heatmap* heatmap);
  private:
  const ::improbable::platform::runtime::Heatmap& _internal_heatmap() const;
  ::improbable::platform::runtime::Heatmap* _internal_mutable_heatmap();
  public:
  void unsafe_arena_set_allocated_heatmap(
      ::improbable::platform::runtime::Heatmap* heatmap);
  ::improbable::platform::runtime::Heatmap* unsafe_arena_release_heatmap();

  // float query_cost = 2;
  void clear_query_cost();
  float query_cost() const;
  void set_query_cost(float value);
  private:
  float _internal_query_cost() const;
  void _internal_set_query_cost(float value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetEntityHeatmapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Heatmap* heatmap_;
  float query_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetEntityDetailsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetEntityDetailsRequest) */ {
 public:
  inline GetEntityDetailsRequest() : GetEntityDetailsRequest(nullptr) {}
  virtual ~GetEntityDetailsRequest();

  GetEntityDetailsRequest(const GetEntityDetailsRequest& from);
  GetEntityDetailsRequest(GetEntityDetailsRequest&& from) noexcept
    : GetEntityDetailsRequest() {
    *this = ::std::move(from);
  }

  inline GetEntityDetailsRequest& operator=(const GetEntityDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityDetailsRequest& operator=(GetEntityDetailsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityDetailsRequest& default_instance();

  static inline const GetEntityDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEntityDetailsRequest*>(
               &_GetEntityDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetEntityDetailsRequest& a, GetEntityDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityDetailsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityDetailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityDetailsRequest* New() const final {
    return CreateMaybeMessage<GetEntityDetailsRequest>(nullptr);
  }

  GetEntityDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityDetailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityDetailsRequest& from);
  void MergeFrom(const GetEntityDetailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityDetailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetEntityDetailsRequest";
  }
  protected:
  explicit GetEntityDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
  };
  // int64 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetEntityDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetEntityDetailsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetEntityDetailsResponse) */ {
 public:
  inline GetEntityDetailsResponse() : GetEntityDetailsResponse(nullptr) {}
  virtual ~GetEntityDetailsResponse();

  GetEntityDetailsResponse(const GetEntityDetailsResponse& from);
  GetEntityDetailsResponse(GetEntityDetailsResponse&& from) noexcept
    : GetEntityDetailsResponse() {
    *this = ::std::move(from);
  }

  inline GetEntityDetailsResponse& operator=(const GetEntityDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEntityDetailsResponse& operator=(GetEntityDetailsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEntityDetailsResponse& default_instance();

  static inline const GetEntityDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const GetEntityDetailsResponse*>(
               &_GetEntityDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetEntityDetailsResponse& a, GetEntityDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEntityDetailsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEntityDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEntityDetailsResponse* New() const final {
    return CreateMaybeMessage<GetEntityDetailsResponse>(nullptr);
  }

  GetEntityDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEntityDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEntityDetailsResponse& from);
  void MergeFrom(const GetEntityDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEntityDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetEntityDetailsResponse";
  }
  protected:
  explicit GetEntityDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityDataFieldNumber = 1,
  };
  // .improbable.platform.runtime.EntityData entity_data = 1;
  bool has_entity_data() const;
  private:
  bool _internal_has_entity_data() const;
  public:
  void clear_entity_data();
  const ::improbable::platform::runtime::EntityData& entity_data() const;
  ::improbable::platform::runtime::EntityData* release_entity_data();
  ::improbable::platform::runtime::EntityData* mutable_entity_data();
  void set_allocated_entity_data(::improbable::platform::runtime::EntityData* entity_data);
  private:
  const ::improbable::platform::runtime::EntityData& _internal_entity_data() const;
  ::improbable::platform::runtime::EntityData* _internal_mutable_entity_data();
  public:
  void unsafe_arena_set_allocated_entity_data(
      ::improbable::platform::runtime::EntityData* entity_data);
  ::improbable::platform::runtime::EntityData* unsafe_arena_release_entity_data();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetEntityDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::EntityData* entity_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetAllWorkersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetAllWorkersRequest) */ {
 public:
  inline GetAllWorkersRequest() : GetAllWorkersRequest(nullptr) {}
  virtual ~GetAllWorkersRequest();

  GetAllWorkersRequest(const GetAllWorkersRequest& from);
  GetAllWorkersRequest(GetAllWorkersRequest&& from) noexcept
    : GetAllWorkersRequest() {
    *this = ::std::move(from);
  }

  inline GetAllWorkersRequest& operator=(const GetAllWorkersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllWorkersRequest& operator=(GetAllWorkersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllWorkersRequest& default_instance();

  static inline const GetAllWorkersRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllWorkersRequest*>(
               &_GetAllWorkersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetAllWorkersRequest& a, GetAllWorkersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllWorkersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllWorkersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllWorkersRequest* New() const final {
    return CreateMaybeMessage<GetAllWorkersRequest>(nullptr);
  }

  GetAllWorkersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllWorkersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllWorkersRequest& from);
  void MergeFrom(const GetAllWorkersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllWorkersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetAllWorkersRequest";
  }
  protected:
  explicit GetAllWorkersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetAllWorkersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetAllWorkersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetAllWorkersResponse) */ {
 public:
  inline GetAllWorkersResponse() : GetAllWorkersResponse(nullptr) {}
  virtual ~GetAllWorkersResponse();

  GetAllWorkersResponse(const GetAllWorkersResponse& from);
  GetAllWorkersResponse(GetAllWorkersResponse&& from) noexcept
    : GetAllWorkersResponse() {
    *this = ::std::move(from);
  }

  inline GetAllWorkersResponse& operator=(const GetAllWorkersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllWorkersResponse& operator=(GetAllWorkersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllWorkersResponse& default_instance();

  static inline const GetAllWorkersResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllWorkersResponse*>(
               &_GetAllWorkersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAllWorkersResponse& a, GetAllWorkersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllWorkersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllWorkersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllWorkersResponse* New() const final {
    return CreateMaybeMessage<GetAllWorkersResponse>(nullptr);
  }

  GetAllWorkersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllWorkersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllWorkersResponse& from);
  void MergeFrom(const GetAllWorkersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllWorkersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetAllWorkersResponse";
  }
  protected:
  explicit GetAllWorkersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerSummariesFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.WorkerSummary worker_summaries = 1;
  int worker_summaries_size() const;
  private:
  int _internal_worker_summaries_size() const;
  public:
  void clear_worker_summaries();
  ::improbable::platform::runtime::WorkerSummary* mutable_worker_summaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerSummary >*
      mutable_worker_summaries();
  private:
  const ::improbable::platform::runtime::WorkerSummary& _internal_worker_summaries(int index) const;
  ::improbable::platform::runtime::WorkerSummary* _internal_add_worker_summaries();
  public:
  const ::improbable::platform::runtime::WorkerSummary& worker_summaries(int index) const;
  ::improbable::platform::runtime::WorkerSummary* add_worker_summaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerSummary >&
      worker_summaries() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetAllWorkersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerSummary > worker_summaries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class WorkerSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerSummary) */ {
 public:
  inline WorkerSummary() : WorkerSummary(nullptr) {}
  virtual ~WorkerSummary();

  WorkerSummary(const WorkerSummary& from);
  WorkerSummary(WorkerSummary&& from) noexcept
    : WorkerSummary() {
    *this = ::std::move(from);
  }

  inline WorkerSummary& operator=(const WorkerSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerSummary& operator=(WorkerSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerSummary& default_instance();

  static inline const WorkerSummary* internal_default_instance() {
    return reinterpret_cast<const WorkerSummary*>(
               &_WorkerSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WorkerSummary& a, WorkerSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerSummary* New() const final {
    return CreateMaybeMessage<WorkerSummary>(nullptr);
  }

  WorkerSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerSummary& from);
  void MergeFrom(const WorkerSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerSummary";
  }
  protected:
  explicit WorkerSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIdFieldNumber = 1,
    kWorkerNameFieldNumber = 4,
    kPositionFieldNumber = 2,
    kLoadbalancingStatusFieldNumber = 3,
  };
  // string worker_id = 1;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // string worker_name = 4;
  void clear_worker_name();
  const std::string& worker_name() const;
  void set_worker_name(const std::string& value);
  void set_worker_name(std::string&& value);
  void set_worker_name(const char* value);
  void set_worker_name(const char* value, size_t size);
  std::string* mutable_worker_name();
  std::string* release_worker_name();
  void set_allocated_worker_name(std::string* worker_name);
  private:
  const std::string& _internal_worker_name() const;
  void _internal_set_worker_name(const std::string& value);
  std::string* _internal_mutable_worker_name();
  public:

  // .improbable.platform.runtime.Point position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::improbable::platform::runtime::Point& position() const;
  ::improbable::platform::runtime::Point* release_position();
  ::improbable::platform::runtime::Point* mutable_position();
  void set_allocated_position(::improbable::platform::runtime::Point* position);
  private:
  const ::improbable::platform::runtime::Point& _internal_position() const;
  ::improbable::platform::runtime::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::improbable::platform::runtime::Point* position);
  ::improbable::platform::runtime::Point* unsafe_arena_release_position();

  // .improbable.platform.runtime.WorkerLoadbalancingStatus loadbalancing_status = 3;
  bool has_loadbalancing_status() const;
  private:
  bool _internal_has_loadbalancing_status() const;
  public:
  void clear_loadbalancing_status();
  const ::improbable::platform::runtime::WorkerLoadbalancingStatus& loadbalancing_status() const;
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* release_loadbalancing_status();
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* mutable_loadbalancing_status();
  void set_allocated_loadbalancing_status(::improbable::platform::runtime::WorkerLoadbalancingStatus* loadbalancing_status);
  private:
  const ::improbable::platform::runtime::WorkerLoadbalancingStatus& _internal_loadbalancing_status() const;
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* _internal_mutable_loadbalancing_status();
  public:
  void unsafe_arena_set_allocated_loadbalancing_status(
      ::improbable::platform::runtime::WorkerLoadbalancingStatus* loadbalancing_status);
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* unsafe_arena_release_loadbalancing_status();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_name_;
  ::improbable::platform::runtime::Point* position_;
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* loadbalancing_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class WorkerLoadbalancingStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerLoadbalancingStatus) */ {
 public:
  inline WorkerLoadbalancingStatus() : WorkerLoadbalancingStatus(nullptr) {}
  virtual ~WorkerLoadbalancingStatus();

  WorkerLoadbalancingStatus(const WorkerLoadbalancingStatus& from);
  WorkerLoadbalancingStatus(WorkerLoadbalancingStatus&& from) noexcept
    : WorkerLoadbalancingStatus() {
    *this = ::std::move(from);
  }

  inline WorkerLoadbalancingStatus& operator=(const WorkerLoadbalancingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerLoadbalancingStatus& operator=(WorkerLoadbalancingStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerLoadbalancingStatus& default_instance();

  static inline const WorkerLoadbalancingStatus* internal_default_instance() {
    return reinterpret_cast<const WorkerLoadbalancingStatus*>(
               &_WorkerLoadbalancingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WorkerLoadbalancingStatus& a, WorkerLoadbalancingStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerLoadbalancingStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerLoadbalancingStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerLoadbalancingStatus* New() const final {
    return CreateMaybeMessage<WorkerLoadbalancingStatus>(nullptr);
  }

  WorkerLoadbalancingStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerLoadbalancingStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerLoadbalancingStatus& from);
  void MergeFrom(const WorkerLoadbalancingStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerLoadbalancingStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerLoadbalancingStatus";
  }
  protected:
  explicit WorkerLoadbalancingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkerLoadbalancingStatus_LoadCategory LoadCategory;
  static constexpr LoadCategory UNKNOWN =
    WorkerLoadbalancingStatus_LoadCategory_UNKNOWN;
  static constexpr LoadCategory UNDERLOADED =
    WorkerLoadbalancingStatus_LoadCategory_UNDERLOADED;
  static constexpr LoadCategory NORMAL =
    WorkerLoadbalancingStatus_LoadCategory_NORMAL;
  static constexpr LoadCategory OVERLOADED =
    WorkerLoadbalancingStatus_LoadCategory_OVERLOADED;
  static inline bool LoadCategory_IsValid(int value) {
    return WorkerLoadbalancingStatus_LoadCategory_IsValid(value);
  }
  static constexpr LoadCategory LoadCategory_MIN =
    WorkerLoadbalancingStatus_LoadCategory_LoadCategory_MIN;
  static constexpr LoadCategory LoadCategory_MAX =
    WorkerLoadbalancingStatus_LoadCategory_LoadCategory_MAX;
  static constexpr int LoadCategory_ARRAYSIZE =
    WorkerLoadbalancingStatus_LoadCategory_LoadCategory_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoadCategory_descriptor() {
    return WorkerLoadbalancingStatus_LoadCategory_descriptor();
  }
  template<typename T>
  static inline const std::string& LoadCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoadCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoadCategory_Name.");
    return WorkerLoadbalancingStatus_LoadCategory_Name(enum_t_value);
  }
  static inline bool LoadCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LoadCategory* value) {
    return WorkerLoadbalancingStatus_LoadCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoadValueFieldNumber = 2,
    kLoadCategoryFieldNumber = 1,
  };
  // double load_value = 2;
  void clear_load_value();
  double load_value() const;
  void set_load_value(double value);
  private:
  double _internal_load_value() const;
  void _internal_set_load_value(double value);
  public:

  // .improbable.platform.runtime.WorkerLoadbalancingStatus.LoadCategory load_category = 1;
  void clear_load_category();
  ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory load_category() const;
  void set_load_category(::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory value);
  private:
  ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory _internal_load_category() const;
  void _internal_set_load_category(::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerLoadbalancingStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double load_value_;
  int load_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerDetailsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorkerDetailsRequest) */ {
 public:
  inline GetWorkerDetailsRequest() : GetWorkerDetailsRequest(nullptr) {}
  virtual ~GetWorkerDetailsRequest();

  GetWorkerDetailsRequest(const GetWorkerDetailsRequest& from);
  GetWorkerDetailsRequest(GetWorkerDetailsRequest&& from) noexcept
    : GetWorkerDetailsRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkerDetailsRequest& operator=(const GetWorkerDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerDetailsRequest& operator=(GetWorkerDetailsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerDetailsRequest& default_instance();

  static inline const GetWorkerDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkerDetailsRequest*>(
               &_GetWorkerDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetWorkerDetailsRequest& a, GetWorkerDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerDetailsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerDetailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerDetailsRequest* New() const final {
    return CreateMaybeMessage<GetWorkerDetailsRequest>(nullptr);
  }

  GetWorkerDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerDetailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerDetailsRequest& from);
  void MergeFrom(const GetWorkerDetailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerDetailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorkerDetailsRequest";
  }
  protected:
  explicit GetWorkerDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIdFieldNumber = 1,
    kFieldMaskFieldNumber = 2,
  };
  // string worker_id = 1;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // .google.protobuf.FieldMask field_mask = 2;
  bool has_field_mask() const;
  private:
  bool _internal_has_field_mask() const;
  public:
  void clear_field_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_field_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_field_mask();
  void set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_field_mask();
  public:
  void unsafe_arena_set_allocated_field_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_field_mask();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorkerDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  PROTOBUF_NAMESPACE_ID::FieldMask* field_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerDetailsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorkerDetailsResponse) */ {
 public:
  inline GetWorkerDetailsResponse() : GetWorkerDetailsResponse(nullptr) {}
  virtual ~GetWorkerDetailsResponse();

  GetWorkerDetailsResponse(const GetWorkerDetailsResponse& from);
  GetWorkerDetailsResponse(GetWorkerDetailsResponse&& from) noexcept
    : GetWorkerDetailsResponse() {
    *this = ::std::move(from);
  }

  inline GetWorkerDetailsResponse& operator=(const GetWorkerDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerDetailsResponse& operator=(GetWorkerDetailsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerDetailsResponse& default_instance();

  static inline const GetWorkerDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorkerDetailsResponse*>(
               &_GetWorkerDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetWorkerDetailsResponse& a, GetWorkerDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerDetailsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerDetailsResponse* New() const final {
    return CreateMaybeMessage<GetWorkerDetailsResponse>(nullptr);
  }

  GetWorkerDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerDetailsResponse& from);
  void MergeFrom(const GetWorkerDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorkerDetailsResponse";
  }
  protected:
  explicit GetWorkerDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // .improbable.platform.runtime.WorkerSummary summary = 1;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::improbable::platform::runtime::WorkerSummary& summary() const;
  ::improbable::platform::runtime::WorkerSummary* release_summary();
  ::improbable::platform::runtime::WorkerSummary* mutable_summary();
  void set_allocated_summary(::improbable::platform::runtime::WorkerSummary* summary);
  private:
  const ::improbable::platform::runtime::WorkerSummary& _internal_summary() const;
  ::improbable::platform::runtime::WorkerSummary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::improbable::platform::runtime::WorkerSummary* summary);
  ::improbable::platform::runtime::WorkerSummary* unsafe_arena_release_summary();

  // .improbable.platform.runtime.WorkerDetails details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::improbable::platform::runtime::WorkerDetails& details() const;
  ::improbable::platform::runtime::WorkerDetails* release_details();
  ::improbable::platform::runtime::WorkerDetails* mutable_details();
  void set_allocated_details(::improbable::platform::runtime::WorkerDetails* details);
  private:
  const ::improbable::platform::runtime::WorkerDetails& _internal_details() const;
  ::improbable::platform::runtime::WorkerDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::improbable::platform::runtime::WorkerDetails* details);
  ::improbable::platform::runtime::WorkerDetails* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorkerDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::WorkerSummary* summary_;
  ::improbable::platform::runtime::WorkerDetails* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerInterestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorkerInterestRequest) */ {
 public:
  inline GetWorkerInterestRequest() : GetWorkerInterestRequest(nullptr) {}
  virtual ~GetWorkerInterestRequest();

  GetWorkerInterestRequest(const GetWorkerInterestRequest& from);
  GetWorkerInterestRequest(GetWorkerInterestRequest&& from) noexcept
    : GetWorkerInterestRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkerInterestRequest& operator=(const GetWorkerInterestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerInterestRequest& operator=(GetWorkerInterestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerInterestRequest& default_instance();

  static inline const GetWorkerInterestRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkerInterestRequest*>(
               &_GetWorkerInterestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetWorkerInterestRequest& a, GetWorkerInterestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerInterestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerInterestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerInterestRequest* New() const final {
    return CreateMaybeMessage<GetWorkerInterestRequest>(nullptr);
  }

  GetWorkerInterestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerInterestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerInterestRequest& from);
  void MergeFrom(const GetWorkerInterestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerInterestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorkerInterestRequest";
  }
  protected:
  explicit GetWorkerInterestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorkerInterestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse, 
    std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse, 
    std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse();
  explicit GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse& other);
  static const GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse*>(&_GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.GetWorkerInterestResponse.WorkerTypeInterestConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[27];
  }

  public:
};

// -------------------------------------------------------------------

class GetWorkerInterestResponse_WorkerInterestConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration) */ {
 public:
  inline GetWorkerInterestResponse_WorkerInterestConfiguration() : GetWorkerInterestResponse_WorkerInterestConfiguration(nullptr) {}
  virtual ~GetWorkerInterestResponse_WorkerInterestConfiguration();

  GetWorkerInterestResponse_WorkerInterestConfiguration(const GetWorkerInterestResponse_WorkerInterestConfiguration& from);
  GetWorkerInterestResponse_WorkerInterestConfiguration(GetWorkerInterestResponse_WorkerInterestConfiguration&& from) noexcept
    : GetWorkerInterestResponse_WorkerInterestConfiguration() {
    *this = ::std::move(from);
  }

  inline GetWorkerInterestResponse_WorkerInterestConfiguration& operator=(const GetWorkerInterestResponse_WorkerInterestConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerInterestResponse_WorkerInterestConfiguration& operator=(GetWorkerInterestResponse_WorkerInterestConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerInterestResponse_WorkerInterestConfiguration& default_instance();

  static inline const GetWorkerInterestResponse_WorkerInterestConfiguration* internal_default_instance() {
    return reinterpret_cast<const GetWorkerInterestResponse_WorkerInterestConfiguration*>(
               &_GetWorkerInterestResponse_WorkerInterestConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetWorkerInterestResponse_WorkerInterestConfiguration& a, GetWorkerInterestResponse_WorkerInterestConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerInterestResponse_WorkerInterestConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerInterestResponse_WorkerInterestConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerInterestResponse_WorkerInterestConfiguration* New() const final {
    return CreateMaybeMessage<GetWorkerInterestResponse_WorkerInterestConfiguration>(nullptr);
  }

  GetWorkerInterestResponse_WorkerInterestConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerInterestResponse_WorkerInterestConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerInterestResponse_WorkerInterestConfiguration& from);
  void MergeFrom(const GetWorkerInterestResponse_WorkerInterestConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerInterestResponse_WorkerInterestConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration";
  }
  protected:
  explicit GetWorkerInterestResponse_WorkerInterestConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingQueryFieldNumber = 3,
    kWorkerTypeFieldNumber = 1,
    kEntityInterestRadiusFieldNumber = 2,
  };
  // repeated .improbable.platform.runtime.InspectorStreamingQuery streaming_query = 3;
  int streaming_query_size() const;
  private:
  int _internal_streaming_query_size() const;
  public:
  void clear_streaming_query();
  ::improbable::platform::runtime::InspectorStreamingQuery* mutable_streaming_query(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectorStreamingQuery >*
      mutable_streaming_query();
  private:
  const ::improbable::platform::runtime::InspectorStreamingQuery& _internal_streaming_query(int index) const;
  ::improbable::platform::runtime::InspectorStreamingQuery* _internal_add_streaming_query();
  public:
  const ::improbable::platform::runtime::InspectorStreamingQuery& streaming_query(int index) const;
  ::improbable::platform::runtime::InspectorStreamingQuery* add_streaming_query();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectorStreamingQuery >&
      streaming_query() const;

  // string worker_type = 1;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // double entity_interest_radius = 2;
  void clear_entity_interest_radius();
  double entity_interest_radius() const;
  void set_entity_interest_radius(double value);
  private:
  double _internal_entity_interest_radius() const;
  void _internal_set_entity_interest_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectorStreamingQuery > streaming_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  double entity_interest_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorkerInterestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorkerInterestResponse) */ {
 public:
  inline GetWorkerInterestResponse() : GetWorkerInterestResponse(nullptr) {}
  virtual ~GetWorkerInterestResponse();

  GetWorkerInterestResponse(const GetWorkerInterestResponse& from);
  GetWorkerInterestResponse(GetWorkerInterestResponse&& from) noexcept
    : GetWorkerInterestResponse() {
    *this = ::std::move(from);
  }

  inline GetWorkerInterestResponse& operator=(const GetWorkerInterestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkerInterestResponse& operator=(GetWorkerInterestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorkerInterestResponse& default_instance();

  static inline const GetWorkerInterestResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorkerInterestResponse*>(
               &_GetWorkerInterestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetWorkerInterestResponse& a, GetWorkerInterestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkerInterestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkerInterestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorkerInterestResponse* New() const final {
    return CreateMaybeMessage<GetWorkerInterestResponse>(nullptr);
  }

  GetWorkerInterestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorkerInterestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorkerInterestResponse& from);
  void MergeFrom(const GetWorkerInterestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkerInterestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorkerInterestResponse";
  }
  protected:
  explicit GetWorkerInterestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetWorkerInterestResponse_WorkerInterestConfiguration WorkerInterestConfiguration;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerTypeInterestConfigFieldNumber = 4,
    kEnableChunkBasedInterestFieldNumber = 1,
    kEnableStreamingQueriesFieldNumber = 2,
    kChunkSizeFieldNumber = 3,
  };
  // map<string, .improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration> worker_type_interest_config = 4;
  int worker_type_interest_config_size() const;
  private:
  int _internal_worker_type_interest_config_size() const;
  public:
  void clear_worker_type_interest_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >&
      _internal_worker_type_interest_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >*
      _internal_mutable_worker_type_interest_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >&
      worker_type_interest_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >*
      mutable_worker_type_interest_config();

  // bool enable_chunk_based_interest = 1;
  void clear_enable_chunk_based_interest();
  bool enable_chunk_based_interest() const;
  void set_enable_chunk_based_interest(bool value);
  private:
  bool _internal_enable_chunk_based_interest() const;
  void _internal_set_enable_chunk_based_interest(bool value);
  public:

  // bool enable_streaming_queries = 2;
  void clear_enable_streaming_queries();
  bool enable_streaming_queries() const;
  void set_enable_streaming_queries(bool value);
  private:
  bool _internal_enable_streaming_queries() const;
  void _internal_set_enable_streaming_queries(bool value);
  public:

  // int32 chunk_size = 3;
  void clear_chunk_size();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_size() const;
  void set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_size() const;
  void _internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorkerInterestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetWorkerInterestResponse_WorkerTypeInterestConfigEntry_DoNotUse,
      std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> worker_type_interest_config_;
  bool enable_chunk_based_interest_;
  bool enable_streaming_queries_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectorStreamingQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectorStreamingQuery) */ {
 public:
  inline InspectorStreamingQuery() : InspectorStreamingQuery(nullptr) {}
  virtual ~InspectorStreamingQuery();

  InspectorStreamingQuery(const InspectorStreamingQuery& from);
  InspectorStreamingQuery(InspectorStreamingQuery&& from) noexcept
    : InspectorStreamingQuery() {
    *this = ::std::move(from);
  }

  inline InspectorStreamingQuery& operator=(const InspectorStreamingQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectorStreamingQuery& operator=(InspectorStreamingQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectorStreamingQuery& default_instance();

  static inline const InspectorStreamingQuery* internal_default_instance() {
    return reinterpret_cast<const InspectorStreamingQuery*>(
               &_InspectorStreamingQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(InspectorStreamingQuery& a, InspectorStreamingQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectorStreamingQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectorStreamingQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectorStreamingQuery* New() const final {
    return CreateMaybeMessage<InspectorStreamingQuery>(nullptr);
  }

  InspectorStreamingQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectorStreamingQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectorStreamingQuery& from);
  void MergeFrom(const InspectorStreamingQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectorStreamingQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectorStreamingQuery";
  }
  protected:
  explicit InspectorStreamingQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentNameFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // string component_name = 1;
  void clear_component_name();
  const std::string& component_name() const;
  void set_component_name(const std::string& value);
  void set_component_name(std::string&& value);
  void set_component_name(const char* value);
  void set_component_name(const char* value, size_t size);
  std::string* mutable_component_name();
  std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectorStreamingQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class LoadBalancingGridFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.LoadBalancingGridFormat) */ {
 public:
  inline LoadBalancingGridFormat() : LoadBalancingGridFormat(nullptr) {}
  virtual ~LoadBalancingGridFormat();

  LoadBalancingGridFormat(const LoadBalancingGridFormat& from);
  LoadBalancingGridFormat(LoadBalancingGridFormat&& from) noexcept
    : LoadBalancingGridFormat() {
    *this = ::std::move(from);
  }

  inline LoadBalancingGridFormat& operator=(const LoadBalancingGridFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadBalancingGridFormat& operator=(LoadBalancingGridFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadBalancingGridFormat& default_instance();

  static inline const LoadBalancingGridFormat* internal_default_instance() {
    return reinterpret_cast<const LoadBalancingGridFormat*>(
               &_LoadBalancingGridFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LoadBalancingGridFormat& a, LoadBalancingGridFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadBalancingGridFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadBalancingGridFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadBalancingGridFormat* New() const final {
    return CreateMaybeMessage<LoadBalancingGridFormat>(nullptr);
  }

  LoadBalancingGridFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadBalancingGridFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadBalancingGridFormat& from);
  void MergeFrom(const LoadBalancingGridFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadBalancingGridFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.LoadBalancingGridFormat";
  }
  protected:
  explicit LoadBalancingGridFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellEdgeLengthFieldNumber = 1,
  };
  // int32 cell_edge_length = 1;
  void clear_cell_edge_length();
  ::PROTOBUF_NAMESPACE_ID::int32 cell_edge_length() const;
  void set_cell_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cell_edge_length() const;
  void _internal_set_cell_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.LoadBalancingGridFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cell_edge_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetLoadBalancingStrategyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetLoadBalancingStrategyRequest) */ {
 public:
  inline GetLoadBalancingStrategyRequest() : GetLoadBalancingStrategyRequest(nullptr) {}
  virtual ~GetLoadBalancingStrategyRequest();

  GetLoadBalancingStrategyRequest(const GetLoadBalancingStrategyRequest& from);
  GetLoadBalancingStrategyRequest(GetLoadBalancingStrategyRequest&& from) noexcept
    : GetLoadBalancingStrategyRequest() {
    *this = ::std::move(from);
  }

  inline GetLoadBalancingStrategyRequest& operator=(const GetLoadBalancingStrategyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoadBalancingStrategyRequest& operator=(GetLoadBalancingStrategyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLoadBalancingStrategyRequest& default_instance();

  enum FormatCase {
    kGridFormat = 1,
    FORMAT_NOT_SET = 0,
  };

  static inline const GetLoadBalancingStrategyRequest* internal_default_instance() {
    return reinterpret_cast<const GetLoadBalancingStrategyRequest*>(
               &_GetLoadBalancingStrategyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetLoadBalancingStrategyRequest& a, GetLoadBalancingStrategyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoadBalancingStrategyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoadBalancingStrategyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLoadBalancingStrategyRequest* New() const final {
    return CreateMaybeMessage<GetLoadBalancingStrategyRequest>(nullptr);
  }

  GetLoadBalancingStrategyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLoadBalancingStrategyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLoadBalancingStrategyRequest& from);
  void MergeFrom(const GetLoadBalancingStrategyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoadBalancingStrategyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetLoadBalancingStrategyRequest";
  }
  protected:
  explicit GetLoadBalancingStrategyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridFormatFieldNumber = 1,
  };
  // .improbable.platform.runtime.LoadBalancingGridFormat grid_format = 1;
  bool has_grid_format() const;
  private:
  bool _internal_has_grid_format() const;
  public:
  void clear_grid_format();
  const ::improbable::platform::runtime::LoadBalancingGridFormat& grid_format() const;
  ::improbable::platform::runtime::LoadBalancingGridFormat* release_grid_format();
  ::improbable::platform::runtime::LoadBalancingGridFormat* mutable_grid_format();
  void set_allocated_grid_format(::improbable::platform::runtime::LoadBalancingGridFormat* grid_format);
  private:
  const ::improbable::platform::runtime::LoadBalancingGridFormat& _internal_grid_format() const;
  ::improbable::platform::runtime::LoadBalancingGridFormat* _internal_mutable_grid_format();
  public:
  void unsafe_arena_set_allocated_grid_format(
      ::improbable::platform::runtime::LoadBalancingGridFormat* grid_format);
  ::improbable::platform::runtime::LoadBalancingGridFormat* unsafe_arena_release_grid_format();

  void clear_format();
  FormatCase format_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetLoadBalancingStrategyRequest)
 private:
  class _Internal;
  void set_has_grid_format();

  inline bool has_format() const;
  inline void clear_has_format();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FormatUnion {
    FormatUnion() {}
    ::improbable::platform::runtime::LoadBalancingGridFormat* grid_format_;
  } format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GridPartition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GridPartition) */ {
 public:
  inline GridPartition() : GridPartition(nullptr) {}
  virtual ~GridPartition();

  GridPartition(const GridPartition& from);
  GridPartition(GridPartition&& from) noexcept
    : GridPartition() {
    *this = ::std::move(from);
  }

  inline GridPartition& operator=(const GridPartition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridPartition& operator=(GridPartition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridPartition& default_instance();

  static inline const GridPartition* internal_default_instance() {
    return reinterpret_cast<const GridPartition*>(
               &_GridPartition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GridPartition& a, GridPartition& b) {
    a.Swap(&b);
  }
  inline void Swap(GridPartition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridPartition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridPartition* New() const final {
    return CreateMaybeMessage<GridPartition>(nullptr);
  }

  GridPartition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridPartition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridPartition& from);
  void MergeFrom(const GridPartition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridPartition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GridPartition";
  }
  protected:
  explicit GridPartition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 2,
    kVirtualWorkerIdFieldNumber = 1,
  };
  // .improbable.platform.runtime.Region region = 2;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::improbable::platform::runtime::Region& region() const;
  ::improbable::platform::runtime::Region* release_region();
  ::improbable::platform::runtime::Region* mutable_region();
  void set_allocated_region(::improbable::platform::runtime::Region* region);
  private:
  const ::improbable::platform::runtime::Region& _internal_region() const;
  ::improbable::platform::runtime::Region* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::improbable::platform::runtime::Region* region);
  ::improbable::platform::runtime::Region* unsafe_arena_release_region();

  // int64 virtual_worker_id = 1;
  void clear_virtual_worker_id();
  ::PROTOBUF_NAMESPACE_ID::int64 virtual_worker_id() const;
  void set_virtual_worker_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_virtual_worker_id() const;
  void _internal_set_virtual_worker_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GridPartition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Region* region_;
  ::PROTOBUF_NAMESPACE_ID::int64 virtual_worker_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GridPartitionStrategy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GridPartitionStrategy) */ {
 public:
  inline GridPartitionStrategy() : GridPartitionStrategy(nullptr) {}
  virtual ~GridPartitionStrategy();

  GridPartitionStrategy(const GridPartitionStrategy& from);
  GridPartitionStrategy(GridPartitionStrategy&& from) noexcept
    : GridPartitionStrategy() {
    *this = ::std::move(from);
  }

  inline GridPartitionStrategy& operator=(const GridPartitionStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridPartitionStrategy& operator=(GridPartitionStrategy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridPartitionStrategy& default_instance();

  static inline const GridPartitionStrategy* internal_default_instance() {
    return reinterpret_cast<const GridPartitionStrategy*>(
               &_GridPartitionStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GridPartitionStrategy& a, GridPartitionStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(GridPartitionStrategy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridPartitionStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridPartitionStrategy* New() const final {
    return CreateMaybeMessage<GridPartitionStrategy>(nullptr);
  }

  GridPartitionStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridPartitionStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridPartitionStrategy& from);
  void MergeFrom(const GridPartitionStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridPartitionStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GridPartitionStrategy";
  }
  protected:
  explicit GridPartitionStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridPartitionsFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.GridPartition grid_partitions = 1;
  int grid_partitions_size() const;
  private:
  int _internal_grid_partitions_size() const;
  public:
  void clear_grid_partitions();
  ::improbable::platform::runtime::GridPartition* mutable_grid_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::GridPartition >*
      mutable_grid_partitions();
  private:
  const ::improbable::platform::runtime::GridPartition& _internal_grid_partitions(int index) const;
  ::improbable::platform::runtime::GridPartition* _internal_add_grid_partitions();
  public:
  const ::improbable::platform::runtime::GridPartition& grid_partitions(int index) const;
  ::improbable::platform::runtime::GridPartition* add_grid_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::GridPartition >&
      grid_partitions() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GridPartitionStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::GridPartition > grid_partitions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetLoadBalancingStrategyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetLoadBalancingStrategyResponse) */ {
 public:
  inline GetLoadBalancingStrategyResponse() : GetLoadBalancingStrategyResponse(nullptr) {}
  virtual ~GetLoadBalancingStrategyResponse();

  GetLoadBalancingStrategyResponse(const GetLoadBalancingStrategyResponse& from);
  GetLoadBalancingStrategyResponse(GetLoadBalancingStrategyResponse&& from) noexcept
    : GetLoadBalancingStrategyResponse() {
    *this = ::std::move(from);
  }

  inline GetLoadBalancingStrategyResponse& operator=(const GetLoadBalancingStrategyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLoadBalancingStrategyResponse& operator=(GetLoadBalancingStrategyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLoadBalancingStrategyResponse& default_instance();

  enum StrategyCase {
    kGridPartitionStrategy = 1,
    STRATEGY_NOT_SET = 0,
  };

  static inline const GetLoadBalancingStrategyResponse* internal_default_instance() {
    return reinterpret_cast<const GetLoadBalancingStrategyResponse*>(
               &_GetLoadBalancingStrategyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetLoadBalancingStrategyResponse& a, GetLoadBalancingStrategyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLoadBalancingStrategyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLoadBalancingStrategyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLoadBalancingStrategyResponse* New() const final {
    return CreateMaybeMessage<GetLoadBalancingStrategyResponse>(nullptr);
  }

  GetLoadBalancingStrategyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLoadBalancingStrategyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLoadBalancingStrategyResponse& from);
  void MergeFrom(const GetLoadBalancingStrategyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLoadBalancingStrategyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetLoadBalancingStrategyResponse";
  }
  protected:
  explicit GetLoadBalancingStrategyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridPartitionStrategyFieldNumber = 1,
  };
  // .improbable.platform.runtime.GridPartitionStrategy grid_partition_strategy = 1;
  bool has_grid_partition_strategy() const;
  private:
  bool _internal_has_grid_partition_strategy() const;
  public:
  void clear_grid_partition_strategy();
  const ::improbable::platform::runtime::GridPartitionStrategy& grid_partition_strategy() const;
  ::improbable::platform::runtime::GridPartitionStrategy* release_grid_partition_strategy();
  ::improbable::platform::runtime::GridPartitionStrategy* mutable_grid_partition_strategy();
  void set_allocated_grid_partition_strategy(::improbable::platform::runtime::GridPartitionStrategy* grid_partition_strategy);
  private:
  const ::improbable::platform::runtime::GridPartitionStrategy& _internal_grid_partition_strategy() const;
  ::improbable::platform::runtime::GridPartitionStrategy* _internal_mutable_grid_partition_strategy();
  public:
  void unsafe_arena_set_allocated_grid_partition_strategy(
      ::improbable::platform::runtime::GridPartitionStrategy* grid_partition_strategy);
  ::improbable::platform::runtime::GridPartitionStrategy* unsafe_arena_release_grid_partition_strategy();

  void clear_strategy();
  StrategyCase strategy_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetLoadBalancingStrategyResponse)
 private:
  class _Internal;
  void set_has_grid_partition_strategy();

  inline bool has_strategy() const;
  inline void clear_has_strategy();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StrategyUnion {
    StrategyUnion() {}
    ::improbable::platform::runtime::GridPartitionStrategy* grid_partition_strategy_;
  } strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualWorkerMappingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetVirtualWorkerMappingRequest) */ {
 public:
  inline GetVirtualWorkerMappingRequest() : GetVirtualWorkerMappingRequest(nullptr) {}
  virtual ~GetVirtualWorkerMappingRequest();

  GetVirtualWorkerMappingRequest(const GetVirtualWorkerMappingRequest& from);
  GetVirtualWorkerMappingRequest(GetVirtualWorkerMappingRequest&& from) noexcept
    : GetVirtualWorkerMappingRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtualWorkerMappingRequest& operator=(const GetVirtualWorkerMappingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualWorkerMappingRequest& operator=(GetVirtualWorkerMappingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVirtualWorkerMappingRequest& default_instance();

  static inline const GetVirtualWorkerMappingRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtualWorkerMappingRequest*>(
               &_GetVirtualWorkerMappingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetVirtualWorkerMappingRequest& a, GetVirtualWorkerMappingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualWorkerMappingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualWorkerMappingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVirtualWorkerMappingRequest* New() const final {
    return CreateMaybeMessage<GetVirtualWorkerMappingRequest>(nullptr);
  }

  GetVirtualWorkerMappingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVirtualWorkerMappingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVirtualWorkerMappingRequest& from);
  void MergeFrom(const GetVirtualWorkerMappingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualWorkerMappingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetVirtualWorkerMappingRequest";
  }
  protected:
  explicit GetVirtualWorkerMappingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetVirtualWorkerMappingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse();
  explicit GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse& other);
  static const GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse*>(&_GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.GetVirtualWorkerMappingResponse.VirtualToWorkerEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[37];
  }

  public:
};

// -------------------------------------------------------------------

class GetVirtualWorkerMappingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetVirtualWorkerMappingResponse) */ {
 public:
  inline GetVirtualWorkerMappingResponse() : GetVirtualWorkerMappingResponse(nullptr) {}
  virtual ~GetVirtualWorkerMappingResponse();

  GetVirtualWorkerMappingResponse(const GetVirtualWorkerMappingResponse& from);
  GetVirtualWorkerMappingResponse(GetVirtualWorkerMappingResponse&& from) noexcept
    : GetVirtualWorkerMappingResponse() {
    *this = ::std::move(from);
  }

  inline GetVirtualWorkerMappingResponse& operator=(const GetVirtualWorkerMappingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualWorkerMappingResponse& operator=(GetVirtualWorkerMappingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVirtualWorkerMappingResponse& default_instance();

  static inline const GetVirtualWorkerMappingResponse* internal_default_instance() {
    return reinterpret_cast<const GetVirtualWorkerMappingResponse*>(
               &_GetVirtualWorkerMappingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetVirtualWorkerMappingResponse& a, GetVirtualWorkerMappingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualWorkerMappingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualWorkerMappingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVirtualWorkerMappingResponse* New() const final {
    return CreateMaybeMessage<GetVirtualWorkerMappingResponse>(nullptr);
  }

  GetVirtualWorkerMappingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVirtualWorkerMappingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVirtualWorkerMappingResponse& from);
  void MergeFrom(const GetVirtualWorkerMappingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualWorkerMappingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetVirtualWorkerMappingResponse";
  }
  protected:
  explicit GetVirtualWorkerMappingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVirtualToWorkerFieldNumber = 1,
  };
  // map<int64, string> virtual_to_worker = 1;
  int virtual_to_worker_size() const;
  private:
  int _internal_virtual_to_worker_size() const;
  public:
  void clear_virtual_to_worker();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
      _internal_virtual_to_worker() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
      _internal_mutable_virtual_to_worker();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
      virtual_to_worker() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
      mutable_virtual_to_worker();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetVirtualWorkerMappingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetVirtualWorkerMappingResponse_VirtualToWorkerEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> virtual_to_worker_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse();
  explicit WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse& other);
  static const WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse*>(&_WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[39];
  }

  public:
};

// -------------------------------------------------------------------

class WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse();
  explicit WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse& other);
  static const WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse*>(&_WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.WorkerDetails.ComponentSet.ComponentIdsWithNamesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[40];
  }

  public:
};

// -------------------------------------------------------------------

class WorkerDetails_ComponentSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerDetails.ComponentSet) */ {
 public:
  inline WorkerDetails_ComponentSet() : WorkerDetails_ComponentSet(nullptr) {}
  virtual ~WorkerDetails_ComponentSet();

  WorkerDetails_ComponentSet(const WorkerDetails_ComponentSet& from);
  WorkerDetails_ComponentSet(WorkerDetails_ComponentSet&& from) noexcept
    : WorkerDetails_ComponentSet() {
    *this = ::std::move(from);
  }

  inline WorkerDetails_ComponentSet& operator=(const WorkerDetails_ComponentSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerDetails_ComponentSet& operator=(WorkerDetails_ComponentSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerDetails_ComponentSet& default_instance();

  static inline const WorkerDetails_ComponentSet* internal_default_instance() {
    return reinterpret_cast<const WorkerDetails_ComponentSet*>(
               &_WorkerDetails_ComponentSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(WorkerDetails_ComponentSet& a, WorkerDetails_ComponentSet& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerDetails_ComponentSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerDetails_ComponentSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerDetails_ComponentSet* New() const final {
    return CreateMaybeMessage<WorkerDetails_ComponentSet>(nullptr);
  }

  WorkerDetails_ComponentSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerDetails_ComponentSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerDetails_ComponentSet& from);
  void MergeFrom(const WorkerDetails_ComponentSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerDetails_ComponentSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerDetails.ComponentSet";
  }
  protected:
  explicit WorkerDetails_ComponentSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdsWithNamesFieldNumber = 1,
  };
  // map<int32, string> component_ids_with_names = 1;
  int component_ids_with_names_size() const;
  private:
  int _internal_component_ids_with_names_size() const;
  public:
  void clear_component_ids_with_names();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_component_ids_with_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_component_ids_with_names();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      component_ids_with_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_component_ids_with_names();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerDetails.ComponentSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WorkerDetails_ComponentSet_ComponentIdsWithNamesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> component_ids_with_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class WorkerDetails_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkerDetails_MetricsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WorkerDetails_MetricsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  WorkerDetails_MetricsEntry_DoNotUse();
  explicit WorkerDetails_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WorkerDetails_MetricsEntry_DoNotUse& other);
  static const WorkerDetails_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkerDetails_MetricsEntry_DoNotUse*>(&_WorkerDetails_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.WorkerDetails.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[42];
  }

  public:
};

// -------------------------------------------------------------------

class WorkerDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerDetails) */ {
 public:
  inline WorkerDetails() : WorkerDetails(nullptr) {}
  virtual ~WorkerDetails();

  WorkerDetails(const WorkerDetails& from);
  WorkerDetails(WorkerDetails&& from) noexcept
    : WorkerDetails() {
    *this = ::std::move(from);
  }

  inline WorkerDetails& operator=(const WorkerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerDetails& operator=(WorkerDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerDetails& default_instance();

  static inline const WorkerDetails* internal_default_instance() {
    return reinterpret_cast<const WorkerDetails*>(
               &_WorkerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(WorkerDetails& a, WorkerDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerDetails* New() const final {
    return CreateMaybeMessage<WorkerDetails>(nullptr);
  }

  WorkerDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerDetails& from);
  void MergeFrom(const WorkerDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerDetails";
  }
  protected:
  explicit WorkerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkerDetails_ComponentSet ComponentSet;

  // accessors -------------------------------------------------------

  enum : int {
    kKnownEntityIdsFieldNumber = 3,
    kDelegatedEntityComponentsFieldNumber = 4,
    kMetricsFieldNumber = 5,
    kInterestRegionFieldNumber = 2,
    kWorkerAttributesFieldNumber = 6,
    kAuthorityRegionFieldNumber = 7,
  };
  // repeated int64 known_entity_ids = 3;
  int known_entity_ids_size() const;
  private:
  int _internal_known_entity_ids_size() const;
  public:
  void clear_known_entity_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_known_entity_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_known_entity_ids() const;
  void _internal_add_known_entity_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_known_entity_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 known_entity_ids(int index) const;
  void set_known_entity_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_known_entity_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      known_entity_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_known_entity_ids();

  // map<int64, .improbable.platform.runtime.WorkerDetails.ComponentSet> delegated_entity_components = 4;
  int delegated_entity_components_size() const;
  private:
  int _internal_delegated_entity_components_size() const;
  public:
  void clear_delegated_entity_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >&
      _internal_delegated_entity_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >*
      _internal_mutable_delegated_entity_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >&
      delegated_entity_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >*
      mutable_delegated_entity_components();

  // map<string, double> metrics = 5;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_metrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_metrics();

  // .improbable.platform.runtime.Region interest_region = 2;
  bool has_interest_region() const;
  private:
  bool _internal_has_interest_region() const;
  public:
  void clear_interest_region();
  const ::improbable::platform::runtime::Region& interest_region() const;
  ::improbable::platform::runtime::Region* release_interest_region();
  ::improbable::platform::runtime::Region* mutable_interest_region();
  void set_allocated_interest_region(::improbable::platform::runtime::Region* interest_region);
  private:
  const ::improbable::platform::runtime::Region& _internal_interest_region() const;
  ::improbable::platform::runtime::Region* _internal_mutable_interest_region();
  public:
  void unsafe_arena_set_allocated_interest_region(
      ::improbable::platform::runtime::Region* interest_region);
  ::improbable::platform::runtime::Region* unsafe_arena_release_interest_region();

  // .improbable.platform.runtime.WorkerAttributeSet worker_attributes = 6;
  bool has_worker_attributes() const;
  private:
  bool _internal_has_worker_attributes() const;
  public:
  void clear_worker_attributes();
  const ::improbable::platform::runtime::WorkerAttributeSet& worker_attributes() const;
  ::improbable::platform::runtime::WorkerAttributeSet* release_worker_attributes();
  ::improbable::platform::runtime::WorkerAttributeSet* mutable_worker_attributes();
  void set_allocated_worker_attributes(::improbable::platform::runtime::WorkerAttributeSet* worker_attributes);
  private:
  const ::improbable::platform::runtime::WorkerAttributeSet& _internal_worker_attributes() const;
  ::improbable::platform::runtime::WorkerAttributeSet* _internal_mutable_worker_attributes();
  public:
  void unsafe_arena_set_allocated_worker_attributes(
      ::improbable::platform::runtime::WorkerAttributeSet* worker_attributes);
  ::improbable::platform::runtime::WorkerAttributeSet* unsafe_arena_release_worker_attributes();

  // .improbable.platform.runtime.Region authority_region = 7;
  bool has_authority_region() const;
  private:
  bool _internal_has_authority_region() const;
  public:
  void clear_authority_region();
  const ::improbable::platform::runtime::Region& authority_region() const;
  ::improbable::platform::runtime::Region* release_authority_region();
  ::improbable::platform::runtime::Region* mutable_authority_region();
  void set_allocated_authority_region(::improbable::platform::runtime::Region* authority_region);
  private:
  const ::improbable::platform::runtime::Region& _internal_authority_region() const;
  ::improbable::platform::runtime::Region* _internal_mutable_authority_region();
  public:
  void unsafe_arena_set_allocated_authority_region(
      ::improbable::platform::runtime::Region* authority_region);
  ::improbable::platform::runtime::Region* unsafe_arena_release_authority_region();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > known_entity_ids_;
  mutable std::atomic<int> _known_entity_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WorkerDetails_DelegatedEntityComponentsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> delegated_entity_components_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WorkerDetails_MetricsEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> metrics_;
  ::improbable::platform::runtime::Region* interest_region_;
  ::improbable::platform::runtime::WorkerAttributeSet* worker_attributes_;
  ::improbable::platform::runtime::Region* authority_region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class Region_RectanglesRegion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.Region.RectanglesRegion) */ {
 public:
  inline Region_RectanglesRegion() : Region_RectanglesRegion(nullptr) {}
  virtual ~Region_RectanglesRegion();

  Region_RectanglesRegion(const Region_RectanglesRegion& from);
  Region_RectanglesRegion(Region_RectanglesRegion&& from) noexcept
    : Region_RectanglesRegion() {
    *this = ::std::move(from);
  }

  inline Region_RectanglesRegion& operator=(const Region_RectanglesRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region_RectanglesRegion& operator=(Region_RectanglesRegion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region_RectanglesRegion& default_instance();

  static inline const Region_RectanglesRegion* internal_default_instance() {
    return reinterpret_cast<const Region_RectanglesRegion*>(
               &_Region_RectanglesRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Region_RectanglesRegion& a, Region_RectanglesRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(Region_RectanglesRegion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Region_RectanglesRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region_RectanglesRegion* New() const final {
    return CreateMaybeMessage<Region_RectanglesRegion>(nullptr);
  }

  Region_RectanglesRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region_RectanglesRegion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region_RectanglesRegion& from);
  void MergeFrom(const Region_RectanglesRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region_RectanglesRegion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.Region.RectanglesRegion";
  }
  protected:
  explicit Region_RectanglesRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectanglesFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.Rectangle rectangles = 1;
  int rectangles_size() const;
  private:
  int _internal_rectangles_size() const;
  public:
  void clear_rectangles();
  ::improbable::platform::runtime::Rectangle* mutable_rectangles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >*
      mutable_rectangles();
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_rectangles(int index) const;
  ::improbable::platform::runtime::Rectangle* _internal_add_rectangles();
  public:
  const ::improbable::platform::runtime::Rectangle& rectangles(int index) const;
  ::improbable::platform::runtime::Rectangle* add_rectangles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >&
      rectangles() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.Region.RectanglesRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle > rectangles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class Region PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.Region) */ {
 public:
  inline Region() : Region(nullptr) {}
  virtual ~Region();

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region& default_instance();

  enum AreaCase {
    kAsRectangles = 1,
    AREA_NOT_SET = 0,
  };

  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(nullptr);
  }

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.Region";
  }
  protected:
  explicit Region(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Region_RectanglesRegion RectanglesRegion;

  // accessors -------------------------------------------------------

  enum : int {
    kAsRectanglesFieldNumber = 1,
  };
  // .improbable.platform.runtime.Region.RectanglesRegion as_rectangles = 1;
  bool has_as_rectangles() const;
  private:
  bool _internal_has_as_rectangles() const;
  public:
  void clear_as_rectangles();
  const ::improbable::platform::runtime::Region_RectanglesRegion& as_rectangles() const;
  ::improbable::platform::runtime::Region_RectanglesRegion* release_as_rectangles();
  ::improbable::platform::runtime::Region_RectanglesRegion* mutable_as_rectangles();
  void set_allocated_as_rectangles(::improbable::platform::runtime::Region_RectanglesRegion* as_rectangles);
  private:
  const ::improbable::platform::runtime::Region_RectanglesRegion& _internal_as_rectangles() const;
  ::improbable::platform::runtime::Region_RectanglesRegion* _internal_mutable_as_rectangles();
  public:
  void unsafe_arena_set_allocated_as_rectangles(
      ::improbable::platform::runtime::Region_RectanglesRegion* as_rectangles);
  ::improbable::platform::runtime::Region_RectanglesRegion* unsafe_arena_release_as_rectangles();

  void clear_area();
  AreaCase area_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.Region)
 private:
  class _Internal;
  void set_has_as_rectangles();

  inline bool has_area() const;
  inline void clear_has_area();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AreaUnion {
    AreaUnion() {}
    ::improbable::platform::runtime::Region_RectanglesRegion* as_rectangles_;
  } area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorldExtentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorldExtentsRequest) */ {
 public:
  inline GetWorldExtentsRequest() : GetWorldExtentsRequest(nullptr) {}
  virtual ~GetWorldExtentsRequest();

  GetWorldExtentsRequest(const GetWorldExtentsRequest& from);
  GetWorldExtentsRequest(GetWorldExtentsRequest&& from) noexcept
    : GetWorldExtentsRequest() {
    *this = ::std::move(from);
  }

  inline GetWorldExtentsRequest& operator=(const GetWorldExtentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldExtentsRequest& operator=(GetWorldExtentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorldExtentsRequest& default_instance();

  static inline const GetWorldExtentsRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorldExtentsRequest*>(
               &_GetWorldExtentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetWorldExtentsRequest& a, GetWorldExtentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldExtentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldExtentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorldExtentsRequest* New() const final {
    return CreateMaybeMessage<GetWorldExtentsRequest>(nullptr);
  }

  GetWorldExtentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorldExtentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorldExtentsRequest& from);
  void MergeFrom(const GetWorldExtentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldExtentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorldExtentsRequest";
  }
  protected:
  explicit GetWorldExtentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorldExtentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision) */ {
 public:
  inline GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision() : GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision(nullptr) {}
  virtual ~GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision();

  GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision(const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& from);
  GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision(GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision&& from) noexcept
    : GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision() {
    *this = ::std::move(from);
  }

  inline GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& operator=(const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& operator=(GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& default_instance();

  static inline const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* internal_default_instance() {
    return reinterpret_cast<const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision*>(
               &_GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& a, GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* New() const final {
    return CreateMaybeMessage<GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision>(nullptr);
  }

  GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& from);
  void MergeFrom(const GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision";
  }
  protected:
  explicit GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGsimBoundsFieldNumber = 1,
    kChunkSizeFieldNumber = 2,
  };
  // repeated .improbable.platform.runtime.Rectangle gsim_bounds = 1;
  int gsim_bounds_size() const;
  private:
  int _internal_gsim_bounds_size() const;
  public:
  void clear_gsim_bounds();
  ::improbable::platform::runtime::Rectangle* mutable_gsim_bounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >*
      mutable_gsim_bounds();
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_gsim_bounds(int index) const;
  ::improbable::platform::runtime::Rectangle* _internal_add_gsim_bounds();
  public:
  const ::improbable::platform::runtime::Rectangle& gsim_bounds(int index) const;
  ::improbable::platform::runtime::Rectangle* add_gsim_bounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >&
      gsim_bounds() const;

  // int32 chunk_size = 2;
  void clear_chunk_size();
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_size() const;
  void set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_size() const;
  void _internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle > gsim_bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorldExtentsResponse_WorldSubdivision PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision) */ {
 public:
  inline GetWorldExtentsResponse_WorldSubdivision() : GetWorldExtentsResponse_WorldSubdivision(nullptr) {}
  virtual ~GetWorldExtentsResponse_WorldSubdivision();

  GetWorldExtentsResponse_WorldSubdivision(const GetWorldExtentsResponse_WorldSubdivision& from);
  GetWorldExtentsResponse_WorldSubdivision(GetWorldExtentsResponse_WorldSubdivision&& from) noexcept
    : GetWorldExtentsResponse_WorldSubdivision() {
    *this = ::std::move(from);
  }

  inline GetWorldExtentsResponse_WorldSubdivision& operator=(const GetWorldExtentsResponse_WorldSubdivision& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldExtentsResponse_WorldSubdivision& operator=(GetWorldExtentsResponse_WorldSubdivision&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorldExtentsResponse_WorldSubdivision& default_instance();

  enum SubdivisionCase {
    kGsimExtents = 1,
    SUBDIVISION_NOT_SET = 0,
  };

  static inline const GetWorldExtentsResponse_WorldSubdivision* internal_default_instance() {
    return reinterpret_cast<const GetWorldExtentsResponse_WorldSubdivision*>(
               &_GetWorldExtentsResponse_WorldSubdivision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetWorldExtentsResponse_WorldSubdivision& a, GetWorldExtentsResponse_WorldSubdivision& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldExtentsResponse_WorldSubdivision* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldExtentsResponse_WorldSubdivision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorldExtentsResponse_WorldSubdivision* New() const final {
    return CreateMaybeMessage<GetWorldExtentsResponse_WorldSubdivision>(nullptr);
  }

  GetWorldExtentsResponse_WorldSubdivision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorldExtentsResponse_WorldSubdivision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorldExtentsResponse_WorldSubdivision& from);
  void MergeFrom(const GetWorldExtentsResponse_WorldSubdivision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldExtentsResponse_WorldSubdivision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision";
  }
  protected:
  explicit GetWorldExtentsResponse_WorldSubdivision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision GsimSubdivision;

  // accessors -------------------------------------------------------

  enum : int {
    kGsimExtentsFieldNumber = 1,
  };
  // .improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision gsim_extents = 1;
  bool has_gsim_extents() const;
  private:
  bool _internal_has_gsim_extents() const;
  public:
  void clear_gsim_extents();
  const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& gsim_extents() const;
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* release_gsim_extents();
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* mutable_gsim_extents();
  void set_allocated_gsim_extents(::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* gsim_extents);
  private:
  const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& _internal_gsim_extents() const;
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* _internal_mutable_gsim_extents();
  public:
  void unsafe_arena_set_allocated_gsim_extents(
      ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* gsim_extents);
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* unsafe_arena_release_gsim_extents();

  void clear_subdivision();
  SubdivisionCase subdivision_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision)
 private:
  class _Internal;
  void set_has_gsim_extents();

  inline bool has_subdivision() const;
  inline void clear_has_subdivision();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SubdivisionUnion {
    SubdivisionUnion() {}
    ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* gsim_extents_;
  } subdivision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetWorldExtentsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetWorldExtentsResponse) */ {
 public:
  inline GetWorldExtentsResponse() : GetWorldExtentsResponse(nullptr) {}
  virtual ~GetWorldExtentsResponse();

  GetWorldExtentsResponse(const GetWorldExtentsResponse& from);
  GetWorldExtentsResponse(GetWorldExtentsResponse&& from) noexcept
    : GetWorldExtentsResponse() {
    *this = ::std::move(from);
  }

  inline GetWorldExtentsResponse& operator=(const GetWorldExtentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorldExtentsResponse& operator=(GetWorldExtentsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWorldExtentsResponse& default_instance();

  static inline const GetWorldExtentsResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorldExtentsResponse*>(
               &_GetWorldExtentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetWorldExtentsResponse& a, GetWorldExtentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorldExtentsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorldExtentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWorldExtentsResponse* New() const final {
    return CreateMaybeMessage<GetWorldExtentsResponse>(nullptr);
  }

  GetWorldExtentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWorldExtentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWorldExtentsResponse& from);
  void MergeFrom(const GetWorldExtentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorldExtentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetWorldExtentsResponse";
  }
  protected:
  explicit GetWorldExtentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetWorldExtentsResponse_WorldSubdivision WorldSubdivision;

  // accessors -------------------------------------------------------

  enum : int {
    kWorldSubdivisionFieldNumber = 1,
    kWorldBoundsFieldNumber = 2,
  };
  // .improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision world_subdivision = 1;
  bool has_world_subdivision() const;
  private:
  bool _internal_has_world_subdivision() const;
  public:
  void clear_world_subdivision();
  const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision& world_subdivision() const;
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* release_world_subdivision();
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* mutable_world_subdivision();
  void set_allocated_world_subdivision(::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* world_subdivision);
  private:
  const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision& _internal_world_subdivision() const;
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* _internal_mutable_world_subdivision();
  public:
  void unsafe_arena_set_allocated_world_subdivision(
      ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* world_subdivision);
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* unsafe_arena_release_world_subdivision();

  // .improbable.platform.runtime.Rectangle world_bounds = 2;
  bool has_world_bounds() const;
  private:
  bool _internal_has_world_bounds() const;
  public:
  void clear_world_bounds();
  const ::improbable::platform::runtime::Rectangle& world_bounds() const;
  ::improbable::platform::runtime::Rectangle* release_world_bounds();
  ::improbable::platform::runtime::Rectangle* mutable_world_bounds();
  void set_allocated_world_bounds(::improbable::platform::runtime::Rectangle* world_bounds);
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_world_bounds() const;
  ::improbable::platform::runtime::Rectangle* _internal_mutable_world_bounds();
  public:
  void unsafe_arena_set_allocated_world_bounds(
      ::improbable::platform::runtime::Rectangle* world_bounds);
  ::improbable::platform::runtime::Rectangle* unsafe_arena_release_world_bounds();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetWorldExtentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* world_subdivision_;
  ::improbable::platform::runtime::Rectangle* world_bounds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetChunksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetChunksRequest) */ {
 public:
  inline GetChunksRequest() : GetChunksRequest(nullptr) {}
  virtual ~GetChunksRequest();

  GetChunksRequest(const GetChunksRequest& from);
  GetChunksRequest(GetChunksRequest&& from) noexcept
    : GetChunksRequest() {
    *this = ::std::move(from);
  }

  inline GetChunksRequest& operator=(const GetChunksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChunksRequest& operator=(GetChunksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChunksRequest& default_instance();

  static inline const GetChunksRequest* internal_default_instance() {
    return reinterpret_cast<const GetChunksRequest*>(
               &_GetChunksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetChunksRequest& a, GetChunksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChunksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChunksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChunksRequest* New() const final {
    return CreateMaybeMessage<GetChunksRequest>(nullptr);
  }

  GetChunksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChunksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChunksRequest& from);
  void MergeFrom(const GetChunksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChunksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetChunksRequest";
  }
  protected:
  explicit GetChunksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewportFieldNumber = 1,
  };
  // .improbable.platform.runtime.Rectangle viewport = 1;
  bool has_viewport() const;
  private:
  bool _internal_has_viewport() const;
  public:
  void clear_viewport();
  const ::improbable::platform::runtime::Rectangle& viewport() const;
  ::improbable::platform::runtime::Rectangle* release_viewport();
  ::improbable::platform::runtime::Rectangle* mutable_viewport();
  void set_allocated_viewport(::improbable::platform::runtime::Rectangle* viewport);
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_viewport() const;
  ::improbable::platform::runtime::Rectangle* _internal_mutable_viewport();
  public:
  void unsafe_arena_set_allocated_viewport(
      ::improbable::platform::runtime::Rectangle* viewport);
  ::improbable::platform::runtime::Rectangle* unsafe_arena_release_viewport();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetChunksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Rectangle* viewport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class GetChunksResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.GetChunksResponse) */ {
 public:
  inline GetChunksResponse() : GetChunksResponse(nullptr) {}
  virtual ~GetChunksResponse();

  GetChunksResponse(const GetChunksResponse& from);
  GetChunksResponse(GetChunksResponse&& from) noexcept
    : GetChunksResponse() {
    *this = ::std::move(from);
  }

  inline GetChunksResponse& operator=(const GetChunksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChunksResponse& operator=(GetChunksResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChunksResponse& default_instance();

  static inline const GetChunksResponse* internal_default_instance() {
    return reinterpret_cast<const GetChunksResponse*>(
               &_GetChunksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetChunksResponse& a, GetChunksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChunksResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChunksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChunksResponse* New() const final {
    return CreateMaybeMessage<GetChunksResponse>(nullptr);
  }

  GetChunksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChunksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChunksResponse& from);
  void MergeFrom(const GetChunksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChunksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.GetChunksResponse";
  }
  protected:
  explicit GetChunksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.ChunkDetails chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::improbable::platform::runtime::ChunkDetails* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::ChunkDetails >*
      mutable_chunks();
  private:
  const ::improbable::platform::runtime::ChunkDetails& _internal_chunks(int index) const;
  ::improbable::platform::runtime::ChunkDetails* _internal_add_chunks();
  public:
  const ::improbable::platform::runtime::ChunkDetails& chunks(int index) const;
  ::improbable::platform::runtime::ChunkDetails* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::ChunkDetails >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.GetChunksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::ChunkDetails > chunks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class ChunkDetails_WorkerAssignmentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChunkDetails_WorkerAssignmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChunkDetails_WorkerAssignmentsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ChunkDetails_WorkerAssignmentsEntry_DoNotUse();
  explicit ChunkDetails_WorkerAssignmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChunkDetails_WorkerAssignmentsEntry_DoNotUse& other);
  static const ChunkDetails_WorkerAssignmentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChunkDetails_WorkerAssignmentsEntry_DoNotUse*>(&_ChunkDetails_WorkerAssignmentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.ChunkDetails.WorkerAssignmentsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.ChunkDetails.WorkerAssignmentsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[52];
  }

  public:
};

// -------------------------------------------------------------------

class ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse();
  explicit ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse& other);
  static const ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse*>(&_ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.ChunkDetails.WorkerAssignmentOverridesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.ChunkDetails.WorkerAssignmentOverridesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[53];
  }

  public:
};

// -------------------------------------------------------------------

class ChunkDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ChunkDetails) */ {
 public:
  inline ChunkDetails() : ChunkDetails(nullptr) {}
  virtual ~ChunkDetails();

  ChunkDetails(const ChunkDetails& from);
  ChunkDetails(ChunkDetails&& from) noexcept
    : ChunkDetails() {
    *this = ::std::move(from);
  }

  inline ChunkDetails& operator=(const ChunkDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkDetails& operator=(ChunkDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkDetails& default_instance();

  static inline const ChunkDetails* internal_default_instance() {
    return reinterpret_cast<const ChunkDetails*>(
               &_ChunkDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ChunkDetails& a, ChunkDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkDetails* New() const final {
    return CreateMaybeMessage<ChunkDetails>(nullptr);
  }

  ChunkDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkDetails& from);
  void MergeFrom(const ChunkDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ChunkDetails";
  }
  protected:
  explicit ChunkDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSubscribedWorkerIdsFieldNumber = 3,
    kWorkerAssignmentsFieldNumber = 4,
    kWorkerAssignmentOverridesFieldNumber = 5,
    kChunkIdFieldNumber = 1,
    kExtentFieldNumber = 2,
  };
  // repeated string subscribed_worker_ids = 3;
  int subscribed_worker_ids_size() const;
  private:
  int _internal_subscribed_worker_ids_size() const;
  public:
  void clear_subscribed_worker_ids();
  const std::string& subscribed_worker_ids(int index) const;
  std::string* mutable_subscribed_worker_ids(int index);
  void set_subscribed_worker_ids(int index, const std::string& value);
  void set_subscribed_worker_ids(int index, std::string&& value);
  void set_subscribed_worker_ids(int index, const char* value);
  void set_subscribed_worker_ids(int index, const char* value, size_t size);
  std::string* add_subscribed_worker_ids();
  void add_subscribed_worker_ids(const std::string& value);
  void add_subscribed_worker_ids(std::string&& value);
  void add_subscribed_worker_ids(const char* value);
  void add_subscribed_worker_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& subscribed_worker_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_subscribed_worker_ids();
  private:
  const std::string& _internal_subscribed_worker_ids(int index) const;
  std::string* _internal_add_subscribed_worker_ids();
  public:

  // map<string, string> worker_assignments = 4;
  int worker_assignments_size() const;
  private:
  int _internal_worker_assignments_size() const;
  public:
  void clear_worker_assignments();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_worker_assignments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_worker_assignments();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      worker_assignments() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_worker_assignments();

  // map<string, string> worker_assignment_overrides = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int worker_assignment_overrides_size() const;
  private:
  int _internal_worker_assignment_overrides_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_worker_assignment_overrides();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_worker_assignment_overrides() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_worker_assignment_overrides();
  public:
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      worker_assignment_overrides() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_worker_assignment_overrides();

  // string chunk_id = 1;
  void clear_chunk_id();
  const std::string& chunk_id() const;
  void set_chunk_id(const std::string& value);
  void set_chunk_id(std::string&& value);
  void set_chunk_id(const char* value);
  void set_chunk_id(const char* value, size_t size);
  std::string* mutable_chunk_id();
  std::string* release_chunk_id();
  void set_allocated_chunk_id(std::string* chunk_id);
  private:
  const std::string& _internal_chunk_id() const;
  void _internal_set_chunk_id(const std::string& value);
  std::string* _internal_mutable_chunk_id();
  public:

  // .improbable.platform.runtime.Rectangle extent = 2;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::improbable::platform::runtime::Rectangle& extent() const;
  ::improbable::platform::runtime::Rectangle* release_extent();
  ::improbable::platform::runtime::Rectangle* mutable_extent();
  void set_allocated_extent(::improbable::platform::runtime::Rectangle* extent);
  private:
  const ::improbable::platform::runtime::Rectangle& _internal_extent() const;
  ::improbable::platform::runtime::Rectangle* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::improbable::platform::runtime::Rectangle* extent);
  ::improbable::platform::runtime::Rectangle* unsafe_arena_release_extent();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ChunkDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> subscribed_worker_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ChunkDetails_WorkerAssignmentsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> worker_assignments_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ChunkDetails_WorkerAssignmentOverridesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> worker_assignment_overrides_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_id_;
  ::improbable::platform::runtime::Rectangle* extent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntitySubscriptionQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntitySubscriptionQuery) */ {
 public:
  inline InspectionEntitySubscriptionQuery() : InspectionEntitySubscriptionQuery(nullptr) {}
  virtual ~InspectionEntitySubscriptionQuery();

  InspectionEntitySubscriptionQuery(const InspectionEntitySubscriptionQuery& from);
  InspectionEntitySubscriptionQuery(InspectionEntitySubscriptionQuery&& from) noexcept
    : InspectionEntitySubscriptionQuery() {
    *this = ::std::move(from);
  }

  inline InspectionEntitySubscriptionQuery& operator=(const InspectionEntitySubscriptionQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntitySubscriptionQuery& operator=(InspectionEntitySubscriptionQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntitySubscriptionQuery& default_instance();

  static inline const InspectionEntitySubscriptionQuery* internal_default_instance() {
    return reinterpret_cast<const InspectionEntitySubscriptionQuery*>(
               &_InspectionEntitySubscriptionQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(InspectionEntitySubscriptionQuery& a, InspectionEntitySubscriptionQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntitySubscriptionQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntitySubscriptionQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntitySubscriptionQuery* New() const final {
    return CreateMaybeMessage<InspectionEntitySubscriptionQuery>(nullptr);
  }

  InspectionEntitySubscriptionQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntitySubscriptionQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntitySubscriptionQuery& from);
  void MergeFrom(const InspectionEntitySubscriptionQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntitySubscriptionQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntitySubscriptionQuery";
  }
  protected:
  explicit InspectionEntitySubscriptionQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintFieldNumber = 1,
    kResultTypeFieldNumber = 2,
  };
  // .improbable.platform.runtime.InspectionEntityQueryConstraint constraint = 1;
  bool has_constraint() const;
  private:
  bool _internal_has_constraint() const;
  public:
  void clear_constraint();
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& constraint() const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* release_constraint();
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* mutable_constraint();
  void set_allocated_constraint(::improbable::platform::runtime::InspectionEntityQueryConstraint* constraint);
  private:
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& _internal_constraint() const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::improbable::platform::runtime::InspectionEntityQueryConstraint* constraint);
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* unsafe_arena_release_constraint();

  // .improbable.platform.runtime.InspectionQueryResultType result_type = 2;
  bool has_result_type() const;
  private:
  bool _internal_has_result_type() const;
  public:
  void clear_result_type();
  const ::improbable::platform::runtime::InspectionQueryResultType& result_type() const;
  ::improbable::platform::runtime::InspectionQueryResultType* release_result_type();
  ::improbable::platform::runtime::InspectionQueryResultType* mutable_result_type();
  void set_allocated_result_type(::improbable::platform::runtime::InspectionQueryResultType* result_type);
  private:
  const ::improbable::platform::runtime::InspectionQueryResultType& _internal_result_type() const;
  ::improbable::platform::runtime::InspectionQueryResultType* _internal_mutable_result_type();
  public:
  void unsafe_arena_set_allocated_result_type(
      ::improbable::platform::runtime::InspectionQueryResultType* result_type);
  ::improbable::platform::runtime::InspectionQueryResultType* unsafe_arena_release_result_type();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntitySubscriptionQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* constraint_;
  ::improbable::platform::runtime::InspectionQueryResultType* result_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntitySubscriptionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntitySubscriptionResponse) */ {
 public:
  inline InspectionEntitySubscriptionResponse() : InspectionEntitySubscriptionResponse(nullptr) {}
  virtual ~InspectionEntitySubscriptionResponse();

  InspectionEntitySubscriptionResponse(const InspectionEntitySubscriptionResponse& from);
  InspectionEntitySubscriptionResponse(InspectionEntitySubscriptionResponse&& from) noexcept
    : InspectionEntitySubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline InspectionEntitySubscriptionResponse& operator=(const InspectionEntitySubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntitySubscriptionResponse& operator=(InspectionEntitySubscriptionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntitySubscriptionResponse& default_instance();

  static inline const InspectionEntitySubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const InspectionEntitySubscriptionResponse*>(
               &_InspectionEntitySubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(InspectionEntitySubscriptionResponse& a, InspectionEntitySubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntitySubscriptionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntitySubscriptionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntitySubscriptionResponse* New() const final {
    return CreateMaybeMessage<InspectionEntitySubscriptionResponse>(nullptr);
  }

  InspectionEntitySubscriptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntitySubscriptionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntitySubscriptionResponse& from);
  void MergeFrom(const InspectionEntitySubscriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntitySubscriptionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntitySubscriptionResponse";
  }
  protected:
  explicit InspectionEntitySubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedEntitiesFieldNumber = 1,
    kRemovedComponentsFieldNumber = 2,
    kAddedEntitiesFieldNumber = 3,
    kUpdatedComponentsFieldNumber = 4,
    kAuthorityStatesFieldNumber = 5,
  };
  // repeated uint64 deleted_entities = 1;
  int deleted_entities_size() const;
  private:
  int _internal_deleted_entities_size() const;
  public:
  void clear_deleted_entities();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deleted_entities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_deleted_entities() const;
  void _internal_add_deleted_entities(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_deleted_entities();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 deleted_entities(int index) const;
  void set_deleted_entities(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_deleted_entities(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      deleted_entities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_deleted_entities();

  // repeated .improbable.platform.runtime.InspectionEntityComponentId removed_components = 2;
  int removed_components_size() const;
  private:
  int _internal_removed_components_size() const;
  public:
  void clear_removed_components();
  ::improbable::platform::runtime::InspectionEntityComponentId* mutable_removed_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentId >*
      mutable_removed_components();
  private:
  const ::improbable::platform::runtime::InspectionEntityComponentId& _internal_removed_components(int index) const;
  ::improbable::platform::runtime::InspectionEntityComponentId* _internal_add_removed_components();
  public:
  const ::improbable::platform::runtime::InspectionEntityComponentId& removed_components(int index) const;
  ::improbable::platform::runtime::InspectionEntityComponentId* add_removed_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentId >&
      removed_components() const;

  // repeated .improbable.platform.runtime.InspectionEntitySnapshot added_entities = 3;
  int added_entities_size() const;
  private:
  int _internal_added_entities_size() const;
  public:
  void clear_added_entities();
  ::improbable::platform::runtime::InspectionEntitySnapshot* mutable_added_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntitySnapshot >*
      mutable_added_entities();
  private:
  const ::improbable::platform::runtime::InspectionEntitySnapshot& _internal_added_entities(int index) const;
  ::improbable::platform::runtime::InspectionEntitySnapshot* _internal_add_added_entities();
  public:
  const ::improbable::platform::runtime::InspectionEntitySnapshot& added_entities(int index) const;
  ::improbable::platform::runtime::InspectionEntitySnapshot* add_added_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntitySnapshot >&
      added_entities() const;

  // repeated .improbable.platform.runtime.InspectionEntityComponentUpdate updated_components = 4;
  int updated_components_size() const;
  private:
  int _internal_updated_components_size() const;
  public:
  void clear_updated_components();
  ::improbable::platform::runtime::InspectionEntityComponentUpdate* mutable_updated_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentUpdate >*
      mutable_updated_components();
  private:
  const ::improbable::platform::runtime::InspectionEntityComponentUpdate& _internal_updated_components(int index) const;
  ::improbable::platform::runtime::InspectionEntityComponentUpdate* _internal_add_updated_components();
  public:
  const ::improbable::platform::runtime::InspectionEntityComponentUpdate& updated_components(int index) const;
  ::improbable::platform::runtime::InspectionEntityComponentUpdate* add_updated_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentUpdate >&
      updated_components() const;

  // repeated .improbable.platform.runtime.InspectionEntityAuthorityState authority_states = 5;
  int authority_states_size() const;
  private:
  int _internal_authority_states_size() const;
  public:
  void clear_authority_states();
  ::improbable::platform::runtime::InspectionEntityAuthorityState* mutable_authority_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityAuthorityState >*
      mutable_authority_states();
  private:
  const ::improbable::platform::runtime::InspectionEntityAuthorityState& _internal_authority_states(int index) const;
  ::improbable::platform::runtime::InspectionEntityAuthorityState* _internal_add_authority_states();
  public:
  const ::improbable::platform::runtime::InspectionEntityAuthorityState& authority_states(int index) const;
  ::improbable::platform::runtime::InspectionEntityAuthorityState* add_authority_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityAuthorityState >&
      authority_states() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntitySubscriptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > deleted_entities_;
  mutable std::atomic<int> _deleted_entities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentId > removed_components_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntitySnapshot > added_entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentUpdate > updated_components_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityAuthorityState > authority_states_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntityComponentId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntityComponentId) */ {
 public:
  inline InspectionEntityComponentId() : InspectionEntityComponentId(nullptr) {}
  virtual ~InspectionEntityComponentId();

  InspectionEntityComponentId(const InspectionEntityComponentId& from);
  InspectionEntityComponentId(InspectionEntityComponentId&& from) noexcept
    : InspectionEntityComponentId() {
    *this = ::std::move(from);
  }

  inline InspectionEntityComponentId& operator=(const InspectionEntityComponentId& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntityComponentId& operator=(InspectionEntityComponentId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntityComponentId& default_instance();

  static inline const InspectionEntityComponentId* internal_default_instance() {
    return reinterpret_cast<const InspectionEntityComponentId*>(
               &_InspectionEntityComponentId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(InspectionEntityComponentId& a, InspectionEntityComponentId& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntityComponentId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntityComponentId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntityComponentId* New() const final {
    return CreateMaybeMessage<InspectionEntityComponentId>(nullptr);
  }

  InspectionEntityComponentId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntityComponentId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntityComponentId& from);
  void MergeFrom(const InspectionEntityComponentId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntityComponentId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntityComponentId";
  }
  protected:
  explicit InspectionEntityComponentId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kComponentIdFieldNumber = 2,
  };
  // int64 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 component_id = 2;
  void clear_component_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 component_id() const;
  void set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component_id() const;
  void _internal_set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntityComponentId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 component_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntitySnapshot_ComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InspectionEntitySnapshot_ComponentsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InspectionEntitySnapshot_ComponentsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  InspectionEntitySnapshot_ComponentsEntry_DoNotUse();
  explicit InspectionEntitySnapshot_ComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InspectionEntitySnapshot_ComponentsEntry_DoNotUse& other);
  static const InspectionEntitySnapshot_ComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InspectionEntitySnapshot_ComponentsEntry_DoNotUse*>(&_InspectionEntitySnapshot_ComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[58];
  }

  public:
};

// -------------------------------------------------------------------

class InspectionEntitySnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntitySnapshot) */ {
 public:
  inline InspectionEntitySnapshot() : InspectionEntitySnapshot(nullptr) {}
  virtual ~InspectionEntitySnapshot();

  InspectionEntitySnapshot(const InspectionEntitySnapshot& from);
  InspectionEntitySnapshot(InspectionEntitySnapshot&& from) noexcept
    : InspectionEntitySnapshot() {
    *this = ::std::move(from);
  }

  inline InspectionEntitySnapshot& operator=(const InspectionEntitySnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntitySnapshot& operator=(InspectionEntitySnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntitySnapshot& default_instance();

  static inline const InspectionEntitySnapshot* internal_default_instance() {
    return reinterpret_cast<const InspectionEntitySnapshot*>(
               &_InspectionEntitySnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(InspectionEntitySnapshot& a, InspectionEntitySnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntitySnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntitySnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntitySnapshot* New() const final {
    return CreateMaybeMessage<InspectionEntitySnapshot>(nullptr);
  }

  InspectionEntitySnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntitySnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntitySnapshot& from);
  void MergeFrom(const InspectionEntitySnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntitySnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntitySnapshot";
  }
  protected:
  explicit InspectionEntitySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 2,
    kEntityIdFieldNumber = 1,
  };
  // map<uint32, bytes> components = 2;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_components();

  // int64 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntitySnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InspectionEntitySnapshot_ComponentsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> components_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntityComponentUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntityComponentUpdate) */ {
 public:
  inline InspectionEntityComponentUpdate() : InspectionEntityComponentUpdate(nullptr) {}
  virtual ~InspectionEntityComponentUpdate();

  InspectionEntityComponentUpdate(const InspectionEntityComponentUpdate& from);
  InspectionEntityComponentUpdate(InspectionEntityComponentUpdate&& from) noexcept
    : InspectionEntityComponentUpdate() {
    *this = ::std::move(from);
  }

  inline InspectionEntityComponentUpdate& operator=(const InspectionEntityComponentUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntityComponentUpdate& operator=(InspectionEntityComponentUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntityComponentUpdate& default_instance();

  static inline const InspectionEntityComponentUpdate* internal_default_instance() {
    return reinterpret_cast<const InspectionEntityComponentUpdate*>(
               &_InspectionEntityComponentUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(InspectionEntityComponentUpdate& a, InspectionEntityComponentUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntityComponentUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntityComponentUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntityComponentUpdate* New() const final {
    return CreateMaybeMessage<InspectionEntityComponentUpdate>(nullptr);
  }

  InspectionEntityComponentUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntityComponentUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntityComponentUpdate& from);
  void MergeFrom(const InspectionEntityComponentUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntityComponentUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntityComponentUpdate";
  }
  protected:
  explicit InspectionEntityComponentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsToClearFieldNumber = 3,
    kComponentFieldNumber = 2,
    kEntityComponentIdFieldNumber = 1,
  };
  // repeated uint32 fields_to_clear = 3;
  int fields_to_clear_size() const;
  private:
  int _internal_fields_to_clear_size() const;
  public:
  void clear_fields_to_clear();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fields_to_clear(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fields_to_clear() const;
  void _internal_add_fields_to_clear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fields_to_clear();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fields_to_clear(int index) const;
  void set_fields_to_clear(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fields_to_clear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fields_to_clear() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fields_to_clear();

  // bytes component = 2;
  void clear_component();
  const std::string& component() const;
  void set_component(const std::string& value);
  void set_component(std::string&& value);
  void set_component(const char* value);
  void set_component(const void* value, size_t size);
  std::string* mutable_component();
  std::string* release_component();
  void set_allocated_component(std::string* component);
  private:
  const std::string& _internal_component() const;
  void _internal_set_component(const std::string& value);
  std::string* _internal_mutable_component();
  public:

  // .improbable.platform.runtime.InspectionEntityComponentId entity_component_id = 1;
  bool has_entity_component_id() const;
  private:
  bool _internal_has_entity_component_id() const;
  public:
  void clear_entity_component_id();
  const ::improbable::platform::runtime::InspectionEntityComponentId& entity_component_id() const;
  ::improbable::platform::runtime::InspectionEntityComponentId* release_entity_component_id();
  ::improbable::platform::runtime::InspectionEntityComponentId* mutable_entity_component_id();
  void set_allocated_entity_component_id(::improbable::platform::runtime::InspectionEntityComponentId* entity_component_id);
  private:
  const ::improbable::platform::runtime::InspectionEntityComponentId& _internal_entity_component_id() const;
  ::improbable::platform::runtime::InspectionEntityComponentId* _internal_mutable_entity_component_id();
  public:
  void unsafe_arena_set_allocated_entity_component_id(
      ::improbable::platform::runtime::InspectionEntityComponentId* entity_component_id);
  ::improbable::platform::runtime::InspectionEntityComponentId* unsafe_arena_release_entity_component_id();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntityComponentUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fields_to_clear_;
  mutable std::atomic<int> _fields_to_clear_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_;
  ::improbable::platform::runtime::InspectionEntityComponentId* entity_component_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse();
  explicit InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse& other);
  static const InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse*>(&_InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "improbable.platform.runtime.InspectionEntityAuthorityState.ComponentAuthorityEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[61];
  }

  public:
};

// -------------------------------------------------------------------

class InspectionEntityAuthorityState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntityAuthorityState) */ {
 public:
  inline InspectionEntityAuthorityState() : InspectionEntityAuthorityState(nullptr) {}
  virtual ~InspectionEntityAuthorityState();

  InspectionEntityAuthorityState(const InspectionEntityAuthorityState& from);
  InspectionEntityAuthorityState(InspectionEntityAuthorityState&& from) noexcept
    : InspectionEntityAuthorityState() {
    *this = ::std::move(from);
  }

  inline InspectionEntityAuthorityState& operator=(const InspectionEntityAuthorityState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntityAuthorityState& operator=(InspectionEntityAuthorityState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntityAuthorityState& default_instance();

  static inline const InspectionEntityAuthorityState* internal_default_instance() {
    return reinterpret_cast<const InspectionEntityAuthorityState*>(
               &_InspectionEntityAuthorityState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(InspectionEntityAuthorityState& a, InspectionEntityAuthorityState& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntityAuthorityState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntityAuthorityState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntityAuthorityState* New() const final {
    return CreateMaybeMessage<InspectionEntityAuthorityState>(nullptr);
  }

  InspectionEntityAuthorityState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntityAuthorityState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntityAuthorityState& from);
  void MergeFrom(const InspectionEntityAuthorityState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntityAuthorityState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntityAuthorityState";
  }
  protected:
  explicit InspectionEntityAuthorityState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2finspection_2eproto);
    return ::descriptor_table_runtime_2finspection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kComponentAuthorityFieldNumber = 2,
    kEntityIdFieldNumber = 1,
  };
  // map<uint32, string> component_authority = 2;
  int component_authority_size() const;
  private:
  int _internal_component_authority_size() const;
  public:
  void clear_component_authority();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_component_authority() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_component_authority();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      component_authority() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_component_authority();

  // int64 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntityAuthorityState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InspectionEntityAuthorityState_ComponentAuthorityEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> component_authority_;
  ::PROTOBUF_NAMESPACE_ID::int64 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2finspection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityData

// int64 entity_id = 1;
inline void EntityData::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EntityData::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EntityData::entity_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityData.entity_id)
  return _internal_entity_id();
}
inline void EntityData::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
}
inline void EntityData::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityData.entity_id)
}

// repeated .improbable.platform.runtime.RenderableComponent renderable_components = 2;
inline int EntityData::_internal_renderable_components_size() const {
  return renderable_components_.size();
}
inline int EntityData::renderable_components_size() const {
  return _internal_renderable_components_size();
}
inline void EntityData::clear_renderable_components() {
  renderable_components_.Clear();
}
inline ::improbable::platform::runtime::RenderableComponent* EntityData::mutable_renderable_components(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityData.renderable_components)
  return renderable_components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::RenderableComponent >*
EntityData::mutable_renderable_components() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.EntityData.renderable_components)
  return &renderable_components_;
}
inline const ::improbable::platform::runtime::RenderableComponent& EntityData::_internal_renderable_components(int index) const {
  return renderable_components_.Get(index);
}
inline const ::improbable::platform::runtime::RenderableComponent& EntityData::renderable_components(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityData.renderable_components)
  return _internal_renderable_components(index);
}
inline ::improbable::platform::runtime::RenderableComponent* EntityData::_internal_add_renderable_components() {
  return renderable_components_.Add();
}
inline ::improbable::platform::runtime::RenderableComponent* EntityData::add_renderable_components() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.EntityData.renderable_components)
  return _internal_add_renderable_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::RenderableComponent >&
EntityData::renderable_components() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.EntityData.renderable_components)
  return renderable_components_;
}

// string prefab = 3 [deprecated = true];
inline void EntityData::clear_prefab() {
  prefab_.ClearToEmpty();
}
inline const std::string& EntityData::prefab() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityData.prefab)
  return _internal_prefab();
}
inline void EntityData::set_prefab(const std::string& value) {
  _internal_set_prefab(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityData.prefab)
}
inline std::string* EntityData::mutable_prefab() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityData.prefab)
  return _internal_mutable_prefab();
}
inline const std::string& EntityData::_internal_prefab() const {
  return prefab_.Get();
}
inline void EntityData::_internal_set_prefab(const std::string& value) {
  
  prefab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EntityData::set_prefab(std::string&& value) {
  
  prefab_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.EntityData.prefab)
}
inline void EntityData::set_prefab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.EntityData.prefab)
}
inline void EntityData::set_prefab(const char* value,
    size_t size) {
  
  prefab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.EntityData.prefab)
}
inline std::string* EntityData::_internal_mutable_prefab() {
  
  return prefab_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EntityData::release_prefab() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityData.prefab)
  return prefab_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityData::set_allocated_prefab(std::string* prefab) {
  if (prefab != nullptr) {
    
  } else {
    
  }
  prefab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefab,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.EntityData.prefab)
}

// .improbable.platform.runtime.EntityPosition entity_position = 4 [deprecated = true];
inline bool EntityData::_internal_has_entity_position() const {
  return this != internal_default_instance() && entity_position_ != nullptr;
}
inline bool EntityData::has_entity_position() const {
  return _internal_has_entity_position();
}
inline void EntityData::clear_entity_position() {
  if (GetArena() == nullptr && entity_position_ != nullptr) {
    delete entity_position_;
  }
  entity_position_ = nullptr;
}
inline const ::improbable::platform::runtime::EntityPosition& EntityData::_internal_entity_position() const {
  const ::improbable::platform::runtime::EntityPosition* p = entity_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::EntityPosition&>(
      ::improbable::platform::runtime::_EntityPosition_default_instance_);
}
inline const ::improbable::platform::runtime::EntityPosition& EntityData::entity_position() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityData.entity_position)
  return _internal_entity_position();
}
inline void EntityData::unsafe_arena_set_allocated_entity_position(
    ::improbable::platform::runtime::EntityPosition* entity_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_position_);
  }
  entity_position_ = entity_position;
  if (entity_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityData.entity_position)
}
inline ::improbable::platform::runtime::EntityPosition* EntityData::release_entity_position() {
  
  ::improbable::platform::runtime::EntityPosition* temp = entity_position_;
  entity_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::EntityPosition* EntityData::unsafe_arena_release_entity_position() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityData.entity_position)
  
  ::improbable::platform::runtime::EntityPosition* temp = entity_position_;
  entity_position_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::EntityPosition* EntityData::_internal_mutable_entity_position() {
  
  if (entity_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::EntityPosition>(GetArena());
    entity_position_ = p;
  }
  return entity_position_;
}
inline ::improbable::platform::runtime::EntityPosition* EntityData::mutable_entity_position() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityData.entity_position)
  return _internal_mutable_entity_position();
}
inline void EntityData::set_allocated_entity_position(::improbable::platform::runtime::EntityPosition* entity_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entity_position_;
  }
  if (entity_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_position);
    if (message_arena != submessage_arena) {
      entity_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_position, submessage_arena);
    }
    
  } else {
    
  }
  entity_position_ = entity_position;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.EntityData.entity_position)
}

// -------------------------------------------------------------------

// EntityPosition

// double x = 1;
inline void EntityPosition::clear_x() {
  x_ = 0;
}
inline double EntityPosition::_internal_x() const {
  return x_;
}
inline double EntityPosition::x() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityPosition.x)
  return _internal_x();
}
inline void EntityPosition::_internal_set_x(double value) {
  
  x_ = value;
}
inline void EntityPosition::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityPosition.x)
}

// double y = 2;
inline void EntityPosition::clear_y() {
  y_ = 0;
}
inline double EntityPosition::_internal_y() const {
  return y_;
}
inline double EntityPosition::y() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityPosition.y)
  return _internal_y();
}
inline void EntityPosition::_internal_set_y(double value) {
  
  y_ = value;
}
inline void EntityPosition::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityPosition.y)
}

// double z = 3;
inline void EntityPosition::clear_z() {
  z_ = 0;
}
inline double EntityPosition::_internal_z() const {
  return z_;
}
inline double EntityPosition::z() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityPosition.z)
  return _internal_z();
}
inline void EntityPosition::_internal_set_z(double value) {
  
  z_ = value;
}
inline void EntityPosition::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityPosition.z)
}

// -------------------------------------------------------------------

// RenderableComponent

// string name = 1;
inline void RenderableComponent::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RenderableComponent::name() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RenderableComponent.name)
  return _internal_name();
}
inline void RenderableComponent::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RenderableComponent.name)
}
inline std::string* RenderableComponent::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.RenderableComponent.name)
  return _internal_mutable_name();
}
inline const std::string& RenderableComponent::_internal_name() const {
  return name_.Get();
}
inline void RenderableComponent::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RenderableComponent::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.RenderableComponent.name)
}
inline void RenderableComponent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.RenderableComponent.name)
}
inline void RenderableComponent::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.RenderableComponent.name)
}
inline std::string* RenderableComponent::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RenderableComponent::release_name() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.RenderableComponent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenderableComponent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.RenderableComponent.name)
}

// string value = 2;
inline void RenderableComponent::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& RenderableComponent::value() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RenderableComponent.value)
  return _internal_value();
}
inline void RenderableComponent::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RenderableComponent.value)
}
inline std::string* RenderableComponent::mutable_value() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.RenderableComponent.value)
  return _internal_mutable_value();
}
inline const std::string& RenderableComponent::_internal_value() const {
  return value_.Get();
}
inline void RenderableComponent::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RenderableComponent::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.RenderableComponent.value)
}
inline void RenderableComponent::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.RenderableComponent.value)
}
inline void RenderableComponent::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.RenderableComponent.value)
}
inline std::string* RenderableComponent::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RenderableComponent::release_value() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.RenderableComponent.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenderableComponent::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.RenderableComponent.value)
}

// string assigned_worker_id = 3;
inline void RenderableComponent::clear_assigned_worker_id() {
  assigned_worker_id_.ClearToEmpty();
}
inline const std::string& RenderableComponent::assigned_worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
  return _internal_assigned_worker_id();
}
inline void RenderableComponent::set_assigned_worker_id(const std::string& value) {
  _internal_set_assigned_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
}
inline std::string* RenderableComponent::mutable_assigned_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
  return _internal_mutable_assigned_worker_id();
}
inline const std::string& RenderableComponent::_internal_assigned_worker_id() const {
  return assigned_worker_id_.Get();
}
inline void RenderableComponent::_internal_set_assigned_worker_id(const std::string& value) {
  
  assigned_worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RenderableComponent::set_assigned_worker_id(std::string&& value) {
  
  assigned_worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
}
inline void RenderableComponent::set_assigned_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assigned_worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
}
inline void RenderableComponent::set_assigned_worker_id(const char* value,
    size_t size) {
  
  assigned_worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
}
inline std::string* RenderableComponent::_internal_mutable_assigned_worker_id() {
  
  return assigned_worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RenderableComponent::release_assigned_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
  return assigned_worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RenderableComponent::set_allocated_assigned_worker_id(std::string* assigned_worker_id) {
  if (assigned_worker_id != nullptr) {
    
  } else {
    
  }
  assigned_worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assigned_worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.RenderableComponent.assigned_worker_id)
}

// uint32 component_id = 4;
inline void RenderableComponent::clear_component_id() {
  component_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderableComponent::_internal_component_id() const {
  return component_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderableComponent::component_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.RenderableComponent.component_id)
  return _internal_component_id();
}
inline void RenderableComponent::_internal_set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  component_id_ = value;
}
inline void RenderableComponent::set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.RenderableComponent.component_id)
}

// -------------------------------------------------------------------

// WorkerNodeRequest

// string worker_id = 1;
inline void WorkerNodeRequest::clear_worker_id() {
  worker_id_.ClearToEmpty();
}
inline const std::string& WorkerNodeRequest::worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerNodeRequest.worker_id)
  return _internal_worker_id();
}
inline void WorkerNodeRequest::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerNodeRequest.worker_id)
}
inline std::string* WorkerNodeRequest::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerNodeRequest.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& WorkerNodeRequest::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void WorkerNodeRequest::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerNodeRequest::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.WorkerNodeRequest.worker_id)
}
inline void WorkerNodeRequest::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.WorkerNodeRequest.worker_id)
}
inline void WorkerNodeRequest::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.WorkerNodeRequest.worker_id)
}
inline std::string* WorkerNodeRequest::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerNodeRequest::release_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerNodeRequest.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerNodeRequest::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerNodeRequest.worker_id)
}

// -------------------------------------------------------------------

// WorkerNodeResponse

// string node_name = 1;
inline void WorkerNodeResponse::clear_node_name() {
  node_name_.ClearToEmpty();
}
inline const std::string& WorkerNodeResponse::node_name() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerNodeResponse.node_name)
  return _internal_node_name();
}
inline void WorkerNodeResponse::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerNodeResponse.node_name)
}
inline std::string* WorkerNodeResponse::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerNodeResponse.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& WorkerNodeResponse::_internal_node_name() const {
  return node_name_.Get();
}
inline void WorkerNodeResponse::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerNodeResponse::set_node_name(std::string&& value) {
  
  node_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.WorkerNodeResponse.node_name)
}
inline void WorkerNodeResponse::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.WorkerNodeResponse.node_name)
}
inline void WorkerNodeResponse::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.WorkerNodeResponse.node_name)
}
inline std::string* WorkerNodeResponse::_internal_mutable_node_name() {
  
  return node_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerNodeResponse::release_node_name() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerNodeResponse.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerNodeResponse::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerNodeResponse.node_name)
}

// -------------------------------------------------------------------

// DeleteWorkerRequest

// string worker_id = 1;
inline void DeleteWorkerRequest::clear_worker_id() {
  worker_id_.ClearToEmpty();
}
inline const std::string& DeleteWorkerRequest::worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
  return _internal_worker_id();
}
inline void DeleteWorkerRequest::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
}
inline std::string* DeleteWorkerRequest::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& DeleteWorkerRequest::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void DeleteWorkerRequest::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteWorkerRequest::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
}
inline void DeleteWorkerRequest::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
}
inline void DeleteWorkerRequest::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
}
inline std::string* DeleteWorkerRequest::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteWorkerRequest::release_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteWorkerRequest::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.DeleteWorkerRequest.worker_id)
}

// -------------------------------------------------------------------

// DeleteWorkerResponse

// -------------------------------------------------------------------

// DeleteEntitiesRequest

// repeated .improbable.platform.runtime.EntityId entity_ids = 1;
inline int DeleteEntitiesRequest::_internal_entity_ids_size() const {
  return entity_ids_.size();
}
inline int DeleteEntitiesRequest::entity_ids_size() const {
  return _internal_entity_ids_size();
}
inline ::improbable::platform::runtime::EntityId* DeleteEntitiesRequest::mutable_entity_ids(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.DeleteEntitiesRequest.entity_ids)
  return entity_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::EntityId >*
DeleteEntitiesRequest::mutable_entity_ids() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.DeleteEntitiesRequest.entity_ids)
  return &entity_ids_;
}
inline const ::improbable::platform::runtime::EntityId& DeleteEntitiesRequest::_internal_entity_ids(int index) const {
  return entity_ids_.Get(index);
}
inline const ::improbable::platform::runtime::EntityId& DeleteEntitiesRequest::entity_ids(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.DeleteEntitiesRequest.entity_ids)
  return _internal_entity_ids(index);
}
inline ::improbable::platform::runtime::EntityId* DeleteEntitiesRequest::_internal_add_entity_ids() {
  return entity_ids_.Add();
}
inline ::improbable::platform::runtime::EntityId* DeleteEntitiesRequest::add_entity_ids() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.DeleteEntitiesRequest.entity_ids)
  return _internal_add_entity_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::EntityId >&
DeleteEntitiesRequest::entity_ids() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.DeleteEntitiesRequest.entity_ids)
  return entity_ids_;
}

// -------------------------------------------------------------------

// DeleteEntitiesResponse

// -------------------------------------------------------------------

// Heatmap_Cell

// int64 entity_count = 1;
inline void Heatmap_Cell::clear_entity_count() {
  entity_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Heatmap_Cell::_internal_entity_count() const {
  return entity_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Heatmap_Cell::entity_count() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Heatmap.Cell.entity_count)
  return _internal_entity_count();
}
inline void Heatmap_Cell::_internal_set_entity_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_count_ = value;
}
inline void Heatmap_Cell::set_entity_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_count(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.Heatmap.Cell.entity_count)
}

// .improbable.platform.runtime.Rectangle extent = 2;
inline bool Heatmap_Cell::_internal_has_extent() const {
  return this != internal_default_instance() && extent_ != nullptr;
}
inline bool Heatmap_Cell::has_extent() const {
  return _internal_has_extent();
}
inline const ::improbable::platform::runtime::Rectangle& Heatmap_Cell::_internal_extent() const {
  const ::improbable::platform::runtime::Rectangle* p = extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Rectangle&>(
      ::improbable::platform::runtime::_Rectangle_default_instance_);
}
inline const ::improbable::platform::runtime::Rectangle& Heatmap_Cell::extent() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Heatmap.Cell.extent)
  return _internal_extent();
}
inline void Heatmap_Cell::unsafe_arena_set_allocated_extent(
    ::improbable::platform::runtime::Rectangle* extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.Heatmap.Cell.extent)
}
inline ::improbable::platform::runtime::Rectangle* Heatmap_Cell::release_extent() {
  
  ::improbable::platform::runtime::Rectangle* temp = extent_;
  extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* Heatmap_Cell::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.Heatmap.Cell.extent)
  
  ::improbable::platform::runtime::Rectangle* temp = extent_;
  extent_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* Heatmap_Cell::_internal_mutable_extent() {
  
  if (extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Rectangle>(GetArena());
    extent_ = p;
  }
  return extent_;
}
inline ::improbable::platform::runtime::Rectangle* Heatmap_Cell::mutable_extent() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.Heatmap.Cell.extent)
  return _internal_mutable_extent();
}
inline void Heatmap_Cell::set_allocated_extent(::improbable::platform::runtime::Rectangle* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent)->GetArena();
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.Heatmap.Cell.extent)
}

// -------------------------------------------------------------------

// Heatmap

// repeated .improbable.platform.runtime.Heatmap.Cell cells = 1;
inline int Heatmap::_internal_cells_size() const {
  return cells_.size();
}
inline int Heatmap::cells_size() const {
  return _internal_cells_size();
}
inline void Heatmap::clear_cells() {
  cells_.Clear();
}
inline ::improbable::platform::runtime::Heatmap_Cell* Heatmap::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.Heatmap.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Heatmap_Cell >*
Heatmap::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.Heatmap.cells)
  return &cells_;
}
inline const ::improbable::platform::runtime::Heatmap_Cell& Heatmap::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::improbable::platform::runtime::Heatmap_Cell& Heatmap::cells(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Heatmap.cells)
  return _internal_cells(index);
}
inline ::improbable::platform::runtime::Heatmap_Cell* Heatmap::_internal_add_cells() {
  return cells_.Add();
}
inline ::improbable::platform::runtime::Heatmap_Cell* Heatmap::add_cells() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.Heatmap.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Heatmap_Cell >&
Heatmap::cells() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.Heatmap.cells)
  return cells_;
}

// -------------------------------------------------------------------

// EntityHeatmapOptions_Resolution_ChunkResolution

// -------------------------------------------------------------------

// EntityHeatmapOptions_Resolution_SquareGridResolution

// int32 edge_length = 1;
inline void EntityHeatmapOptions_Resolution_SquareGridResolution::clear_edge_length() {
  edge_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityHeatmapOptions_Resolution_SquareGridResolution::_internal_edge_length() const {
  return edge_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityHeatmapOptions_Resolution_SquareGridResolution::edge_length() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution.edge_length)
  return _internal_edge_length();
}
inline void EntityHeatmapOptions_Resolution_SquareGridResolution::_internal_set_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  edge_length_ = value;
}
inline void EntityHeatmapOptions_Resolution_SquareGridResolution::set_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_edge_length(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution.edge_length)
}

// -------------------------------------------------------------------

// EntityHeatmapOptions_Resolution_AutoResolution

// int32 max_cells = 1;
inline void EntityHeatmapOptions_Resolution_AutoResolution::clear_max_cells() {
  max_cells_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityHeatmapOptions_Resolution_AutoResolution::_internal_max_cells() const {
  return max_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntityHeatmapOptions_Resolution_AutoResolution::max_cells() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution.max_cells)
  return _internal_max_cells();
}
inline void EntityHeatmapOptions_Resolution_AutoResolution::_internal_set_max_cells(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_cells_ = value;
}
inline void EntityHeatmapOptions_Resolution_AutoResolution::set_max_cells(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_cells(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution.max_cells)
}

// -------------------------------------------------------------------

// EntityHeatmapOptions_Resolution

// .improbable.platform.runtime.EntityHeatmapOptions.Resolution.ChunkResolution as_chunks = 1;
inline bool EntityHeatmapOptions_Resolution::_internal_has_as_chunks() const {
  return resolution_type_case() == kAsChunks;
}
inline bool EntityHeatmapOptions_Resolution::has_as_chunks() const {
  return _internal_has_as_chunks();
}
inline void EntityHeatmapOptions_Resolution::set_has_as_chunks() {
  _oneof_case_[0] = kAsChunks;
}
inline void EntityHeatmapOptions_Resolution::clear_as_chunks() {
  if (_internal_has_as_chunks()) {
    if (GetArena() == nullptr) {
      delete resolution_type_.as_chunks_;
    }
    clear_has_resolution_type();
  }
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* EntityHeatmapOptions_Resolution::release_as_chunks() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityHeatmapOptions.Resolution.as_chunks)
  if (_internal_has_as_chunks()) {
    clear_has_resolution_type();
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* temp = resolution_type_.as_chunks_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resolution_type_.as_chunks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution& EntityHeatmapOptions_Resolution::_internal_as_chunks() const {
  return _internal_has_as_chunks()
      ? *resolution_type_.as_chunks_
      : reinterpret_cast< ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution&>(::improbable::platform::runtime::_EntityHeatmapOptions_Resolution_ChunkResolution_default_instance_);
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution& EntityHeatmapOptions_Resolution::as_chunks() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.Resolution.as_chunks)
  return _internal_as_chunks();
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* EntityHeatmapOptions_Resolution::unsafe_arena_release_as_chunks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.EntityHeatmapOptions.Resolution.as_chunks)
  if (_internal_has_as_chunks()) {
    clear_has_resolution_type();
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* temp = resolution_type_.as_chunks_;
    resolution_type_.as_chunks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityHeatmapOptions_Resolution::unsafe_arena_set_allocated_as_chunks(::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* as_chunks) {
  clear_resolution_type();
  if (as_chunks) {
    set_has_as_chunks();
    resolution_type_.as_chunks_ = as_chunks;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.Resolution.as_chunks)
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* EntityHeatmapOptions_Resolution::_internal_mutable_as_chunks() {
  if (!_internal_has_as_chunks()) {
    clear_resolution_type();
    set_has_as_chunks();
    resolution_type_.as_chunks_ = CreateMaybeMessage< ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution >(GetArena());
  }
  return resolution_type_.as_chunks_;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_ChunkResolution* EntityHeatmapOptions_Resolution::mutable_as_chunks() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityHeatmapOptions.Resolution.as_chunks)
  return _internal_mutable_as_chunks();
}

// .improbable.platform.runtime.EntityHeatmapOptions.Resolution.SquareGridResolution square_grid = 2;
inline bool EntityHeatmapOptions_Resolution::_internal_has_square_grid() const {
  return resolution_type_case() == kSquareGrid;
}
inline bool EntityHeatmapOptions_Resolution::has_square_grid() const {
  return _internal_has_square_grid();
}
inline void EntityHeatmapOptions_Resolution::set_has_square_grid() {
  _oneof_case_[0] = kSquareGrid;
}
inline void EntityHeatmapOptions_Resolution::clear_square_grid() {
  if (_internal_has_square_grid()) {
    if (GetArena() == nullptr) {
      delete resolution_type_.square_grid_;
    }
    clear_has_resolution_type();
  }
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* EntityHeatmapOptions_Resolution::release_square_grid() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityHeatmapOptions.Resolution.square_grid)
  if (_internal_has_square_grid()) {
    clear_has_resolution_type();
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* temp = resolution_type_.square_grid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resolution_type_.square_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution& EntityHeatmapOptions_Resolution::_internal_square_grid() const {
  return _internal_has_square_grid()
      ? *resolution_type_.square_grid_
      : reinterpret_cast< ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution&>(::improbable::platform::runtime::_EntityHeatmapOptions_Resolution_SquareGridResolution_default_instance_);
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution& EntityHeatmapOptions_Resolution::square_grid() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.Resolution.square_grid)
  return _internal_square_grid();
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* EntityHeatmapOptions_Resolution::unsafe_arena_release_square_grid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.EntityHeatmapOptions.Resolution.square_grid)
  if (_internal_has_square_grid()) {
    clear_has_resolution_type();
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* temp = resolution_type_.square_grid_;
    resolution_type_.square_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityHeatmapOptions_Resolution::unsafe_arena_set_allocated_square_grid(::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* square_grid) {
  clear_resolution_type();
  if (square_grid) {
    set_has_square_grid();
    resolution_type_.square_grid_ = square_grid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.Resolution.square_grid)
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* EntityHeatmapOptions_Resolution::_internal_mutable_square_grid() {
  if (!_internal_has_square_grid()) {
    clear_resolution_type();
    set_has_square_grid();
    resolution_type_.square_grid_ = CreateMaybeMessage< ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution >(GetArena());
  }
  return resolution_type_.square_grid_;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_SquareGridResolution* EntityHeatmapOptions_Resolution::mutable_square_grid() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityHeatmapOptions.Resolution.square_grid)
  return _internal_mutable_square_grid();
}

// .improbable.platform.runtime.EntityHeatmapOptions.Resolution.AutoResolution auto_resolution = 3;
inline bool EntityHeatmapOptions_Resolution::_internal_has_auto_resolution() const {
  return resolution_type_case() == kAutoResolution;
}
inline bool EntityHeatmapOptions_Resolution::has_auto_resolution() const {
  return _internal_has_auto_resolution();
}
inline void EntityHeatmapOptions_Resolution::set_has_auto_resolution() {
  _oneof_case_[0] = kAutoResolution;
}
inline void EntityHeatmapOptions_Resolution::clear_auto_resolution() {
  if (_internal_has_auto_resolution()) {
    if (GetArena() == nullptr) {
      delete resolution_type_.auto_resolution_;
    }
    clear_has_resolution_type();
  }
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* EntityHeatmapOptions_Resolution::release_auto_resolution() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityHeatmapOptions.Resolution.auto_resolution)
  if (_internal_has_auto_resolution()) {
    clear_has_resolution_type();
      ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* temp = resolution_type_.auto_resolution_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    resolution_type_.auto_resolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution& EntityHeatmapOptions_Resolution::_internal_auto_resolution() const {
  return _internal_has_auto_resolution()
      ? *resolution_type_.auto_resolution_
      : reinterpret_cast< ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution&>(::improbable::platform::runtime::_EntityHeatmapOptions_Resolution_AutoResolution_default_instance_);
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution& EntityHeatmapOptions_Resolution::auto_resolution() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.Resolution.auto_resolution)
  return _internal_auto_resolution();
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* EntityHeatmapOptions_Resolution::unsafe_arena_release_auto_resolution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.EntityHeatmapOptions.Resolution.auto_resolution)
  if (_internal_has_auto_resolution()) {
    clear_has_resolution_type();
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* temp = resolution_type_.auto_resolution_;
    resolution_type_.auto_resolution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EntityHeatmapOptions_Resolution::unsafe_arena_set_allocated_auto_resolution(::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* auto_resolution) {
  clear_resolution_type();
  if (auto_resolution) {
    set_has_auto_resolution();
    resolution_type_.auto_resolution_ = auto_resolution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.Resolution.auto_resolution)
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* EntityHeatmapOptions_Resolution::_internal_mutable_auto_resolution() {
  if (!_internal_has_auto_resolution()) {
    clear_resolution_type();
    set_has_auto_resolution();
    resolution_type_.auto_resolution_ = CreateMaybeMessage< ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution >(GetArena());
  }
  return resolution_type_.auto_resolution_;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution_AutoResolution* EntityHeatmapOptions_Resolution::mutable_auto_resolution() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityHeatmapOptions.Resolution.auto_resolution)
  return _internal_mutable_auto_resolution();
}

inline bool EntityHeatmapOptions_Resolution::has_resolution_type() const {
  return resolution_type_case() != RESOLUTION_TYPE_NOT_SET;
}
inline void EntityHeatmapOptions_Resolution::clear_has_resolution_type() {
  _oneof_case_[0] = RESOLUTION_TYPE_NOT_SET;
}
inline EntityHeatmapOptions_Resolution::ResolutionTypeCase EntityHeatmapOptions_Resolution::resolution_type_case() const {
  return EntityHeatmapOptions_Resolution::ResolutionTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EntityHeatmapOptions

// .improbable.platform.runtime.Rectangle viewport = 1;
inline bool EntityHeatmapOptions::_internal_has_viewport() const {
  return this != internal_default_instance() && viewport_ != nullptr;
}
inline bool EntityHeatmapOptions::has_viewport() const {
  return _internal_has_viewport();
}
inline const ::improbable::platform::runtime::Rectangle& EntityHeatmapOptions::_internal_viewport() const {
  const ::improbable::platform::runtime::Rectangle* p = viewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Rectangle&>(
      ::improbable::platform::runtime::_Rectangle_default_instance_);
}
inline const ::improbable::platform::runtime::Rectangle& EntityHeatmapOptions::viewport() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.viewport)
  return _internal_viewport();
}
inline void EntityHeatmapOptions::unsafe_arena_set_allocated_viewport(
    ::improbable::platform::runtime::Rectangle* viewport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport_);
  }
  viewport_ = viewport;
  if (viewport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.viewport)
}
inline ::improbable::platform::runtime::Rectangle* EntityHeatmapOptions::release_viewport() {
  
  ::improbable::platform::runtime::Rectangle* temp = viewport_;
  viewport_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* EntityHeatmapOptions::unsafe_arena_release_viewport() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityHeatmapOptions.viewport)
  
  ::improbable::platform::runtime::Rectangle* temp = viewport_;
  viewport_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* EntityHeatmapOptions::_internal_mutable_viewport() {
  
  if (viewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Rectangle>(GetArena());
    viewport_ = p;
  }
  return viewport_;
}
inline ::improbable::platform::runtime::Rectangle* EntityHeatmapOptions::mutable_viewport() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityHeatmapOptions.viewport)
  return _internal_mutable_viewport();
}
inline void EntityHeatmapOptions::set_allocated_viewport(::improbable::platform::runtime::Rectangle* viewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport_);
  }
  if (viewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport)->GetArena();
    if (message_arena != submessage_arena) {
      viewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewport, submessage_arena);
    }
    
  } else {
    
  }
  viewport_ = viewport;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.viewport)
}

// .improbable.platform.runtime.EntityHeatmapOptions.Resolution resolution = 2;
inline bool EntityHeatmapOptions::_internal_has_resolution() const {
  return this != internal_default_instance() && resolution_ != nullptr;
}
inline bool EntityHeatmapOptions::has_resolution() const {
  return _internal_has_resolution();
}
inline void EntityHeatmapOptions::clear_resolution() {
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution& EntityHeatmapOptions::_internal_resolution() const {
  const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* p = resolution_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution&>(
      ::improbable::platform::runtime::_EntityHeatmapOptions_Resolution_default_instance_);
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions_Resolution& EntityHeatmapOptions::resolution() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityHeatmapOptions.resolution)
  return _internal_resolution();
}
inline void EntityHeatmapOptions::unsafe_arena_set_allocated_resolution(
    ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* resolution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolution_);
  }
  resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.resolution)
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* EntityHeatmapOptions::release_resolution() {
  
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* temp = resolution_;
  resolution_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* EntityHeatmapOptions::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityHeatmapOptions.resolution)
  
  ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* temp = resolution_;
  resolution_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* EntityHeatmapOptions::_internal_mutable_resolution() {
  
  if (resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions_Resolution>(GetArena());
    resolution_ = p;
  }
  return resolution_;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions_Resolution* EntityHeatmapOptions::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityHeatmapOptions.resolution)
  return _internal_mutable_resolution();
}
inline void EntityHeatmapOptions::set_allocated_resolution(::improbable::platform::runtime::EntityHeatmapOptions_Resolution* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resolution_;
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resolution);
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    
  } else {
    
  }
  resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.EntityHeatmapOptions.resolution)
}

// -------------------------------------------------------------------

// GetEntityHeatmapRequest

// .improbable.platform.runtime.EntityHeatmapOptions entity_heatmap_options = 1;
inline bool GetEntityHeatmapRequest::_internal_has_entity_heatmap_options() const {
  return this != internal_default_instance() && entity_heatmap_options_ != nullptr;
}
inline bool GetEntityHeatmapRequest::has_entity_heatmap_options() const {
  return _internal_has_entity_heatmap_options();
}
inline void GetEntityHeatmapRequest::clear_entity_heatmap_options() {
  if (GetArena() == nullptr && entity_heatmap_options_ != nullptr) {
    delete entity_heatmap_options_;
  }
  entity_heatmap_options_ = nullptr;
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions& GetEntityHeatmapRequest::_internal_entity_heatmap_options() const {
  const ::improbable::platform::runtime::EntityHeatmapOptions* p = entity_heatmap_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::EntityHeatmapOptions&>(
      ::improbable::platform::runtime::_EntityHeatmapOptions_default_instance_);
}
inline const ::improbable::platform::runtime::EntityHeatmapOptions& GetEntityHeatmapRequest::entity_heatmap_options() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetEntityHeatmapRequest.entity_heatmap_options)
  return _internal_entity_heatmap_options();
}
inline void GetEntityHeatmapRequest::unsafe_arena_set_allocated_entity_heatmap_options(
    ::improbable::platform::runtime::EntityHeatmapOptions* entity_heatmap_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_heatmap_options_);
  }
  entity_heatmap_options_ = entity_heatmap_options;
  if (entity_heatmap_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetEntityHeatmapRequest.entity_heatmap_options)
}
inline ::improbable::platform::runtime::EntityHeatmapOptions* GetEntityHeatmapRequest::release_entity_heatmap_options() {
  
  ::improbable::platform::runtime::EntityHeatmapOptions* temp = entity_heatmap_options_;
  entity_heatmap_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions* GetEntityHeatmapRequest::unsafe_arena_release_entity_heatmap_options() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetEntityHeatmapRequest.entity_heatmap_options)
  
  ::improbable::platform::runtime::EntityHeatmapOptions* temp = entity_heatmap_options_;
  entity_heatmap_options_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions* GetEntityHeatmapRequest::_internal_mutable_entity_heatmap_options() {
  
  if (entity_heatmap_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::EntityHeatmapOptions>(GetArena());
    entity_heatmap_options_ = p;
  }
  return entity_heatmap_options_;
}
inline ::improbable::platform::runtime::EntityHeatmapOptions* GetEntityHeatmapRequest::mutable_entity_heatmap_options() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetEntityHeatmapRequest.entity_heatmap_options)
  return _internal_mutable_entity_heatmap_options();
}
inline void GetEntityHeatmapRequest::set_allocated_entity_heatmap_options(::improbable::platform::runtime::EntityHeatmapOptions* entity_heatmap_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entity_heatmap_options_;
  }
  if (entity_heatmap_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_heatmap_options);
    if (message_arena != submessage_arena) {
      entity_heatmap_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_heatmap_options, submessage_arena);
    }
    
  } else {
    
  }
  entity_heatmap_options_ = entity_heatmap_options;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetEntityHeatmapRequest.entity_heatmap_options)
}

// int64 desired_response_interval_ms = 2;
inline void GetEntityHeatmapRequest::clear_desired_response_interval_ms() {
  desired_response_interval_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityHeatmapRequest::_internal_desired_response_interval_ms() const {
  return desired_response_interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityHeatmapRequest::desired_response_interval_ms() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetEntityHeatmapRequest.desired_response_interval_ms)
  return _internal_desired_response_interval_ms();
}
inline void GetEntityHeatmapRequest::_internal_set_desired_response_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  desired_response_interval_ms_ = value;
}
inline void GetEntityHeatmapRequest::set_desired_response_interval_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_desired_response_interval_ms(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetEntityHeatmapRequest.desired_response_interval_ms)
}

// -------------------------------------------------------------------

// GetEntityHeatmapResponse

// .improbable.platform.runtime.Heatmap heatmap = 1;
inline bool GetEntityHeatmapResponse::_internal_has_heatmap() const {
  return this != internal_default_instance() && heatmap_ != nullptr;
}
inline bool GetEntityHeatmapResponse::has_heatmap() const {
  return _internal_has_heatmap();
}
inline void GetEntityHeatmapResponse::clear_heatmap() {
  if (GetArena() == nullptr && heatmap_ != nullptr) {
    delete heatmap_;
  }
  heatmap_ = nullptr;
}
inline const ::improbable::platform::runtime::Heatmap& GetEntityHeatmapResponse::_internal_heatmap() const {
  const ::improbable::platform::runtime::Heatmap* p = heatmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Heatmap&>(
      ::improbable::platform::runtime::_Heatmap_default_instance_);
}
inline const ::improbable::platform::runtime::Heatmap& GetEntityHeatmapResponse::heatmap() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetEntityHeatmapResponse.heatmap)
  return _internal_heatmap();
}
inline void GetEntityHeatmapResponse::unsafe_arena_set_allocated_heatmap(
    ::improbable::platform::runtime::Heatmap* heatmap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heatmap_);
  }
  heatmap_ = heatmap;
  if (heatmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetEntityHeatmapResponse.heatmap)
}
inline ::improbable::platform::runtime::Heatmap* GetEntityHeatmapResponse::release_heatmap() {
  
  ::improbable::platform::runtime::Heatmap* temp = heatmap_;
  heatmap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Heatmap* GetEntityHeatmapResponse::unsafe_arena_release_heatmap() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetEntityHeatmapResponse.heatmap)
  
  ::improbable::platform::runtime::Heatmap* temp = heatmap_;
  heatmap_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Heatmap* GetEntityHeatmapResponse::_internal_mutable_heatmap() {
  
  if (heatmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Heatmap>(GetArena());
    heatmap_ = p;
  }
  return heatmap_;
}
inline ::improbable::platform::runtime::Heatmap* GetEntityHeatmapResponse::mutable_heatmap() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetEntityHeatmapResponse.heatmap)
  return _internal_mutable_heatmap();
}
inline void GetEntityHeatmapResponse::set_allocated_heatmap(::improbable::platform::runtime::Heatmap* heatmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete heatmap_;
  }
  if (heatmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heatmap);
    if (message_arena != submessage_arena) {
      heatmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heatmap, submessage_arena);
    }
    
  } else {
    
  }
  heatmap_ = heatmap;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetEntityHeatmapResponse.heatmap)
}

// float query_cost = 2;
inline void GetEntityHeatmapResponse::clear_query_cost() {
  query_cost_ = 0;
}
inline float GetEntityHeatmapResponse::_internal_query_cost() const {
  return query_cost_;
}
inline float GetEntityHeatmapResponse::query_cost() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetEntityHeatmapResponse.query_cost)
  return _internal_query_cost();
}
inline void GetEntityHeatmapResponse::_internal_set_query_cost(float value) {
  
  query_cost_ = value;
}
inline void GetEntityHeatmapResponse::set_query_cost(float value) {
  _internal_set_query_cost(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetEntityHeatmapResponse.query_cost)
}

// -------------------------------------------------------------------

// GetEntityDetailsRequest

// int64 entity_id = 1;
inline void GetEntityDetailsRequest::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityDetailsRequest::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetEntityDetailsRequest::entity_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetEntityDetailsRequest.entity_id)
  return _internal_entity_id();
}
inline void GetEntityDetailsRequest::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
}
inline void GetEntityDetailsRequest::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetEntityDetailsRequest.entity_id)
}

// -------------------------------------------------------------------

// GetEntityDetailsResponse

// .improbable.platform.runtime.EntityData entity_data = 1;
inline bool GetEntityDetailsResponse::_internal_has_entity_data() const {
  return this != internal_default_instance() && entity_data_ != nullptr;
}
inline bool GetEntityDetailsResponse::has_entity_data() const {
  return _internal_has_entity_data();
}
inline void GetEntityDetailsResponse::clear_entity_data() {
  if (GetArena() == nullptr && entity_data_ != nullptr) {
    delete entity_data_;
  }
  entity_data_ = nullptr;
}
inline const ::improbable::platform::runtime::EntityData& GetEntityDetailsResponse::_internal_entity_data() const {
  const ::improbable::platform::runtime::EntityData* p = entity_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::EntityData&>(
      ::improbable::platform::runtime::_EntityData_default_instance_);
}
inline const ::improbable::platform::runtime::EntityData& GetEntityDetailsResponse::entity_data() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetEntityDetailsResponse.entity_data)
  return _internal_entity_data();
}
inline void GetEntityDetailsResponse::unsafe_arena_set_allocated_entity_data(
    ::improbable::platform::runtime::EntityData* entity_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_data_);
  }
  entity_data_ = entity_data;
  if (entity_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetEntityDetailsResponse.entity_data)
}
inline ::improbable::platform::runtime::EntityData* GetEntityDetailsResponse::release_entity_data() {
  
  ::improbable::platform::runtime::EntityData* temp = entity_data_;
  entity_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::EntityData* GetEntityDetailsResponse::unsafe_arena_release_entity_data() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetEntityDetailsResponse.entity_data)
  
  ::improbable::platform::runtime::EntityData* temp = entity_data_;
  entity_data_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::EntityData* GetEntityDetailsResponse::_internal_mutable_entity_data() {
  
  if (entity_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::EntityData>(GetArena());
    entity_data_ = p;
  }
  return entity_data_;
}
inline ::improbable::platform::runtime::EntityData* GetEntityDetailsResponse::mutable_entity_data() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetEntityDetailsResponse.entity_data)
  return _internal_mutable_entity_data();
}
inline void GetEntityDetailsResponse::set_allocated_entity_data(::improbable::platform::runtime::EntityData* entity_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entity_data_;
  }
  if (entity_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_data);
    if (message_arena != submessage_arena) {
      entity_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_data, submessage_arena);
    }
    
  } else {
    
  }
  entity_data_ = entity_data;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetEntityDetailsResponse.entity_data)
}

// -------------------------------------------------------------------

// GetAllWorkersRequest

// -------------------------------------------------------------------

// GetAllWorkersResponse

// repeated .improbable.platform.runtime.WorkerSummary worker_summaries = 1;
inline int GetAllWorkersResponse::_internal_worker_summaries_size() const {
  return worker_summaries_.size();
}
inline int GetAllWorkersResponse::worker_summaries_size() const {
  return _internal_worker_summaries_size();
}
inline void GetAllWorkersResponse::clear_worker_summaries() {
  worker_summaries_.Clear();
}
inline ::improbable::platform::runtime::WorkerSummary* GetAllWorkersResponse::mutable_worker_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetAllWorkersResponse.worker_summaries)
  return worker_summaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerSummary >*
GetAllWorkersResponse::mutable_worker_summaries() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.GetAllWorkersResponse.worker_summaries)
  return &worker_summaries_;
}
inline const ::improbable::platform::runtime::WorkerSummary& GetAllWorkersResponse::_internal_worker_summaries(int index) const {
  return worker_summaries_.Get(index);
}
inline const ::improbable::platform::runtime::WorkerSummary& GetAllWorkersResponse::worker_summaries(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetAllWorkersResponse.worker_summaries)
  return _internal_worker_summaries(index);
}
inline ::improbable::platform::runtime::WorkerSummary* GetAllWorkersResponse::_internal_add_worker_summaries() {
  return worker_summaries_.Add();
}
inline ::improbable::platform::runtime::WorkerSummary* GetAllWorkersResponse::add_worker_summaries() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.GetAllWorkersResponse.worker_summaries)
  return _internal_add_worker_summaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerSummary >&
GetAllWorkersResponse::worker_summaries() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.GetAllWorkersResponse.worker_summaries)
  return worker_summaries_;
}

// -------------------------------------------------------------------

// WorkerSummary

// string worker_id = 1;
inline void WorkerSummary::clear_worker_id() {
  worker_id_.ClearToEmpty();
}
inline const std::string& WorkerSummary::worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerSummary.worker_id)
  return _internal_worker_id();
}
inline void WorkerSummary::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerSummary.worker_id)
}
inline std::string* WorkerSummary::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerSummary.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& WorkerSummary::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void WorkerSummary::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerSummary::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.WorkerSummary.worker_id)
}
inline void WorkerSummary::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.WorkerSummary.worker_id)
}
inline void WorkerSummary::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.WorkerSummary.worker_id)
}
inline std::string* WorkerSummary::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerSummary::release_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerSummary.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerSummary::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerSummary.worker_id)
}

// .improbable.platform.runtime.Point position = 2;
inline bool WorkerSummary::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool WorkerSummary::has_position() const {
  return _internal_has_position();
}
inline const ::improbable::platform::runtime::Point& WorkerSummary::_internal_position() const {
  const ::improbable::platform::runtime::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Point&>(
      ::improbable::platform::runtime::_Point_default_instance_);
}
inline const ::improbable::platform::runtime::Point& WorkerSummary::position() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerSummary.position)
  return _internal_position();
}
inline void WorkerSummary::unsafe_arena_set_allocated_position(
    ::improbable::platform::runtime::Point* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.WorkerSummary.position)
}
inline ::improbable::platform::runtime::Point* WorkerSummary::release_position() {
  
  ::improbable::platform::runtime::Point* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Point* WorkerSummary::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerSummary.position)
  
  ::improbable::platform::runtime::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Point* WorkerSummary::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Point>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::improbable::platform::runtime::Point* WorkerSummary::mutable_position() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerSummary.position)
  return _internal_mutable_position();
}
inline void WorkerSummary::set_allocated_position(::improbable::platform::runtime::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerSummary.position)
}

// .improbable.platform.runtime.WorkerLoadbalancingStatus loadbalancing_status = 3;
inline bool WorkerSummary::_internal_has_loadbalancing_status() const {
  return this != internal_default_instance() && loadbalancing_status_ != nullptr;
}
inline bool WorkerSummary::has_loadbalancing_status() const {
  return _internal_has_loadbalancing_status();
}
inline void WorkerSummary::clear_loadbalancing_status() {
  if (GetArena() == nullptr && loadbalancing_status_ != nullptr) {
    delete loadbalancing_status_;
  }
  loadbalancing_status_ = nullptr;
}
inline const ::improbable::platform::runtime::WorkerLoadbalancingStatus& WorkerSummary::_internal_loadbalancing_status() const {
  const ::improbable::platform::runtime::WorkerLoadbalancingStatus* p = loadbalancing_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::WorkerLoadbalancingStatus&>(
      ::improbable::platform::runtime::_WorkerLoadbalancingStatus_default_instance_);
}
inline const ::improbable::platform::runtime::WorkerLoadbalancingStatus& WorkerSummary::loadbalancing_status() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerSummary.loadbalancing_status)
  return _internal_loadbalancing_status();
}
inline void WorkerSummary::unsafe_arena_set_allocated_loadbalancing_status(
    ::improbable::platform::runtime::WorkerLoadbalancingStatus* loadbalancing_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadbalancing_status_);
  }
  loadbalancing_status_ = loadbalancing_status;
  if (loadbalancing_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.WorkerSummary.loadbalancing_status)
}
inline ::improbable::platform::runtime::WorkerLoadbalancingStatus* WorkerSummary::release_loadbalancing_status() {
  
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* temp = loadbalancing_status_;
  loadbalancing_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::WorkerLoadbalancingStatus* WorkerSummary::unsafe_arena_release_loadbalancing_status() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerSummary.loadbalancing_status)
  
  ::improbable::platform::runtime::WorkerLoadbalancingStatus* temp = loadbalancing_status_;
  loadbalancing_status_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::WorkerLoadbalancingStatus* WorkerSummary::_internal_mutable_loadbalancing_status() {
  
  if (loadbalancing_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::WorkerLoadbalancingStatus>(GetArena());
    loadbalancing_status_ = p;
  }
  return loadbalancing_status_;
}
inline ::improbable::platform::runtime::WorkerLoadbalancingStatus* WorkerSummary::mutable_loadbalancing_status() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerSummary.loadbalancing_status)
  return _internal_mutable_loadbalancing_status();
}
inline void WorkerSummary::set_allocated_loadbalancing_status(::improbable::platform::runtime::WorkerLoadbalancingStatus* loadbalancing_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loadbalancing_status_;
  }
  if (loadbalancing_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loadbalancing_status);
    if (message_arena != submessage_arena) {
      loadbalancing_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadbalancing_status, submessage_arena);
    }
    
  } else {
    
  }
  loadbalancing_status_ = loadbalancing_status;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerSummary.loadbalancing_status)
}

// string worker_name = 4;
inline void WorkerSummary::clear_worker_name() {
  worker_name_.ClearToEmpty();
}
inline const std::string& WorkerSummary::worker_name() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerSummary.worker_name)
  return _internal_worker_name();
}
inline void WorkerSummary::set_worker_name(const std::string& value) {
  _internal_set_worker_name(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerSummary.worker_name)
}
inline std::string* WorkerSummary::mutable_worker_name() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerSummary.worker_name)
  return _internal_mutable_worker_name();
}
inline const std::string& WorkerSummary::_internal_worker_name() const {
  return worker_name_.Get();
}
inline void WorkerSummary::_internal_set_worker_name(const std::string& value) {
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerSummary::set_worker_name(std::string&& value) {
  
  worker_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.WorkerSummary.worker_name)
}
inline void WorkerSummary::set_worker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.WorkerSummary.worker_name)
}
inline void WorkerSummary::set_worker_name(const char* value,
    size_t size) {
  
  worker_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.WorkerSummary.worker_name)
}
inline std::string* WorkerSummary::_internal_mutable_worker_name() {
  
  return worker_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerSummary::release_worker_name() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerSummary.worker_name)
  return worker_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerSummary::set_allocated_worker_name(std::string* worker_name) {
  if (worker_name != nullptr) {
    
  } else {
    
  }
  worker_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerSummary.worker_name)
}

// -------------------------------------------------------------------

// WorkerLoadbalancingStatus

// .improbable.platform.runtime.WorkerLoadbalancingStatus.LoadCategory load_category = 1;
inline void WorkerLoadbalancingStatus::clear_load_category() {
  load_category_ = 0;
}
inline ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory WorkerLoadbalancingStatus::_internal_load_category() const {
  return static_cast< ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory >(load_category_);
}
inline ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory WorkerLoadbalancingStatus::load_category() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerLoadbalancingStatus.load_category)
  return _internal_load_category();
}
inline void WorkerLoadbalancingStatus::_internal_set_load_category(::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory value) {
  
  load_category_ = value;
}
inline void WorkerLoadbalancingStatus::set_load_category(::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory value) {
  _internal_set_load_category(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerLoadbalancingStatus.load_category)
}

// double load_value = 2;
inline void WorkerLoadbalancingStatus::clear_load_value() {
  load_value_ = 0;
}
inline double WorkerLoadbalancingStatus::_internal_load_value() const {
  return load_value_;
}
inline double WorkerLoadbalancingStatus::load_value() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerLoadbalancingStatus.load_value)
  return _internal_load_value();
}
inline void WorkerLoadbalancingStatus::_internal_set_load_value(double value) {
  
  load_value_ = value;
}
inline void WorkerLoadbalancingStatus::set_load_value(double value) {
  _internal_set_load_value(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerLoadbalancingStatus.load_value)
}

// -------------------------------------------------------------------

// GetWorkerDetailsRequest

// string worker_id = 1;
inline void GetWorkerDetailsRequest::clear_worker_id() {
  worker_id_.ClearToEmpty();
}
inline const std::string& GetWorkerDetailsRequest::worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
  return _internal_worker_id();
}
inline void GetWorkerDetailsRequest::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
}
inline std::string* GetWorkerDetailsRequest::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& GetWorkerDetailsRequest::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void GetWorkerDetailsRequest::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetWorkerDetailsRequest::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
}
inline void GetWorkerDetailsRequest::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
}
inline void GetWorkerDetailsRequest::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
}
inline std::string* GetWorkerDetailsRequest::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetWorkerDetailsRequest::release_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkerDetailsRequest::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorkerDetailsRequest.worker_id)
}

// .google.protobuf.FieldMask field_mask = 2;
inline bool GetWorkerDetailsRequest::_internal_has_field_mask() const {
  return this != internal_default_instance() && field_mask_ != nullptr;
}
inline bool GetWorkerDetailsRequest::has_field_mask() const {
  return _internal_has_field_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& GetWorkerDetailsRequest::_internal_field_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = field_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& GetWorkerDetailsRequest::field_mask() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerDetailsRequest.field_mask)
  return _internal_field_mask();
}
inline void GetWorkerDetailsRequest::unsafe_arena_set_allocated_field_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask_);
  }
  field_mask_ = field_mask;
  if (field_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetWorkerDetailsRequest.field_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* GetWorkerDetailsRequest::release_field_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = field_mask_;
  field_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* GetWorkerDetailsRequest::unsafe_arena_release_field_mask() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorkerDetailsRequest.field_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = field_mask_;
  field_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* GetWorkerDetailsRequest::_internal_mutable_field_mask() {
  
  if (field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    field_mask_ = p;
  }
  return field_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* GetWorkerDetailsRequest::mutable_field_mask() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorkerDetailsRequest.field_mask)
  return _internal_mutable_field_mask();
}
inline void GetWorkerDetailsRequest::set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask_);
  }
  if (field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask)->GetArena();
    if (message_arena != submessage_arena) {
      field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_mask, submessage_arena);
    }
    
  } else {
    
  }
  field_mask_ = field_mask;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorkerDetailsRequest.field_mask)
}

// -------------------------------------------------------------------

// GetWorkerDetailsResponse

// .improbable.platform.runtime.WorkerSummary summary = 1;
inline bool GetWorkerDetailsResponse::_internal_has_summary() const {
  return this != internal_default_instance() && summary_ != nullptr;
}
inline bool GetWorkerDetailsResponse::has_summary() const {
  return _internal_has_summary();
}
inline void GetWorkerDetailsResponse::clear_summary() {
  if (GetArena() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
}
inline const ::improbable::platform::runtime::WorkerSummary& GetWorkerDetailsResponse::_internal_summary() const {
  const ::improbable::platform::runtime::WorkerSummary* p = summary_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::WorkerSummary&>(
      ::improbable::platform::runtime::_WorkerSummary_default_instance_);
}
inline const ::improbable::platform::runtime::WorkerSummary& GetWorkerDetailsResponse::summary() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerDetailsResponse.summary)
  return _internal_summary();
}
inline void GetWorkerDetailsResponse::unsafe_arena_set_allocated_summary(
    ::improbable::platform::runtime::WorkerSummary* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetWorkerDetailsResponse.summary)
}
inline ::improbable::platform::runtime::WorkerSummary* GetWorkerDetailsResponse::release_summary() {
  
  ::improbable::platform::runtime::WorkerSummary* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::WorkerSummary* GetWorkerDetailsResponse::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorkerDetailsResponse.summary)
  
  ::improbable::platform::runtime::WorkerSummary* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::WorkerSummary* GetWorkerDetailsResponse::_internal_mutable_summary() {
  
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::WorkerSummary>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::improbable::platform::runtime::WorkerSummary* GetWorkerDetailsResponse::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorkerDetailsResponse.summary)
  return _internal_mutable_summary();
}
inline void GetWorkerDetailsResponse::set_allocated_summary(::improbable::platform::runtime::WorkerSummary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    
  } else {
    
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorkerDetailsResponse.summary)
}

// .improbable.platform.runtime.WorkerDetails details = 2;
inline bool GetWorkerDetailsResponse::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool GetWorkerDetailsResponse::has_details() const {
  return _internal_has_details();
}
inline void GetWorkerDetailsResponse::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::improbable::platform::runtime::WorkerDetails& GetWorkerDetailsResponse::_internal_details() const {
  const ::improbable::platform::runtime::WorkerDetails* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::WorkerDetails&>(
      ::improbable::platform::runtime::_WorkerDetails_default_instance_);
}
inline const ::improbable::platform::runtime::WorkerDetails& GetWorkerDetailsResponse::details() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerDetailsResponse.details)
  return _internal_details();
}
inline void GetWorkerDetailsResponse::unsafe_arena_set_allocated_details(
    ::improbable::platform::runtime::WorkerDetails* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetWorkerDetailsResponse.details)
}
inline ::improbable::platform::runtime::WorkerDetails* GetWorkerDetailsResponse::release_details() {
  
  ::improbable::platform::runtime::WorkerDetails* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::WorkerDetails* GetWorkerDetailsResponse::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorkerDetailsResponse.details)
  
  ::improbable::platform::runtime::WorkerDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::WorkerDetails* GetWorkerDetailsResponse::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::WorkerDetails>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::improbable::platform::runtime::WorkerDetails* GetWorkerDetailsResponse::mutable_details() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorkerDetailsResponse.details)
  return _internal_mutable_details();
}
inline void GetWorkerDetailsResponse::set_allocated_details(::improbable::platform::runtime::WorkerDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorkerDetailsResponse.details)
}

// -------------------------------------------------------------------

// GetWorkerInterestRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetWorkerInterestResponse_WorkerInterestConfiguration

// string worker_type = 1;
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::clear_worker_type() {
  worker_type_.ClearToEmpty();
}
inline const std::string& GetWorkerInterestResponse_WorkerInterestConfiguration::worker_type() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
  return _internal_worker_type();
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
}
inline std::string* GetWorkerInterestResponse_WorkerInterestConfiguration::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
}
inline std::string* GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetWorkerInterestResponse_WorkerInterestConfiguration::release_worker_type() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.worker_type)
}

// double entity_interest_radius = 2;
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::clear_entity_interest_radius() {
  entity_interest_radius_ = 0;
}
inline double GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_entity_interest_radius() const {
  return entity_interest_radius_;
}
inline double GetWorkerInterestResponse_WorkerInterestConfiguration::entity_interest_radius() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.entity_interest_radius)
  return _internal_entity_interest_radius();
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_set_entity_interest_radius(double value) {
  
  entity_interest_radius_ = value;
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::set_entity_interest_radius(double value) {
  _internal_set_entity_interest_radius(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.entity_interest_radius)
}

// repeated .improbable.platform.runtime.InspectorStreamingQuery streaming_query = 3;
inline int GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_streaming_query_size() const {
  return streaming_query_.size();
}
inline int GetWorkerInterestResponse_WorkerInterestConfiguration::streaming_query_size() const {
  return _internal_streaming_query_size();
}
inline void GetWorkerInterestResponse_WorkerInterestConfiguration::clear_streaming_query() {
  streaming_query_.Clear();
}
inline ::improbable::platform::runtime::InspectorStreamingQuery* GetWorkerInterestResponse_WorkerInterestConfiguration::mutable_streaming_query(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.streaming_query)
  return streaming_query_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectorStreamingQuery >*
GetWorkerInterestResponse_WorkerInterestConfiguration::mutable_streaming_query() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.streaming_query)
  return &streaming_query_;
}
inline const ::improbable::platform::runtime::InspectorStreamingQuery& GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_streaming_query(int index) const {
  return streaming_query_.Get(index);
}
inline const ::improbable::platform::runtime::InspectorStreamingQuery& GetWorkerInterestResponse_WorkerInterestConfiguration::streaming_query(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.streaming_query)
  return _internal_streaming_query(index);
}
inline ::improbable::platform::runtime::InspectorStreamingQuery* GetWorkerInterestResponse_WorkerInterestConfiguration::_internal_add_streaming_query() {
  return streaming_query_.Add();
}
inline ::improbable::platform::runtime::InspectorStreamingQuery* GetWorkerInterestResponse_WorkerInterestConfiguration::add_streaming_query() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.streaming_query)
  return _internal_add_streaming_query();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectorStreamingQuery >&
GetWorkerInterestResponse_WorkerInterestConfiguration::streaming_query() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration.streaming_query)
  return streaming_query_;
}

// -------------------------------------------------------------------

// GetWorkerInterestResponse

// bool enable_chunk_based_interest = 1;
inline void GetWorkerInterestResponse::clear_enable_chunk_based_interest() {
  enable_chunk_based_interest_ = false;
}
inline bool GetWorkerInterestResponse::_internal_enable_chunk_based_interest() const {
  return enable_chunk_based_interest_;
}
inline bool GetWorkerInterestResponse::enable_chunk_based_interest() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerInterestResponse.enable_chunk_based_interest)
  return _internal_enable_chunk_based_interest();
}
inline void GetWorkerInterestResponse::_internal_set_enable_chunk_based_interest(bool value) {
  
  enable_chunk_based_interest_ = value;
}
inline void GetWorkerInterestResponse::set_enable_chunk_based_interest(bool value) {
  _internal_set_enable_chunk_based_interest(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorkerInterestResponse.enable_chunk_based_interest)
}

// bool enable_streaming_queries = 2;
inline void GetWorkerInterestResponse::clear_enable_streaming_queries() {
  enable_streaming_queries_ = false;
}
inline bool GetWorkerInterestResponse::_internal_enable_streaming_queries() const {
  return enable_streaming_queries_;
}
inline bool GetWorkerInterestResponse::enable_streaming_queries() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerInterestResponse.enable_streaming_queries)
  return _internal_enable_streaming_queries();
}
inline void GetWorkerInterestResponse::_internal_set_enable_streaming_queries(bool value) {
  
  enable_streaming_queries_ = value;
}
inline void GetWorkerInterestResponse::set_enable_streaming_queries(bool value) {
  _internal_set_enable_streaming_queries(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorkerInterestResponse.enable_streaming_queries)
}

// int32 chunk_size = 3;
inline void GetWorkerInterestResponse::clear_chunk_size() {
  chunk_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorkerInterestResponse::_internal_chunk_size() const {
  return chunk_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorkerInterestResponse::chunk_size() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorkerInterestResponse.chunk_size)
  return _internal_chunk_size();
}
inline void GetWorkerInterestResponse::_internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_size_ = value;
}
inline void GetWorkerInterestResponse::set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorkerInterestResponse.chunk_size)
}

// map<string, .improbable.platform.runtime.GetWorkerInterestResponse.WorkerInterestConfiguration> worker_type_interest_config = 4;
inline int GetWorkerInterestResponse::_internal_worker_type_interest_config_size() const {
  return worker_type_interest_config_.size();
}
inline int GetWorkerInterestResponse::worker_type_interest_config_size() const {
  return _internal_worker_type_interest_config_size();
}
inline void GetWorkerInterestResponse::clear_worker_type_interest_config() {
  worker_type_interest_config_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >&
GetWorkerInterestResponse::_internal_worker_type_interest_config() const {
  return worker_type_interest_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >&
GetWorkerInterestResponse::worker_type_interest_config() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.GetWorkerInterestResponse.worker_type_interest_config)
  return _internal_worker_type_interest_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >*
GetWorkerInterestResponse::_internal_mutable_worker_type_interest_config() {
  return worker_type_interest_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::improbable::platform::runtime::GetWorkerInterestResponse_WorkerInterestConfiguration >*
GetWorkerInterestResponse::mutable_worker_type_interest_config() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.GetWorkerInterestResponse.worker_type_interest_config)
  return _internal_mutable_worker_type_interest_config();
}

// -------------------------------------------------------------------

// InspectorStreamingQuery

// string component_name = 1;
inline void InspectorStreamingQuery::clear_component_name() {
  component_name_.ClearToEmpty();
}
inline const std::string& InspectorStreamingQuery::component_name() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectorStreamingQuery.component_name)
  return _internal_component_name();
}
inline void InspectorStreamingQuery::set_component_name(const std::string& value) {
  _internal_set_component_name(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectorStreamingQuery.component_name)
}
inline std::string* InspectorStreamingQuery::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectorStreamingQuery.component_name)
  return _internal_mutable_component_name();
}
inline const std::string& InspectorStreamingQuery::_internal_component_name() const {
  return component_name_.Get();
}
inline void InspectorStreamingQuery::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InspectorStreamingQuery::set_component_name(std::string&& value) {
  
  component_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.InspectorStreamingQuery.component_name)
}
inline void InspectorStreamingQuery::set_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.InspectorStreamingQuery.component_name)
}
inline void InspectorStreamingQuery::set_component_name(const char* value,
    size_t size) {
  
  component_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.InspectorStreamingQuery.component_name)
}
inline std::string* InspectorStreamingQuery::_internal_mutable_component_name() {
  
  return component_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InspectorStreamingQuery::release_component_name() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectorStreamingQuery.component_name)
  return component_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectorStreamingQuery::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectorStreamingQuery.component_name)
}

// double radius = 2;
inline void InspectorStreamingQuery::clear_radius() {
  radius_ = 0;
}
inline double InspectorStreamingQuery::_internal_radius() const {
  return radius_;
}
inline double InspectorStreamingQuery::radius() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectorStreamingQuery.radius)
  return _internal_radius();
}
inline void InspectorStreamingQuery::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void InspectorStreamingQuery::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectorStreamingQuery.radius)
}

// -------------------------------------------------------------------

// LoadBalancingGridFormat

// int32 cell_edge_length = 1;
inline void LoadBalancingGridFormat::clear_cell_edge_length() {
  cell_edge_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadBalancingGridFormat::_internal_cell_edge_length() const {
  return cell_edge_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadBalancingGridFormat::cell_edge_length() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.LoadBalancingGridFormat.cell_edge_length)
  return _internal_cell_edge_length();
}
inline void LoadBalancingGridFormat::_internal_set_cell_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cell_edge_length_ = value;
}
inline void LoadBalancingGridFormat::set_cell_edge_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cell_edge_length(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.LoadBalancingGridFormat.cell_edge_length)
}

// -------------------------------------------------------------------

// GetLoadBalancingStrategyRequest

// .improbable.platform.runtime.LoadBalancingGridFormat grid_format = 1;
inline bool GetLoadBalancingStrategyRequest::_internal_has_grid_format() const {
  return format_case() == kGridFormat;
}
inline bool GetLoadBalancingStrategyRequest::has_grid_format() const {
  return _internal_has_grid_format();
}
inline void GetLoadBalancingStrategyRequest::set_has_grid_format() {
  _oneof_case_[0] = kGridFormat;
}
inline void GetLoadBalancingStrategyRequest::clear_grid_format() {
  if (_internal_has_grid_format()) {
    if (GetArena() == nullptr) {
      delete format_.grid_format_;
    }
    clear_has_format();
  }
}
inline ::improbable::platform::runtime::LoadBalancingGridFormat* GetLoadBalancingStrategyRequest::release_grid_format() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetLoadBalancingStrategyRequest.grid_format)
  if (_internal_has_grid_format()) {
    clear_has_format();
      ::improbable::platform::runtime::LoadBalancingGridFormat* temp = format_.grid_format_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    format_.grid_format_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::LoadBalancingGridFormat& GetLoadBalancingStrategyRequest::_internal_grid_format() const {
  return _internal_has_grid_format()
      ? *format_.grid_format_
      : reinterpret_cast< ::improbable::platform::runtime::LoadBalancingGridFormat&>(::improbable::platform::runtime::_LoadBalancingGridFormat_default_instance_);
}
inline const ::improbable::platform::runtime::LoadBalancingGridFormat& GetLoadBalancingStrategyRequest::grid_format() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetLoadBalancingStrategyRequest.grid_format)
  return _internal_grid_format();
}
inline ::improbable::platform::runtime::LoadBalancingGridFormat* GetLoadBalancingStrategyRequest::unsafe_arena_release_grid_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.GetLoadBalancingStrategyRequest.grid_format)
  if (_internal_has_grid_format()) {
    clear_has_format();
    ::improbable::platform::runtime::LoadBalancingGridFormat* temp = format_.grid_format_;
    format_.grid_format_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetLoadBalancingStrategyRequest::unsafe_arena_set_allocated_grid_format(::improbable::platform::runtime::LoadBalancingGridFormat* grid_format) {
  clear_format();
  if (grid_format) {
    set_has_grid_format();
    format_.grid_format_ = grid_format;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetLoadBalancingStrategyRequest.grid_format)
}
inline ::improbable::platform::runtime::LoadBalancingGridFormat* GetLoadBalancingStrategyRequest::_internal_mutable_grid_format() {
  if (!_internal_has_grid_format()) {
    clear_format();
    set_has_grid_format();
    format_.grid_format_ = CreateMaybeMessage< ::improbable::platform::runtime::LoadBalancingGridFormat >(GetArena());
  }
  return format_.grid_format_;
}
inline ::improbable::platform::runtime::LoadBalancingGridFormat* GetLoadBalancingStrategyRequest::mutable_grid_format() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetLoadBalancingStrategyRequest.grid_format)
  return _internal_mutable_grid_format();
}

inline bool GetLoadBalancingStrategyRequest::has_format() const {
  return format_case() != FORMAT_NOT_SET;
}
inline void GetLoadBalancingStrategyRequest::clear_has_format() {
  _oneof_case_[0] = FORMAT_NOT_SET;
}
inline GetLoadBalancingStrategyRequest::FormatCase GetLoadBalancingStrategyRequest::format_case() const {
  return GetLoadBalancingStrategyRequest::FormatCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GridPartition

// int64 virtual_worker_id = 1;
inline void GridPartition::clear_virtual_worker_id() {
  virtual_worker_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GridPartition::_internal_virtual_worker_id() const {
  return virtual_worker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GridPartition::virtual_worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GridPartition.virtual_worker_id)
  return _internal_virtual_worker_id();
}
inline void GridPartition::_internal_set_virtual_worker_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  virtual_worker_id_ = value;
}
inline void GridPartition::set_virtual_worker_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_virtual_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GridPartition.virtual_worker_id)
}

// .improbable.platform.runtime.Region region = 2;
inline bool GridPartition::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool GridPartition::has_region() const {
  return _internal_has_region();
}
inline void GridPartition::clear_region() {
  if (GetArena() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
inline const ::improbable::platform::runtime::Region& GridPartition::_internal_region() const {
  const ::improbable::platform::runtime::Region* p = region_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Region&>(
      ::improbable::platform::runtime::_Region_default_instance_);
}
inline const ::improbable::platform::runtime::Region& GridPartition::region() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GridPartition.region)
  return _internal_region();
}
inline void GridPartition::unsafe_arena_set_allocated_region(
    ::improbable::platform::runtime::Region* region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GridPartition.region)
}
inline ::improbable::platform::runtime::Region* GridPartition::release_region() {
  
  ::improbable::platform::runtime::Region* temp = region_;
  region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Region* GridPartition::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GridPartition.region)
  
  ::improbable::platform::runtime::Region* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Region* GridPartition::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Region>(GetArena());
    region_ = p;
  }
  return region_;
}
inline ::improbable::platform::runtime::Region* GridPartition::mutable_region() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GridPartition.region)
  return _internal_mutable_region();
}
inline void GridPartition::set_allocated_region(::improbable::platform::runtime::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_;
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region);
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GridPartition.region)
}

// -------------------------------------------------------------------

// GridPartitionStrategy

// repeated .improbable.platform.runtime.GridPartition grid_partitions = 1;
inline int GridPartitionStrategy::_internal_grid_partitions_size() const {
  return grid_partitions_.size();
}
inline int GridPartitionStrategy::grid_partitions_size() const {
  return _internal_grid_partitions_size();
}
inline void GridPartitionStrategy::clear_grid_partitions() {
  grid_partitions_.Clear();
}
inline ::improbable::platform::runtime::GridPartition* GridPartitionStrategy::mutable_grid_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GridPartitionStrategy.grid_partitions)
  return grid_partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::GridPartition >*
GridPartitionStrategy::mutable_grid_partitions() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.GridPartitionStrategy.grid_partitions)
  return &grid_partitions_;
}
inline const ::improbable::platform::runtime::GridPartition& GridPartitionStrategy::_internal_grid_partitions(int index) const {
  return grid_partitions_.Get(index);
}
inline const ::improbable::platform::runtime::GridPartition& GridPartitionStrategy::grid_partitions(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GridPartitionStrategy.grid_partitions)
  return _internal_grid_partitions(index);
}
inline ::improbable::platform::runtime::GridPartition* GridPartitionStrategy::_internal_add_grid_partitions() {
  return grid_partitions_.Add();
}
inline ::improbable::platform::runtime::GridPartition* GridPartitionStrategy::add_grid_partitions() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.GridPartitionStrategy.grid_partitions)
  return _internal_add_grid_partitions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::GridPartition >&
GridPartitionStrategy::grid_partitions() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.GridPartitionStrategy.grid_partitions)
  return grid_partitions_;
}

// -------------------------------------------------------------------

// GetLoadBalancingStrategyResponse

// .improbable.platform.runtime.GridPartitionStrategy grid_partition_strategy = 1;
inline bool GetLoadBalancingStrategyResponse::_internal_has_grid_partition_strategy() const {
  return strategy_case() == kGridPartitionStrategy;
}
inline bool GetLoadBalancingStrategyResponse::has_grid_partition_strategy() const {
  return _internal_has_grid_partition_strategy();
}
inline void GetLoadBalancingStrategyResponse::set_has_grid_partition_strategy() {
  _oneof_case_[0] = kGridPartitionStrategy;
}
inline void GetLoadBalancingStrategyResponse::clear_grid_partition_strategy() {
  if (_internal_has_grid_partition_strategy()) {
    if (GetArena() == nullptr) {
      delete strategy_.grid_partition_strategy_;
    }
    clear_has_strategy();
  }
}
inline ::improbable::platform::runtime::GridPartitionStrategy* GetLoadBalancingStrategyResponse::release_grid_partition_strategy() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetLoadBalancingStrategyResponse.grid_partition_strategy)
  if (_internal_has_grid_partition_strategy()) {
    clear_has_strategy();
      ::improbable::platform::runtime::GridPartitionStrategy* temp = strategy_.grid_partition_strategy_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    strategy_.grid_partition_strategy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::GridPartitionStrategy& GetLoadBalancingStrategyResponse::_internal_grid_partition_strategy() const {
  return _internal_has_grid_partition_strategy()
      ? *strategy_.grid_partition_strategy_
      : reinterpret_cast< ::improbable::platform::runtime::GridPartitionStrategy&>(::improbable::platform::runtime::_GridPartitionStrategy_default_instance_);
}
inline const ::improbable::platform::runtime::GridPartitionStrategy& GetLoadBalancingStrategyResponse::grid_partition_strategy() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetLoadBalancingStrategyResponse.grid_partition_strategy)
  return _internal_grid_partition_strategy();
}
inline ::improbable::platform::runtime::GridPartitionStrategy* GetLoadBalancingStrategyResponse::unsafe_arena_release_grid_partition_strategy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.GetLoadBalancingStrategyResponse.grid_partition_strategy)
  if (_internal_has_grid_partition_strategy()) {
    clear_has_strategy();
    ::improbable::platform::runtime::GridPartitionStrategy* temp = strategy_.grid_partition_strategy_;
    strategy_.grid_partition_strategy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetLoadBalancingStrategyResponse::unsafe_arena_set_allocated_grid_partition_strategy(::improbable::platform::runtime::GridPartitionStrategy* grid_partition_strategy) {
  clear_strategy();
  if (grid_partition_strategy) {
    set_has_grid_partition_strategy();
    strategy_.grid_partition_strategy_ = grid_partition_strategy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetLoadBalancingStrategyResponse.grid_partition_strategy)
}
inline ::improbable::platform::runtime::GridPartitionStrategy* GetLoadBalancingStrategyResponse::_internal_mutable_grid_partition_strategy() {
  if (!_internal_has_grid_partition_strategy()) {
    clear_strategy();
    set_has_grid_partition_strategy();
    strategy_.grid_partition_strategy_ = CreateMaybeMessage< ::improbable::platform::runtime::GridPartitionStrategy >(GetArena());
  }
  return strategy_.grid_partition_strategy_;
}
inline ::improbable::platform::runtime::GridPartitionStrategy* GetLoadBalancingStrategyResponse::mutable_grid_partition_strategy() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetLoadBalancingStrategyResponse.grid_partition_strategy)
  return _internal_mutable_grid_partition_strategy();
}

inline bool GetLoadBalancingStrategyResponse::has_strategy() const {
  return strategy_case() != STRATEGY_NOT_SET;
}
inline void GetLoadBalancingStrategyResponse::clear_has_strategy() {
  _oneof_case_[0] = STRATEGY_NOT_SET;
}
inline GetLoadBalancingStrategyResponse::StrategyCase GetLoadBalancingStrategyResponse::strategy_case() const {
  return GetLoadBalancingStrategyResponse::StrategyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetVirtualWorkerMappingRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetVirtualWorkerMappingResponse

// map<int64, string> virtual_to_worker = 1;
inline int GetVirtualWorkerMappingResponse::_internal_virtual_to_worker_size() const {
  return virtual_to_worker_.size();
}
inline int GetVirtualWorkerMappingResponse::virtual_to_worker_size() const {
  return _internal_virtual_to_worker_size();
}
inline void GetVirtualWorkerMappingResponse::clear_virtual_to_worker() {
  virtual_to_worker_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
GetVirtualWorkerMappingResponse::_internal_virtual_to_worker() const {
  return virtual_to_worker_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
GetVirtualWorkerMappingResponse::virtual_to_worker() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.GetVirtualWorkerMappingResponse.virtual_to_worker)
  return _internal_virtual_to_worker();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
GetVirtualWorkerMappingResponse::_internal_mutable_virtual_to_worker() {
  return virtual_to_worker_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
GetVirtualWorkerMappingResponse::mutable_virtual_to_worker() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.GetVirtualWorkerMappingResponse.virtual_to_worker)
  return _internal_mutable_virtual_to_worker();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkerDetails_ComponentSet

// map<int32, string> component_ids_with_names = 1;
inline int WorkerDetails_ComponentSet::_internal_component_ids_with_names_size() const {
  return component_ids_with_names_.size();
}
inline int WorkerDetails_ComponentSet::component_ids_with_names_size() const {
  return _internal_component_ids_with_names_size();
}
inline void WorkerDetails_ComponentSet::clear_component_ids_with_names() {
  component_ids_with_names_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
WorkerDetails_ComponentSet::_internal_component_ids_with_names() const {
  return component_ids_with_names_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
WorkerDetails_ComponentSet::component_ids_with_names() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.WorkerDetails.ComponentSet.component_ids_with_names)
  return _internal_component_ids_with_names();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
WorkerDetails_ComponentSet::_internal_mutable_component_ids_with_names() {
  return component_ids_with_names_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
WorkerDetails_ComponentSet::mutable_component_ids_with_names() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.WorkerDetails.ComponentSet.component_ids_with_names)
  return _internal_mutable_component_ids_with_names();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkerDetails

// .improbable.platform.runtime.Region interest_region = 2;
inline bool WorkerDetails::_internal_has_interest_region() const {
  return this != internal_default_instance() && interest_region_ != nullptr;
}
inline bool WorkerDetails::has_interest_region() const {
  return _internal_has_interest_region();
}
inline void WorkerDetails::clear_interest_region() {
  if (GetArena() == nullptr && interest_region_ != nullptr) {
    delete interest_region_;
  }
  interest_region_ = nullptr;
}
inline const ::improbable::platform::runtime::Region& WorkerDetails::_internal_interest_region() const {
  const ::improbable::platform::runtime::Region* p = interest_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Region&>(
      ::improbable::platform::runtime::_Region_default_instance_);
}
inline const ::improbable::platform::runtime::Region& WorkerDetails::interest_region() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerDetails.interest_region)
  return _internal_interest_region();
}
inline void WorkerDetails::unsafe_arena_set_allocated_interest_region(
    ::improbable::platform::runtime::Region* interest_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interest_region_);
  }
  interest_region_ = interest_region;
  if (interest_region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.WorkerDetails.interest_region)
}
inline ::improbable::platform::runtime::Region* WorkerDetails::release_interest_region() {
  
  ::improbable::platform::runtime::Region* temp = interest_region_;
  interest_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Region* WorkerDetails::unsafe_arena_release_interest_region() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerDetails.interest_region)
  
  ::improbable::platform::runtime::Region* temp = interest_region_;
  interest_region_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Region* WorkerDetails::_internal_mutable_interest_region() {
  
  if (interest_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Region>(GetArena());
    interest_region_ = p;
  }
  return interest_region_;
}
inline ::improbable::platform::runtime::Region* WorkerDetails::mutable_interest_region() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerDetails.interest_region)
  return _internal_mutable_interest_region();
}
inline void WorkerDetails::set_allocated_interest_region(::improbable::platform::runtime::Region* interest_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interest_region_;
  }
  if (interest_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interest_region);
    if (message_arena != submessage_arena) {
      interest_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interest_region, submessage_arena);
    }
    
  } else {
    
  }
  interest_region_ = interest_region;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerDetails.interest_region)
}

// repeated int64 known_entity_ids = 3;
inline int WorkerDetails::_internal_known_entity_ids_size() const {
  return known_entity_ids_.size();
}
inline int WorkerDetails::known_entity_ids_size() const {
  return _internal_known_entity_ids_size();
}
inline void WorkerDetails::clear_known_entity_ids() {
  known_entity_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorkerDetails::_internal_known_entity_ids(int index) const {
  return known_entity_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorkerDetails::known_entity_ids(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerDetails.known_entity_ids)
  return _internal_known_entity_ids(index);
}
inline void WorkerDetails::set_known_entity_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  known_entity_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerDetails.known_entity_ids)
}
inline void WorkerDetails::_internal_add_known_entity_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  known_entity_ids_.Add(value);
}
inline void WorkerDetails::add_known_entity_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_known_entity_ids(value);
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.WorkerDetails.known_entity_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
WorkerDetails::_internal_known_entity_ids() const {
  return known_entity_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
WorkerDetails::known_entity_ids() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.WorkerDetails.known_entity_ids)
  return _internal_known_entity_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
WorkerDetails::_internal_mutable_known_entity_ids() {
  return &known_entity_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
WorkerDetails::mutable_known_entity_ids() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.WorkerDetails.known_entity_ids)
  return _internal_mutable_known_entity_ids();
}

// map<int64, .improbable.platform.runtime.WorkerDetails.ComponentSet> delegated_entity_components = 4;
inline int WorkerDetails::_internal_delegated_entity_components_size() const {
  return delegated_entity_components_.size();
}
inline int WorkerDetails::delegated_entity_components_size() const {
  return _internal_delegated_entity_components_size();
}
inline void WorkerDetails::clear_delegated_entity_components() {
  delegated_entity_components_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >&
WorkerDetails::_internal_delegated_entity_components() const {
  return delegated_entity_components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >&
WorkerDetails::delegated_entity_components() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.WorkerDetails.delegated_entity_components)
  return _internal_delegated_entity_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >*
WorkerDetails::_internal_mutable_delegated_entity_components() {
  return delegated_entity_components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::improbable::platform::runtime::WorkerDetails_ComponentSet >*
WorkerDetails::mutable_delegated_entity_components() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.WorkerDetails.delegated_entity_components)
  return _internal_mutable_delegated_entity_components();
}

// map<string, double> metrics = 5;
inline int WorkerDetails::_internal_metrics_size() const {
  return metrics_.size();
}
inline int WorkerDetails::metrics_size() const {
  return _internal_metrics_size();
}
inline void WorkerDetails::clear_metrics() {
  metrics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
WorkerDetails::_internal_metrics() const {
  return metrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
WorkerDetails::metrics() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.WorkerDetails.metrics)
  return _internal_metrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
WorkerDetails::_internal_mutable_metrics() {
  return metrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
WorkerDetails::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.WorkerDetails.metrics)
  return _internal_mutable_metrics();
}

// .improbable.platform.runtime.WorkerAttributeSet worker_attributes = 6;
inline bool WorkerDetails::_internal_has_worker_attributes() const {
  return this != internal_default_instance() && worker_attributes_ != nullptr;
}
inline bool WorkerDetails::has_worker_attributes() const {
  return _internal_has_worker_attributes();
}
inline const ::improbable::platform::runtime::WorkerAttributeSet& WorkerDetails::_internal_worker_attributes() const {
  const ::improbable::platform::runtime::WorkerAttributeSet* p = worker_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::WorkerAttributeSet&>(
      ::improbable::platform::runtime::_WorkerAttributeSet_default_instance_);
}
inline const ::improbable::platform::runtime::WorkerAttributeSet& WorkerDetails::worker_attributes() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerDetails.worker_attributes)
  return _internal_worker_attributes();
}
inline void WorkerDetails::unsafe_arena_set_allocated_worker_attributes(
    ::improbable::platform::runtime::WorkerAttributeSet* worker_attributes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_attributes_);
  }
  worker_attributes_ = worker_attributes;
  if (worker_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.WorkerDetails.worker_attributes)
}
inline ::improbable::platform::runtime::WorkerAttributeSet* WorkerDetails::release_worker_attributes() {
  
  ::improbable::platform::runtime::WorkerAttributeSet* temp = worker_attributes_;
  worker_attributes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::WorkerAttributeSet* WorkerDetails::unsafe_arena_release_worker_attributes() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerDetails.worker_attributes)
  
  ::improbable::platform::runtime::WorkerAttributeSet* temp = worker_attributes_;
  worker_attributes_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::WorkerAttributeSet* WorkerDetails::_internal_mutable_worker_attributes() {
  
  if (worker_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::WorkerAttributeSet>(GetArena());
    worker_attributes_ = p;
  }
  return worker_attributes_;
}
inline ::improbable::platform::runtime::WorkerAttributeSet* WorkerDetails::mutable_worker_attributes() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerDetails.worker_attributes)
  return _internal_mutable_worker_attributes();
}
inline void WorkerDetails::set_allocated_worker_attributes(::improbable::platform::runtime::WorkerAttributeSet* worker_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_attributes_);
  }
  if (worker_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_attributes)->GetArena();
    if (message_arena != submessage_arena) {
      worker_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker_attributes, submessage_arena);
    }
    
  } else {
    
  }
  worker_attributes_ = worker_attributes;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerDetails.worker_attributes)
}

// .improbable.platform.runtime.Region authority_region = 7;
inline bool WorkerDetails::_internal_has_authority_region() const {
  return this != internal_default_instance() && authority_region_ != nullptr;
}
inline bool WorkerDetails::has_authority_region() const {
  return _internal_has_authority_region();
}
inline void WorkerDetails::clear_authority_region() {
  if (GetArena() == nullptr && authority_region_ != nullptr) {
    delete authority_region_;
  }
  authority_region_ = nullptr;
}
inline const ::improbable::platform::runtime::Region& WorkerDetails::_internal_authority_region() const {
  const ::improbable::platform::runtime::Region* p = authority_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Region&>(
      ::improbable::platform::runtime::_Region_default_instance_);
}
inline const ::improbable::platform::runtime::Region& WorkerDetails::authority_region() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerDetails.authority_region)
  return _internal_authority_region();
}
inline void WorkerDetails::unsafe_arena_set_allocated_authority_region(
    ::improbable::platform::runtime::Region* authority_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authority_region_);
  }
  authority_region_ = authority_region;
  if (authority_region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.WorkerDetails.authority_region)
}
inline ::improbable::platform::runtime::Region* WorkerDetails::release_authority_region() {
  
  ::improbable::platform::runtime::Region* temp = authority_region_;
  authority_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Region* WorkerDetails::unsafe_arena_release_authority_region() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerDetails.authority_region)
  
  ::improbable::platform::runtime::Region* temp = authority_region_;
  authority_region_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Region* WorkerDetails::_internal_mutable_authority_region() {
  
  if (authority_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Region>(GetArena());
    authority_region_ = p;
  }
  return authority_region_;
}
inline ::improbable::platform::runtime::Region* WorkerDetails::mutable_authority_region() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerDetails.authority_region)
  return _internal_mutable_authority_region();
}
inline void WorkerDetails::set_allocated_authority_region(::improbable::platform::runtime::Region* authority_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete authority_region_;
  }
  if (authority_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(authority_region);
    if (message_arena != submessage_arena) {
      authority_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authority_region, submessage_arena);
    }
    
  } else {
    
  }
  authority_region_ = authority_region;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerDetails.authority_region)
}

// -------------------------------------------------------------------

// Region_RectanglesRegion

// repeated .improbable.platform.runtime.Rectangle rectangles = 1;
inline int Region_RectanglesRegion::_internal_rectangles_size() const {
  return rectangles_.size();
}
inline int Region_RectanglesRegion::rectangles_size() const {
  return _internal_rectangles_size();
}
inline ::improbable::platform::runtime::Rectangle* Region_RectanglesRegion::mutable_rectangles(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.Region.RectanglesRegion.rectangles)
  return rectangles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >*
Region_RectanglesRegion::mutable_rectangles() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.Region.RectanglesRegion.rectangles)
  return &rectangles_;
}
inline const ::improbable::platform::runtime::Rectangle& Region_RectanglesRegion::_internal_rectangles(int index) const {
  return rectangles_.Get(index);
}
inline const ::improbable::platform::runtime::Rectangle& Region_RectanglesRegion::rectangles(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Region.RectanglesRegion.rectangles)
  return _internal_rectangles(index);
}
inline ::improbable::platform::runtime::Rectangle* Region_RectanglesRegion::_internal_add_rectangles() {
  return rectangles_.Add();
}
inline ::improbable::platform::runtime::Rectangle* Region_RectanglesRegion::add_rectangles() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.Region.RectanglesRegion.rectangles)
  return _internal_add_rectangles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >&
Region_RectanglesRegion::rectangles() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.Region.RectanglesRegion.rectangles)
  return rectangles_;
}

// -------------------------------------------------------------------

// Region

// .improbable.platform.runtime.Region.RectanglesRegion as_rectangles = 1;
inline bool Region::_internal_has_as_rectangles() const {
  return area_case() == kAsRectangles;
}
inline bool Region::has_as_rectangles() const {
  return _internal_has_as_rectangles();
}
inline void Region::set_has_as_rectangles() {
  _oneof_case_[0] = kAsRectangles;
}
inline void Region::clear_as_rectangles() {
  if (_internal_has_as_rectangles()) {
    if (GetArena() == nullptr) {
      delete area_.as_rectangles_;
    }
    clear_has_area();
  }
}
inline ::improbable::platform::runtime::Region_RectanglesRegion* Region::release_as_rectangles() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.Region.as_rectangles)
  if (_internal_has_as_rectangles()) {
    clear_has_area();
      ::improbable::platform::runtime::Region_RectanglesRegion* temp = area_.as_rectangles_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    area_.as_rectangles_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::Region_RectanglesRegion& Region::_internal_as_rectangles() const {
  return _internal_has_as_rectangles()
      ? *area_.as_rectangles_
      : reinterpret_cast< ::improbable::platform::runtime::Region_RectanglesRegion&>(::improbable::platform::runtime::_Region_RectanglesRegion_default_instance_);
}
inline const ::improbable::platform::runtime::Region_RectanglesRegion& Region::as_rectangles() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Region.as_rectangles)
  return _internal_as_rectangles();
}
inline ::improbable::platform::runtime::Region_RectanglesRegion* Region::unsafe_arena_release_as_rectangles() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.Region.as_rectangles)
  if (_internal_has_as_rectangles()) {
    clear_has_area();
    ::improbable::platform::runtime::Region_RectanglesRegion* temp = area_.as_rectangles_;
    area_.as_rectangles_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Region::unsafe_arena_set_allocated_as_rectangles(::improbable::platform::runtime::Region_RectanglesRegion* as_rectangles) {
  clear_area();
  if (as_rectangles) {
    set_has_as_rectangles();
    area_.as_rectangles_ = as_rectangles;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.Region.as_rectangles)
}
inline ::improbable::platform::runtime::Region_RectanglesRegion* Region::_internal_mutable_as_rectangles() {
  if (!_internal_has_as_rectangles()) {
    clear_area();
    set_has_as_rectangles();
    area_.as_rectangles_ = CreateMaybeMessage< ::improbable::platform::runtime::Region_RectanglesRegion >(GetArena());
  }
  return area_.as_rectangles_;
}
inline ::improbable::platform::runtime::Region_RectanglesRegion* Region::mutable_as_rectangles() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.Region.as_rectangles)
  return _internal_mutable_as_rectangles();
}

inline bool Region::has_area() const {
  return area_case() != AREA_NOT_SET;
}
inline void Region::clear_has_area() {
  _oneof_case_[0] = AREA_NOT_SET;
}
inline Region::AreaCase Region::area_case() const {
  return Region::AreaCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetWorldExtentsRequest

// -------------------------------------------------------------------

// GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision

// repeated .improbable.platform.runtime.Rectangle gsim_bounds = 1;
inline int GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::_internal_gsim_bounds_size() const {
  return gsim_bounds_.size();
}
inline int GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::gsim_bounds_size() const {
  return _internal_gsim_bounds_size();
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::mutable_gsim_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.gsim_bounds)
  return gsim_bounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >*
GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::mutable_gsim_bounds() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.gsim_bounds)
  return &gsim_bounds_;
}
inline const ::improbable::platform::runtime::Rectangle& GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::_internal_gsim_bounds(int index) const {
  return gsim_bounds_.Get(index);
}
inline const ::improbable::platform::runtime::Rectangle& GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::gsim_bounds(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.gsim_bounds)
  return _internal_gsim_bounds(index);
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::_internal_add_gsim_bounds() {
  return gsim_bounds_.Add();
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::add_gsim_bounds() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.gsim_bounds)
  return _internal_add_gsim_bounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::Rectangle >&
GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::gsim_bounds() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.gsim_bounds)
  return gsim_bounds_;
}

// int32 chunk_size = 2;
inline void GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::clear_chunk_size() {
  chunk_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::_internal_chunk_size() const {
  return chunk_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::chunk_size() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.chunk_size)
  return _internal_chunk_size();
}
inline void GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::_internal_set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chunk_size_ = value;
}
inline void GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision::set_chunk_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chunk_size(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision.chunk_size)
}

// -------------------------------------------------------------------

// GetWorldExtentsResponse_WorldSubdivision

// .improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.GsimSubdivision gsim_extents = 1;
inline bool GetWorldExtentsResponse_WorldSubdivision::_internal_has_gsim_extents() const {
  return subdivision_case() == kGsimExtents;
}
inline bool GetWorldExtentsResponse_WorldSubdivision::has_gsim_extents() const {
  return _internal_has_gsim_extents();
}
inline void GetWorldExtentsResponse_WorldSubdivision::set_has_gsim_extents() {
  _oneof_case_[0] = kGsimExtents;
}
inline void GetWorldExtentsResponse_WorldSubdivision::clear_gsim_extents() {
  if (_internal_has_gsim_extents()) {
    if (GetArena() == nullptr) {
      delete subdivision_.gsim_extents_;
    }
    clear_has_subdivision();
  }
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* GetWorldExtentsResponse_WorldSubdivision::release_gsim_extents() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.gsim_extents)
  if (_internal_has_gsim_extents()) {
    clear_has_subdivision();
      ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* temp = subdivision_.gsim_extents_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    subdivision_.gsim_extents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& GetWorldExtentsResponse_WorldSubdivision::_internal_gsim_extents() const {
  return _internal_has_gsim_extents()
      ? *subdivision_.gsim_extents_
      : reinterpret_cast< ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision&>(::improbable::platform::runtime::_GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision_default_instance_);
}
inline const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision& GetWorldExtentsResponse_WorldSubdivision::gsim_extents() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.gsim_extents)
  return _internal_gsim_extents();
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* GetWorldExtentsResponse_WorldSubdivision::unsafe_arena_release_gsim_extents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.gsim_extents)
  if (_internal_has_gsim_extents()) {
    clear_has_subdivision();
    ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* temp = subdivision_.gsim_extents_;
    subdivision_.gsim_extents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetWorldExtentsResponse_WorldSubdivision::unsafe_arena_set_allocated_gsim_extents(::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* gsim_extents) {
  clear_subdivision();
  if (gsim_extents) {
    set_has_gsim_extents();
    subdivision_.gsim_extents_ = gsim_extents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.gsim_extents)
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* GetWorldExtentsResponse_WorldSubdivision::_internal_mutable_gsim_extents() {
  if (!_internal_has_gsim_extents()) {
    clear_subdivision();
    set_has_gsim_extents();
    subdivision_.gsim_extents_ = CreateMaybeMessage< ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision >(GetArena());
  }
  return subdivision_.gsim_extents_;
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision_GsimSubdivision* GetWorldExtentsResponse_WorldSubdivision::mutable_gsim_extents() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision.gsim_extents)
  return _internal_mutable_gsim_extents();
}

inline bool GetWorldExtentsResponse_WorldSubdivision::has_subdivision() const {
  return subdivision_case() != SUBDIVISION_NOT_SET;
}
inline void GetWorldExtentsResponse_WorldSubdivision::clear_has_subdivision() {
  _oneof_case_[0] = SUBDIVISION_NOT_SET;
}
inline GetWorldExtentsResponse_WorldSubdivision::SubdivisionCase GetWorldExtentsResponse_WorldSubdivision::subdivision_case() const {
  return GetWorldExtentsResponse_WorldSubdivision::SubdivisionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetWorldExtentsResponse

// .improbable.platform.runtime.GetWorldExtentsResponse.WorldSubdivision world_subdivision = 1;
inline bool GetWorldExtentsResponse::_internal_has_world_subdivision() const {
  return this != internal_default_instance() && world_subdivision_ != nullptr;
}
inline bool GetWorldExtentsResponse::has_world_subdivision() const {
  return _internal_has_world_subdivision();
}
inline void GetWorldExtentsResponse::clear_world_subdivision() {
  if (GetArena() == nullptr && world_subdivision_ != nullptr) {
    delete world_subdivision_;
  }
  world_subdivision_ = nullptr;
}
inline const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision& GetWorldExtentsResponse::_internal_world_subdivision() const {
  const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* p = world_subdivision_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision&>(
      ::improbable::platform::runtime::_GetWorldExtentsResponse_WorldSubdivision_default_instance_);
}
inline const ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision& GetWorldExtentsResponse::world_subdivision() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorldExtentsResponse.world_subdivision)
  return _internal_world_subdivision();
}
inline void GetWorldExtentsResponse::unsafe_arena_set_allocated_world_subdivision(
    ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* world_subdivision) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_subdivision_);
  }
  world_subdivision_ = world_subdivision;
  if (world_subdivision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetWorldExtentsResponse.world_subdivision)
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* GetWorldExtentsResponse::release_world_subdivision() {
  
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* temp = world_subdivision_;
  world_subdivision_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* GetWorldExtentsResponse::unsafe_arena_release_world_subdivision() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorldExtentsResponse.world_subdivision)
  
  ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* temp = world_subdivision_;
  world_subdivision_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* GetWorldExtentsResponse::_internal_mutable_world_subdivision() {
  
  if (world_subdivision_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision>(GetArena());
    world_subdivision_ = p;
  }
  return world_subdivision_;
}
inline ::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* GetWorldExtentsResponse::mutable_world_subdivision() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorldExtentsResponse.world_subdivision)
  return _internal_mutable_world_subdivision();
}
inline void GetWorldExtentsResponse::set_allocated_world_subdivision(::improbable::platform::runtime::GetWorldExtentsResponse_WorldSubdivision* world_subdivision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete world_subdivision_;
  }
  if (world_subdivision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(world_subdivision);
    if (message_arena != submessage_arena) {
      world_subdivision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_subdivision, submessage_arena);
    }
    
  } else {
    
  }
  world_subdivision_ = world_subdivision;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorldExtentsResponse.world_subdivision)
}

// .improbable.platform.runtime.Rectangle world_bounds = 2;
inline bool GetWorldExtentsResponse::_internal_has_world_bounds() const {
  return this != internal_default_instance() && world_bounds_ != nullptr;
}
inline bool GetWorldExtentsResponse::has_world_bounds() const {
  return _internal_has_world_bounds();
}
inline const ::improbable::platform::runtime::Rectangle& GetWorldExtentsResponse::_internal_world_bounds() const {
  const ::improbable::platform::runtime::Rectangle* p = world_bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Rectangle&>(
      ::improbable::platform::runtime::_Rectangle_default_instance_);
}
inline const ::improbable::platform::runtime::Rectangle& GetWorldExtentsResponse::world_bounds() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetWorldExtentsResponse.world_bounds)
  return _internal_world_bounds();
}
inline void GetWorldExtentsResponse::unsafe_arena_set_allocated_world_bounds(
    ::improbable::platform::runtime::Rectangle* world_bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_bounds_);
  }
  world_bounds_ = world_bounds;
  if (world_bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetWorldExtentsResponse.world_bounds)
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse::release_world_bounds() {
  
  ::improbable::platform::runtime::Rectangle* temp = world_bounds_;
  world_bounds_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse::unsafe_arena_release_world_bounds() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetWorldExtentsResponse.world_bounds)
  
  ::improbable::platform::runtime::Rectangle* temp = world_bounds_;
  world_bounds_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse::_internal_mutable_world_bounds() {
  
  if (world_bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Rectangle>(GetArena());
    world_bounds_ = p;
  }
  return world_bounds_;
}
inline ::improbable::platform::runtime::Rectangle* GetWorldExtentsResponse::mutable_world_bounds() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetWorldExtentsResponse.world_bounds)
  return _internal_mutable_world_bounds();
}
inline void GetWorldExtentsResponse::set_allocated_world_bounds(::improbable::platform::runtime::Rectangle* world_bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_bounds_);
  }
  if (world_bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_bounds)->GetArena();
    if (message_arena != submessage_arena) {
      world_bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_bounds, submessage_arena);
    }
    
  } else {
    
  }
  world_bounds_ = world_bounds;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetWorldExtentsResponse.world_bounds)
}

// -------------------------------------------------------------------

// GetChunksRequest

// .improbable.platform.runtime.Rectangle viewport = 1;
inline bool GetChunksRequest::_internal_has_viewport() const {
  return this != internal_default_instance() && viewport_ != nullptr;
}
inline bool GetChunksRequest::has_viewport() const {
  return _internal_has_viewport();
}
inline const ::improbable::platform::runtime::Rectangle& GetChunksRequest::_internal_viewport() const {
  const ::improbable::platform::runtime::Rectangle* p = viewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Rectangle&>(
      ::improbable::platform::runtime::_Rectangle_default_instance_);
}
inline const ::improbable::platform::runtime::Rectangle& GetChunksRequest::viewport() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetChunksRequest.viewport)
  return _internal_viewport();
}
inline void GetChunksRequest::unsafe_arena_set_allocated_viewport(
    ::improbable::platform::runtime::Rectangle* viewport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport_);
  }
  viewport_ = viewport;
  if (viewport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.GetChunksRequest.viewport)
}
inline ::improbable::platform::runtime::Rectangle* GetChunksRequest::release_viewport() {
  
  ::improbable::platform::runtime::Rectangle* temp = viewport_;
  viewport_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* GetChunksRequest::unsafe_arena_release_viewport() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.GetChunksRequest.viewport)
  
  ::improbable::platform::runtime::Rectangle* temp = viewport_;
  viewport_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* GetChunksRequest::_internal_mutable_viewport() {
  
  if (viewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Rectangle>(GetArena());
    viewport_ = p;
  }
  return viewport_;
}
inline ::improbable::platform::runtime::Rectangle* GetChunksRequest::mutable_viewport() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetChunksRequest.viewport)
  return _internal_mutable_viewport();
}
inline void GetChunksRequest::set_allocated_viewport(::improbable::platform::runtime::Rectangle* viewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport_);
  }
  if (viewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport)->GetArena();
    if (message_arena != submessage_arena) {
      viewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewport, submessage_arena);
    }
    
  } else {
    
  }
  viewport_ = viewport;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.GetChunksRequest.viewport)
}

// -------------------------------------------------------------------

// GetChunksResponse

// repeated .improbable.platform.runtime.ChunkDetails chunks = 1;
inline int GetChunksResponse::_internal_chunks_size() const {
  return chunks_.size();
}
inline int GetChunksResponse::chunks_size() const {
  return _internal_chunks_size();
}
inline void GetChunksResponse::clear_chunks() {
  chunks_.Clear();
}
inline ::improbable::platform::runtime::ChunkDetails* GetChunksResponse::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.GetChunksResponse.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::ChunkDetails >*
GetChunksResponse::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.GetChunksResponse.chunks)
  return &chunks_;
}
inline const ::improbable::platform::runtime::ChunkDetails& GetChunksResponse::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::improbable::platform::runtime::ChunkDetails& GetChunksResponse::chunks(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.GetChunksResponse.chunks)
  return _internal_chunks(index);
}
inline ::improbable::platform::runtime::ChunkDetails* GetChunksResponse::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::improbable::platform::runtime::ChunkDetails* GetChunksResponse::add_chunks() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.GetChunksResponse.chunks)
  return _internal_add_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::ChunkDetails >&
GetChunksResponse::chunks() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.GetChunksResponse.chunks)
  return chunks_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChunkDetails

// string chunk_id = 1;
inline void ChunkDetails::clear_chunk_id() {
  chunk_id_.ClearToEmpty();
}
inline const std::string& ChunkDetails::chunk_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ChunkDetails.chunk_id)
  return _internal_chunk_id();
}
inline void ChunkDetails::set_chunk_id(const std::string& value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ChunkDetails.chunk_id)
}
inline std::string* ChunkDetails::mutable_chunk_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ChunkDetails.chunk_id)
  return _internal_mutable_chunk_id();
}
inline const std::string& ChunkDetails::_internal_chunk_id() const {
  return chunk_id_.Get();
}
inline void ChunkDetails::_internal_set_chunk_id(const std::string& value) {
  
  chunk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChunkDetails::set_chunk_id(std::string&& value) {
  
  chunk_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.ChunkDetails.chunk_id)
}
inline void ChunkDetails::set_chunk_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chunk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.ChunkDetails.chunk_id)
}
inline void ChunkDetails::set_chunk_id(const char* value,
    size_t size) {
  
  chunk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.ChunkDetails.chunk_id)
}
inline std::string* ChunkDetails::_internal_mutable_chunk_id() {
  
  return chunk_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChunkDetails::release_chunk_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ChunkDetails.chunk_id)
  return chunk_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChunkDetails::set_allocated_chunk_id(std::string* chunk_id) {
  if (chunk_id != nullptr) {
    
  } else {
    
  }
  chunk_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ChunkDetails.chunk_id)
}

// .improbable.platform.runtime.Rectangle extent = 2;
inline bool ChunkDetails::_internal_has_extent() const {
  return this != internal_default_instance() && extent_ != nullptr;
}
inline bool ChunkDetails::has_extent() const {
  return _internal_has_extent();
}
inline const ::improbable::platform::runtime::Rectangle& ChunkDetails::_internal_extent() const {
  const ::improbable::platform::runtime::Rectangle* p = extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Rectangle&>(
      ::improbable::platform::runtime::_Rectangle_default_instance_);
}
inline const ::improbable::platform::runtime::Rectangle& ChunkDetails::extent() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ChunkDetails.extent)
  return _internal_extent();
}
inline void ChunkDetails::unsafe_arena_set_allocated_extent(
    ::improbable::platform::runtime::Rectangle* extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.ChunkDetails.extent)
}
inline ::improbable::platform::runtime::Rectangle* ChunkDetails::release_extent() {
  
  ::improbable::platform::runtime::Rectangle* temp = extent_;
  extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* ChunkDetails::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.ChunkDetails.extent)
  
  ::improbable::platform::runtime::Rectangle* temp = extent_;
  extent_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Rectangle* ChunkDetails::_internal_mutable_extent() {
  
  if (extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Rectangle>(GetArena());
    extent_ = p;
  }
  return extent_;
}
inline ::improbable::platform::runtime::Rectangle* ChunkDetails::mutable_extent() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ChunkDetails.extent)
  return _internal_mutable_extent();
}
inline void ChunkDetails::set_allocated_extent(::improbable::platform::runtime::Rectangle* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent)->GetArena();
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.ChunkDetails.extent)
}

// repeated string subscribed_worker_ids = 3;
inline int ChunkDetails::_internal_subscribed_worker_ids_size() const {
  return subscribed_worker_ids_.size();
}
inline int ChunkDetails::subscribed_worker_ids_size() const {
  return _internal_subscribed_worker_ids_size();
}
inline void ChunkDetails::clear_subscribed_worker_ids() {
  subscribed_worker_ids_.Clear();
}
inline std::string* ChunkDetails::add_subscribed_worker_ids() {
  // @@protoc_insertion_point(field_add_mutable:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  return _internal_add_subscribed_worker_ids();
}
inline const std::string& ChunkDetails::_internal_subscribed_worker_ids(int index) const {
  return subscribed_worker_ids_.Get(index);
}
inline const std::string& ChunkDetails::subscribed_worker_ids(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  return _internal_subscribed_worker_ids(index);
}
inline std::string* ChunkDetails::mutable_subscribed_worker_ids(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  return subscribed_worker_ids_.Mutable(index);
}
inline void ChunkDetails::set_subscribed_worker_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  subscribed_worker_ids_.Mutable(index)->assign(value);
}
inline void ChunkDetails::set_subscribed_worker_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  subscribed_worker_ids_.Mutable(index)->assign(std::move(value));
}
inline void ChunkDetails::set_subscribed_worker_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscribed_worker_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
}
inline void ChunkDetails::set_subscribed_worker_ids(int index, const char* value, size_t size) {
  subscribed_worker_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
}
inline std::string* ChunkDetails::_internal_add_subscribed_worker_ids() {
  return subscribed_worker_ids_.Add();
}
inline void ChunkDetails::add_subscribed_worker_ids(const std::string& value) {
  subscribed_worker_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
}
inline void ChunkDetails::add_subscribed_worker_ids(std::string&& value) {
  subscribed_worker_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
}
inline void ChunkDetails::add_subscribed_worker_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscribed_worker_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
}
inline void ChunkDetails::add_subscribed_worker_ids(const char* value, size_t size) {
  subscribed_worker_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChunkDetails::subscribed_worker_ids() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  return subscribed_worker_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChunkDetails::mutable_subscribed_worker_ids() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.ChunkDetails.subscribed_worker_ids)
  return &subscribed_worker_ids_;
}

// map<string, string> worker_assignments = 4;
inline int ChunkDetails::_internal_worker_assignments_size() const {
  return worker_assignments_.size();
}
inline int ChunkDetails::worker_assignments_size() const {
  return _internal_worker_assignments_size();
}
inline void ChunkDetails::clear_worker_assignments() {
  worker_assignments_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChunkDetails::_internal_worker_assignments() const {
  return worker_assignments_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChunkDetails::worker_assignments() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.ChunkDetails.worker_assignments)
  return _internal_worker_assignments();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChunkDetails::_internal_mutable_worker_assignments() {
  return worker_assignments_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChunkDetails::mutable_worker_assignments() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.ChunkDetails.worker_assignments)
  return _internal_mutable_worker_assignments();
}

// map<string, string> worker_assignment_overrides = 5 [deprecated = true];
inline int ChunkDetails::_internal_worker_assignment_overrides_size() const {
  return worker_assignment_overrides_.size();
}
inline int ChunkDetails::worker_assignment_overrides_size() const {
  return _internal_worker_assignment_overrides_size();
}
inline void ChunkDetails::clear_worker_assignment_overrides() {
  worker_assignment_overrides_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChunkDetails::_internal_worker_assignment_overrides() const {
  return worker_assignment_overrides_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChunkDetails::worker_assignment_overrides() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.ChunkDetails.worker_assignment_overrides)
  return _internal_worker_assignment_overrides();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChunkDetails::_internal_mutable_worker_assignment_overrides() {
  return worker_assignment_overrides_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChunkDetails::mutable_worker_assignment_overrides() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.ChunkDetails.worker_assignment_overrides)
  return _internal_mutable_worker_assignment_overrides();
}

// -------------------------------------------------------------------

// InspectionEntitySubscriptionQuery

// .improbable.platform.runtime.InspectionEntityQueryConstraint constraint = 1;
inline bool InspectionEntitySubscriptionQuery::_internal_has_constraint() const {
  return this != internal_default_instance() && constraint_ != nullptr;
}
inline bool InspectionEntitySubscriptionQuery::has_constraint() const {
  return _internal_has_constraint();
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& InspectionEntitySubscriptionQuery::_internal_constraint() const {
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint* p = constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::InspectionEntityQueryConstraint&>(
      ::improbable::platform::runtime::_InspectionEntityQueryConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& InspectionEntitySubscriptionQuery::constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionQuery.constraint)
  return _internal_constraint();
}
inline void InspectionEntitySubscriptionQuery::unsafe_arena_set_allocated_constraint(
    ::improbable::platform::runtime::InspectionEntityQueryConstraint* constraint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntitySubscriptionQuery.constraint)
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* InspectionEntitySubscriptionQuery::release_constraint() {
  
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* temp = constraint_;
  constraint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* InspectionEntitySubscriptionQuery::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntitySubscriptionQuery.constraint)
  
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* temp = constraint_;
  constraint_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* InspectionEntitySubscriptionQuery::_internal_mutable_constraint() {
  
  if (constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityQueryConstraint>(GetArena());
    constraint_ = p;
  }
  return constraint_;
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* InspectionEntitySubscriptionQuery::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntitySubscriptionQuery.constraint)
  return _internal_mutable_constraint();
}
inline void InspectionEntitySubscriptionQuery::set_allocated_constraint(::improbable::platform::runtime::InspectionEntityQueryConstraint* constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  if (constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint)->GetArena();
    if (message_arena != submessage_arena) {
      constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    
  } else {
    
  }
  constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntitySubscriptionQuery.constraint)
}

// .improbable.platform.runtime.InspectionQueryResultType result_type = 2;
inline bool InspectionEntitySubscriptionQuery::_internal_has_result_type() const {
  return this != internal_default_instance() && result_type_ != nullptr;
}
inline bool InspectionEntitySubscriptionQuery::has_result_type() const {
  return _internal_has_result_type();
}
inline const ::improbable::platform::runtime::InspectionQueryResultType& InspectionEntitySubscriptionQuery::_internal_result_type() const {
  const ::improbable::platform::runtime::InspectionQueryResultType* p = result_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::InspectionQueryResultType&>(
      ::improbable::platform::runtime::_InspectionQueryResultType_default_instance_);
}
inline const ::improbable::platform::runtime::InspectionQueryResultType& InspectionEntitySubscriptionQuery::result_type() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionQuery.result_type)
  return _internal_result_type();
}
inline void InspectionEntitySubscriptionQuery::unsafe_arena_set_allocated_result_type(
    ::improbable::platform::runtime::InspectionQueryResultType* result_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_type_);
  }
  result_type_ = result_type;
  if (result_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntitySubscriptionQuery.result_type)
}
inline ::improbable::platform::runtime::InspectionQueryResultType* InspectionEntitySubscriptionQuery::release_result_type() {
  
  ::improbable::platform::runtime::InspectionQueryResultType* temp = result_type_;
  result_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::InspectionQueryResultType* InspectionEntitySubscriptionQuery::unsafe_arena_release_result_type() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntitySubscriptionQuery.result_type)
  
  ::improbable::platform::runtime::InspectionQueryResultType* temp = result_type_;
  result_type_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::InspectionQueryResultType* InspectionEntitySubscriptionQuery::_internal_mutable_result_type() {
  
  if (result_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::InspectionQueryResultType>(GetArena());
    result_type_ = p;
  }
  return result_type_;
}
inline ::improbable::platform::runtime::InspectionQueryResultType* InspectionEntitySubscriptionQuery::mutable_result_type() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntitySubscriptionQuery.result_type)
  return _internal_mutable_result_type();
}
inline void InspectionEntitySubscriptionQuery::set_allocated_result_type(::improbable::platform::runtime::InspectionQueryResultType* result_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_type_);
  }
  if (result_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_type)->GetArena();
    if (message_arena != submessage_arena) {
      result_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_type, submessage_arena);
    }
    
  } else {
    
  }
  result_type_ = result_type;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntitySubscriptionQuery.result_type)
}

// -------------------------------------------------------------------

// InspectionEntitySubscriptionResponse

// repeated uint64 deleted_entities = 1;
inline int InspectionEntitySubscriptionResponse::_internal_deleted_entities_size() const {
  return deleted_entities_.size();
}
inline int InspectionEntitySubscriptionResponse::deleted_entities_size() const {
  return _internal_deleted_entities_size();
}
inline void InspectionEntitySubscriptionResponse::clear_deleted_entities() {
  deleted_entities_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InspectionEntitySubscriptionResponse::_internal_deleted_entities(int index) const {
  return deleted_entities_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InspectionEntitySubscriptionResponse::deleted_entities(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionResponse.deleted_entities)
  return _internal_deleted_entities(index);
}
inline void InspectionEntitySubscriptionResponse::set_deleted_entities(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  deleted_entities_.Set(index, value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntitySubscriptionResponse.deleted_entities)
}
inline void InspectionEntitySubscriptionResponse::_internal_add_deleted_entities(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  deleted_entities_.Add(value);
}
inline void InspectionEntitySubscriptionResponse::add_deleted_entities(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_deleted_entities(value);
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionEntitySubscriptionResponse.deleted_entities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InspectionEntitySubscriptionResponse::_internal_deleted_entities() const {
  return deleted_entities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
InspectionEntitySubscriptionResponse::deleted_entities() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.deleted_entities)
  return _internal_deleted_entities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InspectionEntitySubscriptionResponse::_internal_mutable_deleted_entities() {
  return &deleted_entities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
InspectionEntitySubscriptionResponse::mutable_deleted_entities() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.deleted_entities)
  return _internal_mutable_deleted_entities();
}

// repeated .improbable.platform.runtime.InspectionEntityComponentId removed_components = 2;
inline int InspectionEntitySubscriptionResponse::_internal_removed_components_size() const {
  return removed_components_.size();
}
inline int InspectionEntitySubscriptionResponse::removed_components_size() const {
  return _internal_removed_components_size();
}
inline void InspectionEntitySubscriptionResponse::clear_removed_components() {
  removed_components_.Clear();
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntitySubscriptionResponse::mutable_removed_components(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntitySubscriptionResponse.removed_components)
  return removed_components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentId >*
InspectionEntitySubscriptionResponse::mutable_removed_components() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.removed_components)
  return &removed_components_;
}
inline const ::improbable::platform::runtime::InspectionEntityComponentId& InspectionEntitySubscriptionResponse::_internal_removed_components(int index) const {
  return removed_components_.Get(index);
}
inline const ::improbable::platform::runtime::InspectionEntityComponentId& InspectionEntitySubscriptionResponse::removed_components(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionResponse.removed_components)
  return _internal_removed_components(index);
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntitySubscriptionResponse::_internal_add_removed_components() {
  return removed_components_.Add();
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntitySubscriptionResponse::add_removed_components() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionEntitySubscriptionResponse.removed_components)
  return _internal_add_removed_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentId >&
InspectionEntitySubscriptionResponse::removed_components() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.removed_components)
  return removed_components_;
}

// repeated .improbable.platform.runtime.InspectionEntitySnapshot added_entities = 3;
inline int InspectionEntitySubscriptionResponse::_internal_added_entities_size() const {
  return added_entities_.size();
}
inline int InspectionEntitySubscriptionResponse::added_entities_size() const {
  return _internal_added_entities_size();
}
inline void InspectionEntitySubscriptionResponse::clear_added_entities() {
  added_entities_.Clear();
}
inline ::improbable::platform::runtime::InspectionEntitySnapshot* InspectionEntitySubscriptionResponse::mutable_added_entities(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntitySubscriptionResponse.added_entities)
  return added_entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntitySnapshot >*
InspectionEntitySubscriptionResponse::mutable_added_entities() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.added_entities)
  return &added_entities_;
}
inline const ::improbable::platform::runtime::InspectionEntitySnapshot& InspectionEntitySubscriptionResponse::_internal_added_entities(int index) const {
  return added_entities_.Get(index);
}
inline const ::improbable::platform::runtime::InspectionEntitySnapshot& InspectionEntitySubscriptionResponse::added_entities(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionResponse.added_entities)
  return _internal_added_entities(index);
}
inline ::improbable::platform::runtime::InspectionEntitySnapshot* InspectionEntitySubscriptionResponse::_internal_add_added_entities() {
  return added_entities_.Add();
}
inline ::improbable::platform::runtime::InspectionEntitySnapshot* InspectionEntitySubscriptionResponse::add_added_entities() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionEntitySubscriptionResponse.added_entities)
  return _internal_add_added_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntitySnapshot >&
InspectionEntitySubscriptionResponse::added_entities() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.added_entities)
  return added_entities_;
}

// repeated .improbable.platform.runtime.InspectionEntityComponentUpdate updated_components = 4;
inline int InspectionEntitySubscriptionResponse::_internal_updated_components_size() const {
  return updated_components_.size();
}
inline int InspectionEntitySubscriptionResponse::updated_components_size() const {
  return _internal_updated_components_size();
}
inline void InspectionEntitySubscriptionResponse::clear_updated_components() {
  updated_components_.Clear();
}
inline ::improbable::platform::runtime::InspectionEntityComponentUpdate* InspectionEntitySubscriptionResponse::mutable_updated_components(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntitySubscriptionResponse.updated_components)
  return updated_components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentUpdate >*
InspectionEntitySubscriptionResponse::mutable_updated_components() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.updated_components)
  return &updated_components_;
}
inline const ::improbable::platform::runtime::InspectionEntityComponentUpdate& InspectionEntitySubscriptionResponse::_internal_updated_components(int index) const {
  return updated_components_.Get(index);
}
inline const ::improbable::platform::runtime::InspectionEntityComponentUpdate& InspectionEntitySubscriptionResponse::updated_components(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionResponse.updated_components)
  return _internal_updated_components(index);
}
inline ::improbable::platform::runtime::InspectionEntityComponentUpdate* InspectionEntitySubscriptionResponse::_internal_add_updated_components() {
  return updated_components_.Add();
}
inline ::improbable::platform::runtime::InspectionEntityComponentUpdate* InspectionEntitySubscriptionResponse::add_updated_components() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionEntitySubscriptionResponse.updated_components)
  return _internal_add_updated_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityComponentUpdate >&
InspectionEntitySubscriptionResponse::updated_components() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.updated_components)
  return updated_components_;
}

// repeated .improbable.platform.runtime.InspectionEntityAuthorityState authority_states = 5;
inline int InspectionEntitySubscriptionResponse::_internal_authority_states_size() const {
  return authority_states_.size();
}
inline int InspectionEntitySubscriptionResponse::authority_states_size() const {
  return _internal_authority_states_size();
}
inline void InspectionEntitySubscriptionResponse::clear_authority_states() {
  authority_states_.Clear();
}
inline ::improbable::platform::runtime::InspectionEntityAuthorityState* InspectionEntitySubscriptionResponse::mutable_authority_states(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntitySubscriptionResponse.authority_states)
  return authority_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityAuthorityState >*
InspectionEntitySubscriptionResponse::mutable_authority_states() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.authority_states)
  return &authority_states_;
}
inline const ::improbable::platform::runtime::InspectionEntityAuthorityState& InspectionEntitySubscriptionResponse::_internal_authority_states(int index) const {
  return authority_states_.Get(index);
}
inline const ::improbable::platform::runtime::InspectionEntityAuthorityState& InspectionEntitySubscriptionResponse::authority_states(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySubscriptionResponse.authority_states)
  return _internal_authority_states(index);
}
inline ::improbable::platform::runtime::InspectionEntityAuthorityState* InspectionEntitySubscriptionResponse::_internal_add_authority_states() {
  return authority_states_.Add();
}
inline ::improbable::platform::runtime::InspectionEntityAuthorityState* InspectionEntitySubscriptionResponse::add_authority_states() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionEntitySubscriptionResponse.authority_states)
  return _internal_add_authority_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityAuthorityState >&
InspectionEntitySubscriptionResponse::authority_states() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionEntitySubscriptionResponse.authority_states)
  return authority_states_;
}

// -------------------------------------------------------------------

// InspectionEntityComponentId

// int64 entity_id = 1;
inline void InspectionEntityComponentId::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectionEntityComponentId::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectionEntityComponentId::entity_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityComponentId.entity_id)
  return _internal_entity_id();
}
inline void InspectionEntityComponentId::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
}
inline void InspectionEntityComponentId::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntityComponentId.entity_id)
}

// uint32 component_id = 2;
inline void InspectionEntityComponentId::clear_component_id() {
  component_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectionEntityComponentId::_internal_component_id() const {
  return component_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectionEntityComponentId::component_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityComponentId.component_id)
  return _internal_component_id();
}
inline void InspectionEntityComponentId::_internal_set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  component_id_ = value;
}
inline void InspectionEntityComponentId::set_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_component_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntityComponentId.component_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InspectionEntitySnapshot

// int64 entity_id = 1;
inline void InspectionEntitySnapshot::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectionEntitySnapshot::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectionEntitySnapshot::entity_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntitySnapshot.entity_id)
  return _internal_entity_id();
}
inline void InspectionEntitySnapshot::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
}
inline void InspectionEntitySnapshot::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntitySnapshot.entity_id)
}

// map<uint32, bytes> components = 2;
inline int InspectionEntitySnapshot::_internal_components_size() const {
  return components_.size();
}
inline int InspectionEntitySnapshot::components_size() const {
  return _internal_components_size();
}
inline void InspectionEntitySnapshot::clear_components() {
  components_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
InspectionEntitySnapshot::_internal_components() const {
  return components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
InspectionEntitySnapshot::components() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.InspectionEntitySnapshot.components)
  return _internal_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
InspectionEntitySnapshot::_internal_mutable_components() {
  return components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
InspectionEntitySnapshot::mutable_components() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.InspectionEntitySnapshot.components)
  return _internal_mutable_components();
}

// -------------------------------------------------------------------

// InspectionEntityComponentUpdate

// .improbable.platform.runtime.InspectionEntityComponentId entity_component_id = 1;
inline bool InspectionEntityComponentUpdate::_internal_has_entity_component_id() const {
  return this != internal_default_instance() && entity_component_id_ != nullptr;
}
inline bool InspectionEntityComponentUpdate::has_entity_component_id() const {
  return _internal_has_entity_component_id();
}
inline void InspectionEntityComponentUpdate::clear_entity_component_id() {
  if (GetArena() == nullptr && entity_component_id_ != nullptr) {
    delete entity_component_id_;
  }
  entity_component_id_ = nullptr;
}
inline const ::improbable::platform::runtime::InspectionEntityComponentId& InspectionEntityComponentUpdate::_internal_entity_component_id() const {
  const ::improbable::platform::runtime::InspectionEntityComponentId* p = entity_component_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::InspectionEntityComponentId&>(
      ::improbable::platform::runtime::_InspectionEntityComponentId_default_instance_);
}
inline const ::improbable::platform::runtime::InspectionEntityComponentId& InspectionEntityComponentUpdate::entity_component_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityComponentUpdate.entity_component_id)
  return _internal_entity_component_id();
}
inline void InspectionEntityComponentUpdate::unsafe_arena_set_allocated_entity_component_id(
    ::improbable::platform::runtime::InspectionEntityComponentId* entity_component_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_component_id_);
  }
  entity_component_id_ = entity_component_id;
  if (entity_component_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityComponentUpdate.entity_component_id)
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntityComponentUpdate::release_entity_component_id() {
  
  ::improbable::platform::runtime::InspectionEntityComponentId* temp = entity_component_id_;
  entity_component_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntityComponentUpdate::unsafe_arena_release_entity_component_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityComponentUpdate.entity_component_id)
  
  ::improbable::platform::runtime::InspectionEntityComponentId* temp = entity_component_id_;
  entity_component_id_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntityComponentUpdate::_internal_mutable_entity_component_id() {
  
  if (entity_component_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityComponentId>(GetArena());
    entity_component_id_ = p;
  }
  return entity_component_id_;
}
inline ::improbable::platform::runtime::InspectionEntityComponentId* InspectionEntityComponentUpdate::mutable_entity_component_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityComponentUpdate.entity_component_id)
  return _internal_mutable_entity_component_id();
}
inline void InspectionEntityComponentUpdate::set_allocated_entity_component_id(::improbable::platform::runtime::InspectionEntityComponentId* entity_component_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entity_component_id_;
  }
  if (entity_component_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_component_id);
    if (message_arena != submessage_arena) {
      entity_component_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_component_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_component_id_ = entity_component_id;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityComponentUpdate.entity_component_id)
}

// bytes component = 2;
inline void InspectionEntityComponentUpdate::clear_component() {
  component_.ClearToEmpty();
}
inline const std::string& InspectionEntityComponentUpdate::component() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
  return _internal_component();
}
inline void InspectionEntityComponentUpdate::set_component(const std::string& value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
}
inline std::string* InspectionEntityComponentUpdate::mutable_component() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
  return _internal_mutable_component();
}
inline const std::string& InspectionEntityComponentUpdate::_internal_component() const {
  return component_.Get();
}
inline void InspectionEntityComponentUpdate::_internal_set_component(const std::string& value) {
  
  component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InspectionEntityComponentUpdate::set_component(std::string&& value) {
  
  component_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
}
inline void InspectionEntityComponentUpdate::set_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
}
inline void InspectionEntityComponentUpdate::set_component(const void* value,
    size_t size) {
  
  component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
}
inline std::string* InspectionEntityComponentUpdate::_internal_mutable_component() {
  
  return component_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InspectionEntityComponentUpdate::release_component() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
  return component_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InspectionEntityComponentUpdate::set_allocated_component(std::string* component) {
  if (component != nullptr) {
    
  } else {
    
  }
  component_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), component,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityComponentUpdate.component)
}

// repeated uint32 fields_to_clear = 3;
inline int InspectionEntityComponentUpdate::_internal_fields_to_clear_size() const {
  return fields_to_clear_.size();
}
inline int InspectionEntityComponentUpdate::fields_to_clear_size() const {
  return _internal_fields_to_clear_size();
}
inline void InspectionEntityComponentUpdate::clear_fields_to_clear() {
  fields_to_clear_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectionEntityComponentUpdate::_internal_fields_to_clear(int index) const {
  return fields_to_clear_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectionEntityComponentUpdate::fields_to_clear(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityComponentUpdate.fields_to_clear)
  return _internal_fields_to_clear(index);
}
inline void InspectionEntityComponentUpdate::set_fields_to_clear(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fields_to_clear_.Set(index, value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntityComponentUpdate.fields_to_clear)
}
inline void InspectionEntityComponentUpdate::_internal_add_fields_to_clear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fields_to_clear_.Add(value);
}
inline void InspectionEntityComponentUpdate::add_fields_to_clear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fields_to_clear(value);
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionEntityComponentUpdate.fields_to_clear)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InspectionEntityComponentUpdate::_internal_fields_to_clear() const {
  return fields_to_clear_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InspectionEntityComponentUpdate::fields_to_clear() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionEntityComponentUpdate.fields_to_clear)
  return _internal_fields_to_clear();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InspectionEntityComponentUpdate::_internal_mutable_fields_to_clear() {
  return &fields_to_clear_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InspectionEntityComponentUpdate::mutable_fields_to_clear() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionEntityComponentUpdate.fields_to_clear)
  return _internal_mutable_fields_to_clear();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InspectionEntityAuthorityState

// int64 entity_id = 1;
inline void InspectionEntityAuthorityState::clear_entity_id() {
  entity_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectionEntityAuthorityState::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InspectionEntityAuthorityState::entity_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityAuthorityState.entity_id)
  return _internal_entity_id();
}
inline void InspectionEntityAuthorityState::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  entity_id_ = value;
}
inline void InspectionEntityAuthorityState::set_entity_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionEntityAuthorityState.entity_id)
}

// map<uint32, string> component_authority = 2;
inline int InspectionEntityAuthorityState::_internal_component_authority_size() const {
  return component_authority_.size();
}
inline int InspectionEntityAuthorityState::component_authority_size() const {
  return _internal_component_authority_size();
}
inline void InspectionEntityAuthorityState::clear_component_authority() {
  component_authority_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
InspectionEntityAuthorityState::_internal_component_authority() const {
  return component_authority_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
InspectionEntityAuthorityState::component_authority() const {
  // @@protoc_insertion_point(field_map:improbable.platform.runtime.InspectionEntityAuthorityState.component_authority)
  return _internal_component_authority();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
InspectionEntityAuthorityState::_internal_mutable_component_authority() {
  return component_authority_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
InspectionEntityAuthorityState::mutable_component_authority() {
  // @@protoc_insertion_point(field_mutable_map:improbable.platform.runtime.InspectionEntityAuthorityState.component_authority)
  return _internal_mutable_component_authority();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace runtime
}  // namespace platform
}  // namespace improbable

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory>() {
  return ::improbable::platform::runtime::WorkerLoadbalancingStatus_LoadCategory_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runtime_2finspection_2eproto

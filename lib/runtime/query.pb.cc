// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime/query.proto

#include "runtime/query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_AndConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthorityConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoxConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinates_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CylinderConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntityId_runtime_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityIdConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FalseConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SphereConstraint_runtime_2fquery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrueConstraint_runtime_2fquery_2eproto;
namespace improbable {
namespace platform {
namespace runtime {
class CoordinatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinates> _instance;
} _Coordinates_default_instance_;
class InspectionEntityQueryConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InspectionEntityQueryConstraint> _instance;
} _InspectionEntityQueryConstraint_default_instance_;
class SphereConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SphereConstraint> _instance;
} _SphereConstraint_default_instance_;
class CylinderConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CylinderConstraint> _instance;
} _CylinderConstraint_default_instance_;
class EntityIdConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityIdConstraint> _instance;
} _EntityIdConstraint_default_instance_;
class ComponentConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentConstraint> _instance;
} _ComponentConstraint_default_instance_;
class AndConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndConstraint> _instance;
} _AndConstraint_default_instance_;
class OrConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrConstraint> _instance;
} _OrConstraint_default_instance_;
class NotConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotConstraint> _instance;
} _NotConstraint_default_instance_;
class TrueConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrueConstraint> _instance;
} _TrueConstraint_default_instance_;
class FalseConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FalseConstraint> _instance;
} _FalseConstraint_default_instance_;
class BoxConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoxConstraint> _instance;
} _BoxConstraint_default_instance_;
class AuthorityConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthorityConstraint> _instance;
} _AuthorityConstraint_default_instance_;
class InspectionQueryResultTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InspectionQueryResultType> _instance;
} _InspectionQueryResultType_default_instance_;
class InspectionSnapshotResultTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InspectionSnapshotResultType> _instance;
} _InspectionSnapshotResultType_default_instance_;
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
static void InitDefaultsscc_info_AndConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_InspectionEntityQueryConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::InspectionEntityQueryConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::improbable::platform::runtime::_AndConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::AndConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::improbable::platform::runtime::_OrConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::OrConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::improbable::platform::runtime::_NotConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::NotConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_AndConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_AndConstraint_runtime_2fquery_2eproto}, {
      &scc_info_SphereConstraint_runtime_2fquery_2eproto.base,
      &scc_info_CylinderConstraint_runtime_2fquery_2eproto.base,
      &scc_info_EntityIdConstraint_runtime_2fquery_2eproto.base,
      &scc_info_ComponentConstraint_runtime_2fquery_2eproto.base,
      &scc_info_TrueConstraint_runtime_2fquery_2eproto.base,
      &scc_info_FalseConstraint_runtime_2fquery_2eproto.base,
      &scc_info_BoxConstraint_runtime_2fquery_2eproto.base,
      &scc_info_AuthorityConstraint_runtime_2fquery_2eproto.base,}};

static void InitDefaultsscc_info_AuthorityConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_AuthorityConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::AuthorityConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthorityConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthorityConstraint_runtime_2fquery_2eproto}, {}};

static void InitDefaultsscc_info_BoxConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_BoxConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::BoxConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoxConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoxConstraint_runtime_2fquery_2eproto}, {
      &scc_info_Coordinates_runtime_2fquery_2eproto.base,}};

static void InitDefaultsscc_info_ComponentConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_ComponentConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::ComponentConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComponentConstraint_runtime_2fquery_2eproto}, {}};

static void InitDefaultsscc_info_Coordinates_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_Coordinates_default_instance_;
    new (ptr) ::improbable::platform::runtime::Coordinates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinates_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coordinates_runtime_2fquery_2eproto}, {}};

static void InitDefaultsscc_info_CylinderConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_CylinderConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::CylinderConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CylinderConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CylinderConstraint_runtime_2fquery_2eproto}, {
      &scc_info_Coordinates_runtime_2fquery_2eproto.base,}};

static void InitDefaultsscc_info_EntityIdConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_EntityIdConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::EntityIdConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityIdConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EntityIdConstraint_runtime_2fquery_2eproto}, {
      &scc_info_EntityId_runtime_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_FalseConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_FalseConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::FalseConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FalseConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FalseConstraint_runtime_2fquery_2eproto}, {}};

static void InitDefaultsscc_info_InspectionQueryResultType_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_InspectionQueryResultType_default_instance_;
    new (ptr) ::improbable::platform::runtime::InspectionQueryResultType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InspectionQueryResultType_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InspectionQueryResultType_runtime_2fquery_2eproto}, {
      &scc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto.base,}};

static void InitDefaultsscc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_InspectionSnapshotResultType_default_instance_;
    new (ptr) ::improbable::platform::runtime::InspectionSnapshotResultType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto}, {}};

static void InitDefaultsscc_info_SphereConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_SphereConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::SphereConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SphereConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SphereConstraint_runtime_2fquery_2eproto}, {
      &scc_info_Coordinates_runtime_2fquery_2eproto.base,}};

static void InitDefaultsscc_info_TrueConstraint_runtime_2fquery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::improbable::platform::runtime::_TrueConstraint_default_instance_;
    new (ptr) ::improbable::platform::runtime::TrueConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrueConstraint_runtime_2fquery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrueConstraint_runtime_2fquery_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_runtime_2fquery_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_runtime_2fquery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_runtime_2fquery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_runtime_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::Coordinates, x_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::Coordinates, y_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::Coordinates, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionEntityQueryConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionEntityQueryConstraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionEntityQueryConstraint, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::SphereConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::SphereConstraint, center_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::SphereConstraint, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::CylinderConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::CylinderConstraint, center_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::CylinderConstraint, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::EntityIdConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::EntityIdConstraint, entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ComponentConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::ComponentConstraint, component_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::AndConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::AndConstraint, conjunct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::OrConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::OrConstraint, disjunct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::NotConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::NotConstraint, negated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::TrueConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::FalseConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BoxConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BoxConstraint, min_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::BoxConstraint, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::AuthorityConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::AuthorityConstraint, worker_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionQueryResultType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionQueryResultType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionQueryResultType, result_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionSnapshotResultType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionSnapshotResultType, full_snapshot_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionSnapshotResultType, component_id_),
  PROTOBUF_FIELD_OFFSET(::improbable::platform::runtime::InspectionSnapshotResultType, include_authority_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::improbable::platform::runtime::Coordinates)},
  { 8, -1, sizeof(::improbable::platform::runtime::InspectionEntityQueryConstraint)},
  { 25, -1, sizeof(::improbable::platform::runtime::SphereConstraint)},
  { 32, -1, sizeof(::improbable::platform::runtime::CylinderConstraint)},
  { 39, -1, sizeof(::improbable::platform::runtime::EntityIdConstraint)},
  { 45, -1, sizeof(::improbable::platform::runtime::ComponentConstraint)},
  { 51, -1, sizeof(::improbable::platform::runtime::AndConstraint)},
  { 57, -1, sizeof(::improbable::platform::runtime::OrConstraint)},
  { 63, -1, sizeof(::improbable::platform::runtime::NotConstraint)},
  { 69, -1, sizeof(::improbable::platform::runtime::TrueConstraint)},
  { 74, -1, sizeof(::improbable::platform::runtime::FalseConstraint)},
  { 79, -1, sizeof(::improbable::platform::runtime::BoxConstraint)},
  { 86, -1, sizeof(::improbable::platform::runtime::AuthorityConstraint)},
  { 92, -1, sizeof(::improbable::platform::runtime::InspectionQueryResultType)},
  { 99, -1, sizeof(::improbable::platform::runtime::InspectionSnapshotResultType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_Coordinates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_InspectionEntityQueryConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_SphereConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_CylinderConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_EntityIdConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_ComponentConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_AndConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_OrConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_NotConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_TrueConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_FalseConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_BoxConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_AuthorityConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_InspectionQueryResultType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::improbable::platform::runtime::_InspectionSnapshotResultType_default_instance_),
};

const char descriptor_table_protodef_runtime_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023runtime/query.proto\022\033improbable.platfo"
  "rm.runtime\032\024runtime/common.proto\".\n\013Coor"
  "dinates\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
  "\"\356\006\n\037InspectionEntityQueryConstraint\022J\n\021"
  "sphere_constraint\030\001 \001(\0132-.improbable.pla"
  "tform.runtime.SphereConstraintH\000\022N\n\023cyli"
  "nder_constraint\030\002 \001(\0132/.improbable.platf"
  "orm.runtime.CylinderConstraintH\000\022O\n\024enti"
  "ty_id_constraint\030\004 \001(\0132/.improbable.plat"
  "form.runtime.EntityIdConstraintH\000\022P\n\024com"
  "ponent_constraint\030\005 \001(\01320.improbable.pla"
  "tform.runtime.ComponentConstraintH\000\022D\n\016a"
  "nd_constraint\030\006 \001(\0132*.improbable.platfor"
  "m.runtime.AndConstraintH\000\022B\n\ror_constrai"
  "nt\030\007 \001(\0132).improbable.platform.runtime.O"
  "rConstraintH\000\022D\n\016not_constraint\030\010 \001(\0132*."
  "improbable.platform.runtime.NotConstrain"
  "tH\000\022F\n\017true_constraint\030\t \001(\0132+.improbabl"
  "e.platform.runtime.TrueConstraintH\000\022H\n\020f"
  "alse_constraint\030\n \001(\0132,.improbable.platf"
  "orm.runtime.FalseConstraintH\000\022D\n\016box_con"
  "straint\030\013 \001(\0132*.improbable.platform.runt"
  "ime.BoxConstraintH\000\022P\n\024authority_constra"
  "int\030\014 \001(\01320.improbable.platform.runtime."
  "AuthorityConstraintH\000B\014\n\nconstraintJ\004\010\003\020"
  "\004\"\\\n\020SphereConstraint\0228\n\006center\030\001 \001(\0132(."
  "improbable.platform.runtime.Coordinates\022"
  "\016\n\006radius\030\002 \001(\001\"^\n\022CylinderConstraint\0228\n"
  "\006center\030\001 \001(\0132(.improbable.platform.runt"
  "ime.Coordinates\022\016\n\006radius\030\002 \001(\001\"N\n\022Entit"
  "yIdConstraint\0228\n\tentity_id\030\001 \001(\0132%.impro"
  "bable.platform.runtime.EntityId\"(\n\023Compo"
  "nentConstraint\022\021\n\tcomponent\030\001 \001(\r\"_\n\rAnd"
  "Constraint\022N\n\010conjunct\030\001 \003(\0132<.improbabl"
  "e.platform.runtime.InspectionEntityQuery"
  "Constraint\"^\n\014OrConstraint\022N\n\010disjunct\030\001"
  " \003(\0132<.improbable.platform.runtime.Inspe"
  "ctionEntityQueryConstraint\"^\n\rNotConstra"
  "int\022M\n\007negated\030\001 \001(\0132<.improbable.platfo"
  "rm.runtime.InspectionEntityQueryConstrai"
  "nt\"\020\n\016TrueConstraint\"\021\n\017FalseConstraint\""
  "}\n\rBoxConstraint\0225\n\003min\030\001 \001(\0132(.improbab"
  "le.platform.runtime.Coordinates\0225\n\003max\030\002"
  " \001(\0132(.improbable.platform.runtime.Coord"
  "inates\"(\n\023AuthorityConstraint\022\021\n\tworker_"
  "id\030\001 \001(\t\"y\n\031InspectionQueryResultType\022M\n"
  "\010snapshot\030\001 \001(\01329.improbable.platform.ru"
  "ntime.InspectionSnapshotResultTypeH\000B\r\n\013"
  "result_type\"f\n\034InspectionSnapshotResultT"
  "ype\022\025\n\rfull_snapshot\030\001 \001(\010\022\024\n\014component_"
  "id\030\002 \003(\r\022\031\n\021include_authority\030\003 \001(\010B\026B\024I"
  "nspectionQueryProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_runtime_2fquery_2eproto_deps[1] = {
  &::descriptor_table_runtime_2fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_runtime_2fquery_2eproto_sccs[12] = {
  &scc_info_AndConstraint_runtime_2fquery_2eproto.base,
  &scc_info_AuthorityConstraint_runtime_2fquery_2eproto.base,
  &scc_info_BoxConstraint_runtime_2fquery_2eproto.base,
  &scc_info_ComponentConstraint_runtime_2fquery_2eproto.base,
  &scc_info_Coordinates_runtime_2fquery_2eproto.base,
  &scc_info_CylinderConstraint_runtime_2fquery_2eproto.base,
  &scc_info_EntityIdConstraint_runtime_2fquery_2eproto.base,
  &scc_info_FalseConstraint_runtime_2fquery_2eproto.base,
  &scc_info_InspectionQueryResultType_runtime_2fquery_2eproto.base,
  &scc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto.base,
  &scc_info_SphereConstraint_runtime_2fquery_2eproto.base,
  &scc_info_TrueConstraint_runtime_2fquery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_runtime_2fquery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2fquery_2eproto = {
  false, false, descriptor_table_protodef_runtime_2fquery_2eproto, "runtime/query.proto", 2067,
  &descriptor_table_runtime_2fquery_2eproto_once, descriptor_table_runtime_2fquery_2eproto_sccs, descriptor_table_runtime_2fquery_2eproto_deps, 12, 1,
  schemas, file_default_instances, TableStruct_runtime_2fquery_2eproto::offsets,
  file_level_metadata_runtime_2fquery_2eproto, 15, file_level_enum_descriptors_runtime_2fquery_2eproto, file_level_service_descriptors_runtime_2fquery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_runtime_2fquery_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_runtime_2fquery_2eproto)), true);
namespace improbable {
namespace platform {
namespace runtime {

// ===================================================================

class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.Coordinates)
}

void Coordinates::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.Coordinates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Coordinates::ArenaDtor(void* object) {
  Coordinates* _this = reinterpret_cast< Coordinates* >(object);
  (void)_this;
}
void Coordinates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinates& Coordinates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinates_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coordinates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.Coordinates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.Coordinates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.Coordinates)
    MergeFrom(*source);
  }
}

void Coordinates::MergeFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Coordinates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, z_)
      + sizeof(Coordinates::z_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InspectionEntityQueryConstraint::_Internal {
 public:
  static const ::improbable::platform::runtime::SphereConstraint& sphere_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::CylinderConstraint& cylinder_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::EntityIdConstraint& entity_id_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::ComponentConstraint& component_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::AndConstraint& and_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::OrConstraint& or_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::NotConstraint& not_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::TrueConstraint& true_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::FalseConstraint& false_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::BoxConstraint& box_constraint(const InspectionEntityQueryConstraint* msg);
  static const ::improbable::platform::runtime::AuthorityConstraint& authority_constraint(const InspectionEntityQueryConstraint* msg);
};

const ::improbable::platform::runtime::SphereConstraint&
InspectionEntityQueryConstraint::_Internal::sphere_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.sphere_constraint_;
}
const ::improbable::platform::runtime::CylinderConstraint&
InspectionEntityQueryConstraint::_Internal::cylinder_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.cylinder_constraint_;
}
const ::improbable::platform::runtime::EntityIdConstraint&
InspectionEntityQueryConstraint::_Internal::entity_id_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.entity_id_constraint_;
}
const ::improbable::platform::runtime::ComponentConstraint&
InspectionEntityQueryConstraint::_Internal::component_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.component_constraint_;
}
const ::improbable::platform::runtime::AndConstraint&
InspectionEntityQueryConstraint::_Internal::and_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.and_constraint_;
}
const ::improbable::platform::runtime::OrConstraint&
InspectionEntityQueryConstraint::_Internal::or_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.or_constraint_;
}
const ::improbable::platform::runtime::NotConstraint&
InspectionEntityQueryConstraint::_Internal::not_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.not_constraint_;
}
const ::improbable::platform::runtime::TrueConstraint&
InspectionEntityQueryConstraint::_Internal::true_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.true_constraint_;
}
const ::improbable::platform::runtime::FalseConstraint&
InspectionEntityQueryConstraint::_Internal::false_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.false_constraint_;
}
const ::improbable::platform::runtime::BoxConstraint&
InspectionEntityQueryConstraint::_Internal::box_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.box_constraint_;
}
const ::improbable::platform::runtime::AuthorityConstraint&
InspectionEntityQueryConstraint::_Internal::authority_constraint(const InspectionEntityQueryConstraint* msg) {
  return *msg->constraint_.authority_constraint_;
}
void InspectionEntityQueryConstraint::set_allocated_sphere_constraint(::improbable::platform::runtime::SphereConstraint* sphere_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (sphere_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sphere_constraint);
    if (message_arena != submessage_arena) {
      sphere_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere_constraint, submessage_arena);
    }
    set_has_sphere_constraint();
    constraint_.sphere_constraint_ = sphere_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.sphere_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_cylinder_constraint(::improbable::platform::runtime::CylinderConstraint* cylinder_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (cylinder_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cylinder_constraint);
    if (message_arena != submessage_arena) {
      cylinder_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cylinder_constraint, submessage_arena);
    }
    set_has_cylinder_constraint();
    constraint_.cylinder_constraint_ = cylinder_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.cylinder_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_entity_id_constraint(::improbable::platform::runtime::EntityIdConstraint* entity_id_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (entity_id_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_id_constraint);
    if (message_arena != submessage_arena) {
      entity_id_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id_constraint, submessage_arena);
    }
    set_has_entity_id_constraint();
    constraint_.entity_id_constraint_ = entity_id_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.entity_id_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_component_constraint(::improbable::platform::runtime::ComponentConstraint* component_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (component_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(component_constraint);
    if (message_arena != submessage_arena) {
      component_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_constraint, submessage_arena);
    }
    set_has_component_constraint();
    constraint_.component_constraint_ = component_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.component_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_and_constraint(::improbable::platform::runtime::AndConstraint* and_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (and_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(and_constraint);
    if (message_arena != submessage_arena) {
      and_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, and_constraint, submessage_arena);
    }
    set_has_and_constraint();
    constraint_.and_constraint_ = and_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.and_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_or_constraint(::improbable::platform::runtime::OrConstraint* or_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (or_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(or_constraint);
    if (message_arena != submessage_arena) {
      or_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, or_constraint, submessage_arena);
    }
    set_has_or_constraint();
    constraint_.or_constraint_ = or_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.or_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_not_constraint(::improbable::platform::runtime::NotConstraint* not_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (not_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(not_constraint);
    if (message_arena != submessage_arena) {
      not_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_constraint, submessage_arena);
    }
    set_has_not_constraint();
    constraint_.not_constraint_ = not_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.not_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_true_constraint(::improbable::platform::runtime::TrueConstraint* true_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (true_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(true_constraint);
    if (message_arena != submessage_arena) {
      true_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, true_constraint, submessage_arena);
    }
    set_has_true_constraint();
    constraint_.true_constraint_ = true_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.true_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_false_constraint(::improbable::platform::runtime::FalseConstraint* false_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (false_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(false_constraint);
    if (message_arena != submessage_arena) {
      false_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, false_constraint, submessage_arena);
    }
    set_has_false_constraint();
    constraint_.false_constraint_ = false_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.false_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_box_constraint(::improbable::platform::runtime::BoxConstraint* box_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (box_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box_constraint);
    if (message_arena != submessage_arena) {
      box_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_constraint, submessage_arena);
    }
    set_has_box_constraint();
    constraint_.box_constraint_ = box_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.box_constraint)
}
void InspectionEntityQueryConstraint::set_allocated_authority_constraint(::improbable::platform::runtime::AuthorityConstraint* authority_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (authority_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(authority_constraint);
    if (message_arena != submessage_arena) {
      authority_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authority_constraint, submessage_arena);
    }
    set_has_authority_constraint();
    constraint_.authority_constraint_ = authority_constraint;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.authority_constraint)
}
InspectionEntityQueryConstraint::InspectionEntityQueryConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.InspectionEntityQueryConstraint)
}
InspectionEntityQueryConstraint::InspectionEntityQueryConstraint(const InspectionEntityQueryConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kSphereConstraint: {
      _internal_mutable_sphere_constraint()->::improbable::platform::runtime::SphereConstraint::MergeFrom(from._internal_sphere_constraint());
      break;
    }
    case kCylinderConstraint: {
      _internal_mutable_cylinder_constraint()->::improbable::platform::runtime::CylinderConstraint::MergeFrom(from._internal_cylinder_constraint());
      break;
    }
    case kEntityIdConstraint: {
      _internal_mutable_entity_id_constraint()->::improbable::platform::runtime::EntityIdConstraint::MergeFrom(from._internal_entity_id_constraint());
      break;
    }
    case kComponentConstraint: {
      _internal_mutable_component_constraint()->::improbable::platform::runtime::ComponentConstraint::MergeFrom(from._internal_component_constraint());
      break;
    }
    case kAndConstraint: {
      _internal_mutable_and_constraint()->::improbable::platform::runtime::AndConstraint::MergeFrom(from._internal_and_constraint());
      break;
    }
    case kOrConstraint: {
      _internal_mutable_or_constraint()->::improbable::platform::runtime::OrConstraint::MergeFrom(from._internal_or_constraint());
      break;
    }
    case kNotConstraint: {
      _internal_mutable_not_constraint()->::improbable::platform::runtime::NotConstraint::MergeFrom(from._internal_not_constraint());
      break;
    }
    case kTrueConstraint: {
      _internal_mutable_true_constraint()->::improbable::platform::runtime::TrueConstraint::MergeFrom(from._internal_true_constraint());
      break;
    }
    case kFalseConstraint: {
      _internal_mutable_false_constraint()->::improbable::platform::runtime::FalseConstraint::MergeFrom(from._internal_false_constraint());
      break;
    }
    case kBoxConstraint: {
      _internal_mutable_box_constraint()->::improbable::platform::runtime::BoxConstraint::MergeFrom(from._internal_box_constraint());
      break;
    }
    case kAuthorityConstraint: {
      _internal_mutable_authority_constraint()->::improbable::platform::runtime::AuthorityConstraint::MergeFrom(from._internal_authority_constraint());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.InspectionEntityQueryConstraint)
}

void InspectionEntityQueryConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndConstraint_runtime_2fquery_2eproto.base);
  clear_has_constraint();
}

InspectionEntityQueryConstraint::~InspectionEntityQueryConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.InspectionEntityQueryConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InspectionEntityQueryConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_constraint()) {
    clear_constraint();
  }
}

void InspectionEntityQueryConstraint::ArenaDtor(void* object) {
  InspectionEntityQueryConstraint* _this = reinterpret_cast< InspectionEntityQueryConstraint* >(object);
  (void)_this;
}
void InspectionEntityQueryConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InspectionEntityQueryConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectionEntityQueryConstraint& InspectionEntityQueryConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void InspectionEntityQueryConstraint::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  switch (constraint_case()) {
    case kSphereConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.sphere_constraint_;
      }
      break;
    }
    case kCylinderConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.cylinder_constraint_;
      }
      break;
    }
    case kEntityIdConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.entity_id_constraint_;
      }
      break;
    }
    case kComponentConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.component_constraint_;
      }
      break;
    }
    case kAndConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.and_constraint_;
      }
      break;
    }
    case kOrConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.or_constraint_;
      }
      break;
    }
    case kNotConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.not_constraint_;
      }
      break;
    }
    case kTrueConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.true_constraint_;
      }
      break;
    }
    case kFalseConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.false_constraint_;
      }
      break;
    }
    case kBoxConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.box_constraint_;
      }
      break;
    }
    case kAuthorityConstraint: {
      if (GetArena() == nullptr) {
        delete constraint_.authority_constraint_;
      }
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void InspectionEntityQueryConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_constraint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InspectionEntityQueryConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.SphereConstraint sphere_constraint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.CylinderConstraint cylinder_constraint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cylinder_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.EntityIdConstraint entity_id_constraint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.ComponentConstraint component_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.AndConstraint and_constraint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_and_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.OrConstraint or_constraint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_or_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.NotConstraint not_constraint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.TrueConstraint true_constraint = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_true_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.FalseConstraint false_constraint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_false_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.BoxConstraint box_constraint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_box_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.AuthorityConstraint authority_constraint = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_authority_constraint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InspectionEntityQueryConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.SphereConstraint sphere_constraint = 1;
  if (_internal_has_sphere_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sphere_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.CylinderConstraint cylinder_constraint = 2;
  if (_internal_has_cylinder_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cylinder_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.EntityIdConstraint entity_id_constraint = 4;
  if (_internal_has_entity_id_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::entity_id_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.ComponentConstraint component_constraint = 5;
  if (_internal_has_component_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::component_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.AndConstraint and_constraint = 6;
  if (_internal_has_and_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::and_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.OrConstraint or_constraint = 7;
  if (_internal_has_or_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::or_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.NotConstraint not_constraint = 8;
  if (_internal_has_not_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::not_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.TrueConstraint true_constraint = 9;
  if (_internal_has_true_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::true_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.FalseConstraint false_constraint = 10;
  if (_internal_has_false_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::false_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.BoxConstraint box_constraint = 11;
  if (_internal_has_box_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::box_constraint(this), target, stream);
  }

  // .improbable.platform.runtime.AuthorityConstraint authority_constraint = 12;
  if (_internal_has_authority_constraint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::authority_constraint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.InspectionEntityQueryConstraint)
  return target;
}

size_t InspectionEntityQueryConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (constraint_case()) {
    // .improbable.platform.runtime.SphereConstraint sphere_constraint = 1;
    case kSphereConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.sphere_constraint_);
      break;
    }
    // .improbable.platform.runtime.CylinderConstraint cylinder_constraint = 2;
    case kCylinderConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.cylinder_constraint_);
      break;
    }
    // .improbable.platform.runtime.EntityIdConstraint entity_id_constraint = 4;
    case kEntityIdConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.entity_id_constraint_);
      break;
    }
    // .improbable.platform.runtime.ComponentConstraint component_constraint = 5;
    case kComponentConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.component_constraint_);
      break;
    }
    // .improbable.platform.runtime.AndConstraint and_constraint = 6;
    case kAndConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.and_constraint_);
      break;
    }
    // .improbable.platform.runtime.OrConstraint or_constraint = 7;
    case kOrConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.or_constraint_);
      break;
    }
    // .improbable.platform.runtime.NotConstraint not_constraint = 8;
    case kNotConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.not_constraint_);
      break;
    }
    // .improbable.platform.runtime.TrueConstraint true_constraint = 9;
    case kTrueConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.true_constraint_);
      break;
    }
    // .improbable.platform.runtime.FalseConstraint false_constraint = 10;
    case kFalseConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.false_constraint_);
      break;
    }
    // .improbable.platform.runtime.BoxConstraint box_constraint = 11;
    case kBoxConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.box_constraint_);
      break;
    }
    // .improbable.platform.runtime.AuthorityConstraint authority_constraint = 12;
    case kAuthorityConstraint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.authority_constraint_);
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectionEntityQueryConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectionEntityQueryConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InspectionEntityQueryConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.InspectionEntityQueryConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.InspectionEntityQueryConstraint)
    MergeFrom(*source);
  }
}

void InspectionEntityQueryConstraint::MergeFrom(const InspectionEntityQueryConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.constraint_case()) {
    case kSphereConstraint: {
      _internal_mutable_sphere_constraint()->::improbable::platform::runtime::SphereConstraint::MergeFrom(from._internal_sphere_constraint());
      break;
    }
    case kCylinderConstraint: {
      _internal_mutable_cylinder_constraint()->::improbable::platform::runtime::CylinderConstraint::MergeFrom(from._internal_cylinder_constraint());
      break;
    }
    case kEntityIdConstraint: {
      _internal_mutable_entity_id_constraint()->::improbable::platform::runtime::EntityIdConstraint::MergeFrom(from._internal_entity_id_constraint());
      break;
    }
    case kComponentConstraint: {
      _internal_mutable_component_constraint()->::improbable::platform::runtime::ComponentConstraint::MergeFrom(from._internal_component_constraint());
      break;
    }
    case kAndConstraint: {
      _internal_mutable_and_constraint()->::improbable::platform::runtime::AndConstraint::MergeFrom(from._internal_and_constraint());
      break;
    }
    case kOrConstraint: {
      _internal_mutable_or_constraint()->::improbable::platform::runtime::OrConstraint::MergeFrom(from._internal_or_constraint());
      break;
    }
    case kNotConstraint: {
      _internal_mutable_not_constraint()->::improbable::platform::runtime::NotConstraint::MergeFrom(from._internal_not_constraint());
      break;
    }
    case kTrueConstraint: {
      _internal_mutable_true_constraint()->::improbable::platform::runtime::TrueConstraint::MergeFrom(from._internal_true_constraint());
      break;
    }
    case kFalseConstraint: {
      _internal_mutable_false_constraint()->::improbable::platform::runtime::FalseConstraint::MergeFrom(from._internal_false_constraint());
      break;
    }
    case kBoxConstraint: {
      _internal_mutable_box_constraint()->::improbable::platform::runtime::BoxConstraint::MergeFrom(from._internal_box_constraint());
      break;
    }
    case kAuthorityConstraint: {
      _internal_mutable_authority_constraint()->::improbable::platform::runtime::AuthorityConstraint::MergeFrom(from._internal_authority_constraint());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
}

void InspectionEntityQueryConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectionEntityQueryConstraint::CopyFrom(const InspectionEntityQueryConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.InspectionEntityQueryConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectionEntityQueryConstraint::IsInitialized() const {
  return true;
}

void InspectionEntityQueryConstraint::InternalSwap(InspectionEntityQueryConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InspectionEntityQueryConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SphereConstraint::_Internal {
 public:
  static const ::improbable::platform::runtime::Coordinates& center(const SphereConstraint* msg);
};

const ::improbable::platform::runtime::Coordinates&
SphereConstraint::_Internal::center(const SphereConstraint* msg) {
  return *msg->center_;
}
SphereConstraint::SphereConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.SphereConstraint)
}
SphereConstraint::SphereConstraint(const SphereConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::improbable::platform::runtime::Coordinates(*from.center_);
  } else {
    center_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.SphereConstraint)
}

void SphereConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SphereConstraint_runtime_2fquery_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
}

SphereConstraint::~SphereConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.SphereConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SphereConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void SphereConstraint::ArenaDtor(void* object) {
  SphereConstraint* _this = reinterpret_cast< SphereConstraint* >(object);
  (void)_this;
}
void SphereConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SphereConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SphereConstraint& SphereConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SphereConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void SphereConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.SphereConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SphereConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.Coordinates center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SphereConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.SphereConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.Coordinates center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.SphereConstraint)
  return target;
}

size_t SphereConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.SphereConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.Coordinates center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SphereConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.SphereConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const SphereConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SphereConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.SphereConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.SphereConstraint)
    MergeFrom(*source);
  }
}

void SphereConstraint::MergeFrom(const SphereConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.SphereConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::improbable::platform::runtime::Coordinates::MergeFrom(from._internal_center());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void SphereConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.SphereConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SphereConstraint::CopyFrom(const SphereConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.SphereConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SphereConstraint::IsInitialized() const {
  return true;
}

void SphereConstraint::InternalSwap(SphereConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SphereConstraint, radius_)
      + sizeof(SphereConstraint::radius_)
      - PROTOBUF_FIELD_OFFSET(SphereConstraint, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SphereConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CylinderConstraint::_Internal {
 public:
  static const ::improbable::platform::runtime::Coordinates& center(const CylinderConstraint* msg);
};

const ::improbable::platform::runtime::Coordinates&
CylinderConstraint::_Internal::center(const CylinderConstraint* msg) {
  return *msg->center_;
}
CylinderConstraint::CylinderConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.CylinderConstraint)
}
CylinderConstraint::CylinderConstraint(const CylinderConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::improbable::platform::runtime::Coordinates(*from.center_);
  } else {
    center_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.CylinderConstraint)
}

void CylinderConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CylinderConstraint_runtime_2fquery_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
}

CylinderConstraint::~CylinderConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.CylinderConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CylinderConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void CylinderConstraint::ArenaDtor(void* object) {
  CylinderConstraint* _this = reinterpret_cast< CylinderConstraint* >(object);
  (void)_this;
}
void CylinderConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CylinderConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CylinderConstraint& CylinderConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CylinderConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void CylinderConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.CylinderConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CylinderConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.Coordinates center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CylinderConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.CylinderConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.Coordinates center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.CylinderConstraint)
  return target;
}

size_t CylinderConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.CylinderConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.Coordinates center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CylinderConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.CylinderConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CylinderConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.CylinderConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.CylinderConstraint)
    MergeFrom(*source);
  }
}

void CylinderConstraint::MergeFrom(const CylinderConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.CylinderConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::improbable::platform::runtime::Coordinates::MergeFrom(from._internal_center());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void CylinderConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.CylinderConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderConstraint::CopyFrom(const CylinderConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.CylinderConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderConstraint::IsInitialized() const {
  return true;
}

void CylinderConstraint::InternalSwap(CylinderConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CylinderConstraint, radius_)
      + sizeof(CylinderConstraint::radius_)
      - PROTOBUF_FIELD_OFFSET(CylinderConstraint, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CylinderConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EntityIdConstraint::_Internal {
 public:
  static const ::improbable::platform::runtime::EntityId& entity_id(const EntityIdConstraint* msg);
};

const ::improbable::platform::runtime::EntityId&
EntityIdConstraint::_Internal::entity_id(const EntityIdConstraint* msg) {
  return *msg->entity_id_;
}
void EntityIdConstraint::clear_entity_id() {
  if (GetArena() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
EntityIdConstraint::EntityIdConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.EntityIdConstraint)
}
EntityIdConstraint::EntityIdConstraint(const EntityIdConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::improbable::platform::runtime::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.EntityIdConstraint)
}

void EntityIdConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityIdConstraint_runtime_2fquery_2eproto.base);
  entity_id_ = nullptr;
}

EntityIdConstraint::~EntityIdConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.EntityIdConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityIdConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entity_id_;
}

void EntityIdConstraint::ArenaDtor(void* object) {
  EntityIdConstraint* _this = reinterpret_cast< EntityIdConstraint* >(object);
  (void)_this;
}
void EntityIdConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityIdConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityIdConstraint& EntityIdConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityIdConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void EntityIdConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.EntityIdConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityIdConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.EntityId entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityIdConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.EntityIdConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.EntityId entity_id = 1;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.EntityIdConstraint)
  return target;
}

size_t EntityIdConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.EntityIdConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.EntityId entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityIdConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.EntityIdConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityIdConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityIdConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.EntityIdConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.EntityIdConstraint)
    MergeFrom(*source);
  }
}

void EntityIdConstraint::MergeFrom(const EntityIdConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.EntityIdConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::improbable::platform::runtime::EntityId::MergeFrom(from._internal_entity_id());
  }
}

void EntityIdConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.EntityIdConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityIdConstraint::CopyFrom(const EntityIdConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.EntityIdConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityIdConstraint::IsInitialized() const {
  return true;
}

void EntityIdConstraint::InternalSwap(EntityIdConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entity_id_, other->entity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityIdConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ComponentConstraint::_Internal {
 public:
};

ComponentConstraint::ComponentConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.ComponentConstraint)
}
ComponentConstraint::ComponentConstraint(const ComponentConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_ = from.component_;
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.ComponentConstraint)
}

void ComponentConstraint::SharedCtor() {
  component_ = 0u;
}

ComponentConstraint::~ComponentConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.ComponentConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComponentConstraint::ArenaDtor(void* object) {
  ComponentConstraint* _this = reinterpret_cast< ComponentConstraint* >(object);
  (void)_this;
}
void ComponentConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentConstraint& ComponentConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void ComponentConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.ComponentConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          component_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.ComponentConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component = 1;
  if (this->component() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.ComponentConstraint)
  return target;
}

size_t ComponentConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.ComponentConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 component = 1;
  if (this->component() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_component());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.ComponentConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.ComponentConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.ComponentConstraint)
    MergeFrom(*source);
  }
}

void ComponentConstraint::MergeFrom(const ComponentConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.ComponentConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component() != 0) {
    _internal_set_component(from._internal_component());
  }
}

void ComponentConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.ComponentConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentConstraint::CopyFrom(const ComponentConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.ComponentConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentConstraint::IsInitialized() const {
  return true;
}

void ComponentConstraint::InternalSwap(ComponentConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(component_, other->component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AndConstraint::_Internal {
 public:
};

AndConstraint::AndConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conjunct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.AndConstraint)
}
AndConstraint::AndConstraint(const AndConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conjunct_(from.conjunct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.AndConstraint)
}

void AndConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndConstraint_runtime_2fquery_2eproto.base);
}

AndConstraint::~AndConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.AndConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AndConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AndConstraint::ArenaDtor(void* object) {
  AndConstraint* _this = reinterpret_cast< AndConstraint* >(object);
  (void)_this;
}
void AndConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AndConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndConstraint& AndConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void AndConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.AndConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conjunct_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint conjunct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conjunct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AndConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.AndConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint conjunct = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conjunct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_conjunct(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.AndConstraint)
  return target;
}

size_t AndConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.AndConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint conjunct = 1;
  total_size += 1UL * this->_internal_conjunct_size();
  for (const auto& msg : this->conjunct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.AndConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const AndConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AndConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.AndConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.AndConstraint)
    MergeFrom(*source);
  }
}

void AndConstraint::MergeFrom(const AndConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.AndConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conjunct_.MergeFrom(from.conjunct_);
}

void AndConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.AndConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndConstraint::CopyFrom(const AndConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.AndConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndConstraint::IsInitialized() const {
  return true;
}

void AndConstraint::InternalSwap(AndConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conjunct_.InternalSwap(&other->conjunct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OrConstraint::_Internal {
 public:
};

OrConstraint::OrConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  disjunct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.OrConstraint)
}
OrConstraint::OrConstraint(const OrConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      disjunct_(from.disjunct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.OrConstraint)
}

void OrConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndConstraint_runtime_2fquery_2eproto.base);
}

OrConstraint::~OrConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.OrConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrConstraint::ArenaDtor(void* object) {
  OrConstraint* _this = reinterpret_cast< OrConstraint* >(object);
  (void)_this;
}
void OrConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrConstraint& OrConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void OrConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.OrConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disjunct_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint disjunct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disjunct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.OrConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint disjunct = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disjunct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_disjunct(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.OrConstraint)
  return target;
}

size_t OrConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.OrConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint disjunct = 1;
  total_size += 1UL * this->_internal_disjunct_size();
  for (const auto& msg : this->disjunct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.OrConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const OrConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.OrConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.OrConstraint)
    MergeFrom(*source);
  }
}

void OrConstraint::MergeFrom(const OrConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.OrConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disjunct_.MergeFrom(from.disjunct_);
}

void OrConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.OrConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrConstraint::CopyFrom(const OrConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.OrConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrConstraint::IsInitialized() const {
  return true;
}

void OrConstraint::InternalSwap(OrConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  disjunct_.InternalSwap(&other->disjunct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NotConstraint::_Internal {
 public:
  static const ::improbable::platform::runtime::InspectionEntityQueryConstraint& negated(const NotConstraint* msg);
};

const ::improbable::platform::runtime::InspectionEntityQueryConstraint&
NotConstraint::_Internal::negated(const NotConstraint* msg) {
  return *msg->negated_;
}
NotConstraint::NotConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.NotConstraint)
}
NotConstraint::NotConstraint(const NotConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_negated()) {
    negated_ = new ::improbable::platform::runtime::InspectionEntityQueryConstraint(*from.negated_);
  } else {
    negated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.NotConstraint)
}

void NotConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndConstraint_runtime_2fquery_2eproto.base);
  negated_ = nullptr;
}

NotConstraint::~NotConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.NotConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete negated_;
}

void NotConstraint::ArenaDtor(void* object) {
  NotConstraint* _this = reinterpret_cast< NotConstraint* >(object);
  (void)_this;
}
void NotConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotConstraint& NotConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void NotConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.NotConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && negated_ != nullptr) {
    delete negated_;
  }
  negated_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.InspectionEntityQueryConstraint negated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_negated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.NotConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.InspectionEntityQueryConstraint negated = 1;
  if (this->has_negated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::negated(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.NotConstraint)
  return target;
}

size_t NotConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.NotConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.InspectionEntityQueryConstraint negated = 1;
  if (this->has_negated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *negated_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.NotConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const NotConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.NotConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.NotConstraint)
    MergeFrom(*source);
  }
}

void NotConstraint::MergeFrom(const NotConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.NotConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_negated()) {
    _internal_mutable_negated()->::improbable::platform::runtime::InspectionEntityQueryConstraint::MergeFrom(from._internal_negated());
  }
}

void NotConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.NotConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotConstraint::CopyFrom(const NotConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.NotConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotConstraint::IsInitialized() const {
  return true;
}

void NotConstraint::InternalSwap(NotConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(negated_, other->negated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TrueConstraint::_Internal {
 public:
};

TrueConstraint::TrueConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.TrueConstraint)
}
TrueConstraint::TrueConstraint(const TrueConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.TrueConstraint)
}

void TrueConstraint::SharedCtor() {
}

TrueConstraint::~TrueConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.TrueConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrueConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrueConstraint::ArenaDtor(void* object) {
  TrueConstraint* _this = reinterpret_cast< TrueConstraint* >(object);
  (void)_this;
}
void TrueConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrueConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrueConstraint& TrueConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrueConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void TrueConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.TrueConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrueConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrueConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.TrueConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.TrueConstraint)
  return target;
}

size_t TrueConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.TrueConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrueConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.TrueConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrueConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrueConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.TrueConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.TrueConstraint)
    MergeFrom(*source);
  }
}

void TrueConstraint::MergeFrom(const TrueConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.TrueConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TrueConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.TrueConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrueConstraint::CopyFrom(const TrueConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.TrueConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrueConstraint::IsInitialized() const {
  return true;
}

void TrueConstraint::InternalSwap(TrueConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrueConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FalseConstraint::_Internal {
 public:
};

FalseConstraint::FalseConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.FalseConstraint)
}
FalseConstraint::FalseConstraint(const FalseConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.FalseConstraint)
}

void FalseConstraint::SharedCtor() {
}

FalseConstraint::~FalseConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.FalseConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FalseConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FalseConstraint::ArenaDtor(void* object) {
  FalseConstraint* _this = reinterpret_cast< FalseConstraint* >(object);
  (void)_this;
}
void FalseConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FalseConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FalseConstraint& FalseConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FalseConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void FalseConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.FalseConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FalseConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FalseConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.FalseConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.FalseConstraint)
  return target;
}

size_t FalseConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.FalseConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FalseConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.FalseConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const FalseConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FalseConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.FalseConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.FalseConstraint)
    MergeFrom(*source);
  }
}

void FalseConstraint::MergeFrom(const FalseConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.FalseConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FalseConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.FalseConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FalseConstraint::CopyFrom(const FalseConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.FalseConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FalseConstraint::IsInitialized() const {
  return true;
}

void FalseConstraint::InternalSwap(FalseConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FalseConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoxConstraint::_Internal {
 public:
  static const ::improbable::platform::runtime::Coordinates& min(const BoxConstraint* msg);
  static const ::improbable::platform::runtime::Coordinates& max(const BoxConstraint* msg);
};

const ::improbable::platform::runtime::Coordinates&
BoxConstraint::_Internal::min(const BoxConstraint* msg) {
  return *msg->min_;
}
const ::improbable::platform::runtime::Coordinates&
BoxConstraint::_Internal::max(const BoxConstraint* msg) {
  return *msg->max_;
}
BoxConstraint::BoxConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.BoxConstraint)
}
BoxConstraint::BoxConstraint(const BoxConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    min_ = new ::improbable::platform::runtime::Coordinates(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new ::improbable::platform::runtime::Coordinates(*from.max_);
  } else {
    max_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.BoxConstraint)
}

void BoxConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoxConstraint_runtime_2fquery_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

BoxConstraint::~BoxConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.BoxConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoxConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void BoxConstraint::ArenaDtor(void* object) {
  BoxConstraint* _this = reinterpret_cast< BoxConstraint* >(object);
  (void)_this;
}
void BoxConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoxConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoxConstraint& BoxConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoxConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void BoxConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.BoxConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoxConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.Coordinates min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .improbable.platform.runtime.Coordinates max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoxConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.BoxConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.Coordinates min = 1;
  if (this->has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min(this), target, stream);
  }

  // .improbable.platform.runtime.Coordinates max = 2;
  if (this->has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.BoxConstraint)
  return target;
}

size_t BoxConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.BoxConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .improbable.platform.runtime.Coordinates min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_);
  }

  // .improbable.platform.runtime.Coordinates max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoxConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.BoxConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoxConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.BoxConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.BoxConstraint)
    MergeFrom(*source);
  }
}

void BoxConstraint::MergeFrom(const BoxConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.BoxConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    _internal_mutable_min()->::improbable::platform::runtime::Coordinates::MergeFrom(from._internal_min());
  }
  if (from.has_max()) {
    _internal_mutable_max()->::improbable::platform::runtime::Coordinates::MergeFrom(from._internal_max());
  }
}

void BoxConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.BoxConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxConstraint::CopyFrom(const BoxConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.BoxConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxConstraint::IsInitialized() const {
  return true;
}

void BoxConstraint::InternalSwap(BoxConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoxConstraint, max_)
      + sizeof(BoxConstraint::max_)
      - PROTOBUF_FIELD_OFFSET(BoxConstraint, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoxConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuthorityConstraint::_Internal {
 public:
};

AuthorityConstraint::AuthorityConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.AuthorityConstraint)
}
AuthorityConstraint::AuthorityConstraint(const AuthorityConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_worker_id().empty()) {
    worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worker_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.AuthorityConstraint)
}

void AuthorityConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthorityConstraint_runtime_2fquery_2eproto.base);
  worker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthorityConstraint::~AuthorityConstraint() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.AuthorityConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthorityConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  worker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthorityConstraint::ArenaDtor(void* object) {
  AuthorityConstraint* _this = reinterpret_cast< AuthorityConstraint* >(object);
  (void)_this;
}
void AuthorityConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthorityConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthorityConstraint& AuthorityConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthorityConstraint_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void AuthorityConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.AuthorityConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorityConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "improbable.platform.runtime.AuthorityConstraint.worker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthorityConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.AuthorityConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_id = 1;
  if (this->worker_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "improbable.platform.runtime.AuthorityConstraint.worker_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.AuthorityConstraint)
  return target;
}

size_t AuthorityConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.AuthorityConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worker_id = 1;
  if (this->worker_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthorityConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.AuthorityConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthorityConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthorityConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.AuthorityConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.AuthorityConstraint)
    MergeFrom(*source);
  }
}

void AuthorityConstraint::MergeFrom(const AuthorityConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.AuthorityConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.worker_id().size() > 0) {
    _internal_set_worker_id(from._internal_worker_id());
  }
}

void AuthorityConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.AuthorityConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorityConstraint::CopyFrom(const AuthorityConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.AuthorityConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorityConstraint::IsInitialized() const {
  return true;
}

void AuthorityConstraint::InternalSwap(AuthorityConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  worker_id_.Swap(&other->worker_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorityConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InspectionQueryResultType::_Internal {
 public:
  static const ::improbable::platform::runtime::InspectionSnapshotResultType& snapshot(const InspectionQueryResultType* msg);
};

const ::improbable::platform::runtime::InspectionSnapshotResultType&
InspectionQueryResultType::_Internal::snapshot(const InspectionQueryResultType* msg) {
  return *msg->result_type_.snapshot_;
}
void InspectionQueryResultType::set_allocated_snapshot(::improbable::platform::runtime::InspectionSnapshotResultType* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_result_type();
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    result_type_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.InspectionQueryResultType.snapshot)
}
InspectionQueryResultType::InspectionQueryResultType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.InspectionQueryResultType)
}
InspectionQueryResultType::InspectionQueryResultType(const InspectionQueryResultType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_result_type();
  switch (from.result_type_case()) {
    case kSnapshot: {
      _internal_mutable_snapshot()->::improbable::platform::runtime::InspectionSnapshotResultType::MergeFrom(from._internal_snapshot());
      break;
    }
    case RESULT_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.InspectionQueryResultType)
}

void InspectionQueryResultType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InspectionQueryResultType_runtime_2fquery_2eproto.base);
  clear_has_result_type();
}

InspectionQueryResultType::~InspectionQueryResultType() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.InspectionQueryResultType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InspectionQueryResultType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_result_type()) {
    clear_result_type();
  }
}

void InspectionQueryResultType::ArenaDtor(void* object) {
  InspectionQueryResultType* _this = reinterpret_cast< InspectionQueryResultType* >(object);
  (void)_this;
}
void InspectionQueryResultType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InspectionQueryResultType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectionQueryResultType& InspectionQueryResultType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InspectionQueryResultType_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void InspectionQueryResultType::clear_result_type() {
// @@protoc_insertion_point(one_of_clear_start:improbable.platform.runtime.InspectionQueryResultType)
  switch (result_type_case()) {
    case kSnapshot: {
      if (GetArena() == nullptr) {
        delete result_type_.snapshot_;
      }
      break;
    }
    case RESULT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_TYPE_NOT_SET;
}


void InspectionQueryResultType::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.InspectionQueryResultType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InspectionQueryResultType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .improbable.platform.runtime.InspectionSnapshotResultType snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InspectionQueryResultType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.InspectionQueryResultType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .improbable.platform.runtime.InspectionSnapshotResultType snapshot = 1;
  if (_internal_has_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.InspectionQueryResultType)
  return target;
}

size_t InspectionQueryResultType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.InspectionQueryResultType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_type_case()) {
    // .improbable.platform.runtime.InspectionSnapshotResultType snapshot = 1;
    case kSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_type_.snapshot_);
      break;
    }
    case RESULT_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectionQueryResultType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.InspectionQueryResultType)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectionQueryResultType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InspectionQueryResultType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.InspectionQueryResultType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.InspectionQueryResultType)
    MergeFrom(*source);
  }
}

void InspectionQueryResultType::MergeFrom(const InspectionQueryResultType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.InspectionQueryResultType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_type_case()) {
    case kSnapshot: {
      _internal_mutable_snapshot()->::improbable::platform::runtime::InspectionSnapshotResultType::MergeFrom(from._internal_snapshot());
      break;
    }
    case RESULT_TYPE_NOT_SET: {
      break;
    }
  }
}

void InspectionQueryResultType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.InspectionQueryResultType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectionQueryResultType::CopyFrom(const InspectionQueryResultType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.InspectionQueryResultType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectionQueryResultType::IsInitialized() const {
  return true;
}

void InspectionQueryResultType::InternalSwap(InspectionQueryResultType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_type_, other->result_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InspectionQueryResultType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InspectionSnapshotResultType::_Internal {
 public:
};

InspectionSnapshotResultType::InspectionSnapshotResultType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  component_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:improbable.platform.runtime.InspectionSnapshotResultType)
}
InspectionSnapshotResultType::InspectionSnapshotResultType(const InspectionSnapshotResultType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      component_id_(from.component_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&full_snapshot_, &from.full_snapshot_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_authority_) -
    reinterpret_cast<char*>(&full_snapshot_)) + sizeof(include_authority_));
  // @@protoc_insertion_point(copy_constructor:improbable.platform.runtime.InspectionSnapshotResultType)
}

void InspectionSnapshotResultType::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&full_snapshot_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&include_authority_) -
      reinterpret_cast<char*>(&full_snapshot_)) + sizeof(include_authority_));
}

InspectionSnapshotResultType::~InspectionSnapshotResultType() {
  // @@protoc_insertion_point(destructor:improbable.platform.runtime.InspectionSnapshotResultType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InspectionSnapshotResultType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InspectionSnapshotResultType::ArenaDtor(void* object) {
  InspectionSnapshotResultType* _this = reinterpret_cast< InspectionSnapshotResultType* >(object);
  (void)_this;
}
void InspectionSnapshotResultType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InspectionSnapshotResultType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectionSnapshotResultType& InspectionSnapshotResultType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InspectionSnapshotResultType_runtime_2fquery_2eproto.base);
  return *internal_default_instance();
}


void InspectionSnapshotResultType::Clear() {
// @@protoc_insertion_point(message_clear_start:improbable.platform.runtime.InspectionSnapshotResultType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_id_.Clear();
  ::memset(&full_snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_authority_) -
      reinterpret_cast<char*>(&full_snapshot_)) + sizeof(include_authority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InspectionSnapshotResultType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool full_snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          full_snapshot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_component_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_component_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_authority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_authority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InspectionSnapshotResultType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:improbable.platform.runtime.InspectionSnapshotResultType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool full_snapshot = 1;
  if (this->full_snapshot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_full_snapshot(), target);
  }

  // repeated uint32 component_id = 2;
  {
    int byte_size = _component_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_component_id(), byte_size, target);
    }
  }

  // bool include_authority = 3;
  if (this->include_authority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_authority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:improbable.platform.runtime.InspectionSnapshotResultType)
  return target;
}

size_t InspectionSnapshotResultType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:improbable.platform.runtime.InspectionSnapshotResultType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 component_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->component_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _component_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool full_snapshot = 1;
  if (this->full_snapshot() != 0) {
    total_size += 1 + 1;
  }

  // bool include_authority = 3;
  if (this->include_authority() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectionSnapshotResultType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:improbable.platform.runtime.InspectionSnapshotResultType)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectionSnapshotResultType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InspectionSnapshotResultType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:improbable.platform.runtime.InspectionSnapshotResultType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:improbable.platform.runtime.InspectionSnapshotResultType)
    MergeFrom(*source);
  }
}

void InspectionSnapshotResultType::MergeFrom(const InspectionSnapshotResultType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:improbable.platform.runtime.InspectionSnapshotResultType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  component_id_.MergeFrom(from.component_id_);
  if (from.full_snapshot() != 0) {
    _internal_set_full_snapshot(from._internal_full_snapshot());
  }
  if (from.include_authority() != 0) {
    _internal_set_include_authority(from._internal_include_authority());
  }
}

void InspectionSnapshotResultType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:improbable.platform.runtime.InspectionSnapshotResultType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectionSnapshotResultType::CopyFrom(const InspectionSnapshotResultType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:improbable.platform.runtime.InspectionSnapshotResultType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectionSnapshotResultType::IsInitialized() const {
  return true;
}

void InspectionSnapshotResultType::InternalSwap(InspectionSnapshotResultType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  component_id_.InternalSwap(&other->component_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InspectionSnapshotResultType, include_authority_)
      + sizeof(InspectionSnapshotResultType::include_authority_)
      - PROTOBUF_FIELD_OFFSET(InspectionSnapshotResultType, full_snapshot_)>(
          reinterpret_cast<char*>(&full_snapshot_),
          reinterpret_cast<char*>(&other->full_snapshot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InspectionSnapshotResultType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::Coordinates* Arena::CreateMaybeMessage< ::improbable::platform::runtime::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::InspectionEntityQueryConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::InspectionEntityQueryConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::InspectionEntityQueryConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::SphereConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::SphereConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::SphereConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::CylinderConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::CylinderConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::CylinderConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::EntityIdConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::EntityIdConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::EntityIdConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::ComponentConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::ComponentConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::ComponentConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::AndConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::AndConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::AndConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::OrConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::OrConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::OrConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::NotConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::NotConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::NotConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::TrueConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::TrueConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::TrueConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::FalseConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::FalseConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::FalseConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::BoxConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::BoxConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::BoxConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::AuthorityConstraint* Arena::CreateMaybeMessage< ::improbable::platform::runtime::AuthorityConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::AuthorityConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::InspectionQueryResultType* Arena::CreateMaybeMessage< ::improbable::platform::runtime::InspectionQueryResultType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::InspectionQueryResultType >(arena);
}
template<> PROTOBUF_NOINLINE ::improbable::platform::runtime::InspectionSnapshotResultType* Arena::CreateMaybeMessage< ::improbable::platform::runtime::InspectionSnapshotResultType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::improbable::platform::runtime::InspectionSnapshotResultType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

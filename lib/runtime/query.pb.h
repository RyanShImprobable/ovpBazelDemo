// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runtime_2fquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runtime_2fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "runtime/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runtime_2fquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runtime_2fquery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2fquery_2eproto;
namespace improbable {
namespace platform {
namespace runtime {
class AndConstraint;
class AndConstraintDefaultTypeInternal;
extern AndConstraintDefaultTypeInternal _AndConstraint_default_instance_;
class AuthorityConstraint;
class AuthorityConstraintDefaultTypeInternal;
extern AuthorityConstraintDefaultTypeInternal _AuthorityConstraint_default_instance_;
class BoxConstraint;
class BoxConstraintDefaultTypeInternal;
extern BoxConstraintDefaultTypeInternal _BoxConstraint_default_instance_;
class ComponentConstraint;
class ComponentConstraintDefaultTypeInternal;
extern ComponentConstraintDefaultTypeInternal _ComponentConstraint_default_instance_;
class Coordinates;
class CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class CylinderConstraint;
class CylinderConstraintDefaultTypeInternal;
extern CylinderConstraintDefaultTypeInternal _CylinderConstraint_default_instance_;
class EntityIdConstraint;
class EntityIdConstraintDefaultTypeInternal;
extern EntityIdConstraintDefaultTypeInternal _EntityIdConstraint_default_instance_;
class FalseConstraint;
class FalseConstraintDefaultTypeInternal;
extern FalseConstraintDefaultTypeInternal _FalseConstraint_default_instance_;
class InspectionEntityQueryConstraint;
class InspectionEntityQueryConstraintDefaultTypeInternal;
extern InspectionEntityQueryConstraintDefaultTypeInternal _InspectionEntityQueryConstraint_default_instance_;
class InspectionQueryResultType;
class InspectionQueryResultTypeDefaultTypeInternal;
extern InspectionQueryResultTypeDefaultTypeInternal _InspectionQueryResultType_default_instance_;
class InspectionSnapshotResultType;
class InspectionSnapshotResultTypeDefaultTypeInternal;
extern InspectionSnapshotResultTypeDefaultTypeInternal _InspectionSnapshotResultType_default_instance_;
class NotConstraint;
class NotConstraintDefaultTypeInternal;
extern NotConstraintDefaultTypeInternal _NotConstraint_default_instance_;
class OrConstraint;
class OrConstraintDefaultTypeInternal;
extern OrConstraintDefaultTypeInternal _OrConstraint_default_instance_;
class SphereConstraint;
class SphereConstraintDefaultTypeInternal;
extern SphereConstraintDefaultTypeInternal _SphereConstraint_default_instance_;
class TrueConstraint;
class TrueConstraintDefaultTypeInternal;
extern TrueConstraintDefaultTypeInternal _TrueConstraint_default_instance_;
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::platform::runtime::AndConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::AndConstraint>(Arena*);
template<> ::improbable::platform::runtime::AuthorityConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::AuthorityConstraint>(Arena*);
template<> ::improbable::platform::runtime::BoxConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::BoxConstraint>(Arena*);
template<> ::improbable::platform::runtime::ComponentConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::ComponentConstraint>(Arena*);
template<> ::improbable::platform::runtime::Coordinates* Arena::CreateMaybeMessage<::improbable::platform::runtime::Coordinates>(Arena*);
template<> ::improbable::platform::runtime::CylinderConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::CylinderConstraint>(Arena*);
template<> ::improbable::platform::runtime::EntityIdConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::EntityIdConstraint>(Arena*);
template<> ::improbable::platform::runtime::FalseConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::FalseConstraint>(Arena*);
template<> ::improbable::platform::runtime::InspectionEntityQueryConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityQueryConstraint>(Arena*);
template<> ::improbable::platform::runtime::InspectionQueryResultType* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionQueryResultType>(Arena*);
template<> ::improbable::platform::runtime::InspectionSnapshotResultType* Arena::CreateMaybeMessage<::improbable::platform::runtime::InspectionSnapshotResultType>(Arena*);
template<> ::improbable::platform::runtime::NotConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::NotConstraint>(Arena*);
template<> ::improbable::platform::runtime::OrConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::OrConstraint>(Arena*);
template<> ::improbable::platform::runtime::SphereConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::SphereConstraint>(Arena*);
template<> ::improbable::platform::runtime::TrueConstraint* Arena::CreateMaybeMessage<::improbable::platform::runtime::TrueConstraint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace platform {
namespace runtime {

// ===================================================================

class Coordinates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  virtual ~Coordinates();

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance();

  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class InspectionEntityQueryConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionEntityQueryConstraint) */ {
 public:
  inline InspectionEntityQueryConstraint() : InspectionEntityQueryConstraint(nullptr) {}
  virtual ~InspectionEntityQueryConstraint();

  InspectionEntityQueryConstraint(const InspectionEntityQueryConstraint& from);
  InspectionEntityQueryConstraint(InspectionEntityQueryConstraint&& from) noexcept
    : InspectionEntityQueryConstraint() {
    *this = ::std::move(from);
  }

  inline InspectionEntityQueryConstraint& operator=(const InspectionEntityQueryConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionEntityQueryConstraint& operator=(InspectionEntityQueryConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionEntityQueryConstraint& default_instance();

  enum ConstraintCase {
    kSphereConstraint = 1,
    kCylinderConstraint = 2,
    kEntityIdConstraint = 4,
    kComponentConstraint = 5,
    kAndConstraint = 6,
    kOrConstraint = 7,
    kNotConstraint = 8,
    kTrueConstraint = 9,
    kFalseConstraint = 10,
    kBoxConstraint = 11,
    kAuthorityConstraint = 12,
    CONSTRAINT_NOT_SET = 0,
  };

  static inline const InspectionEntityQueryConstraint* internal_default_instance() {
    return reinterpret_cast<const InspectionEntityQueryConstraint*>(
               &_InspectionEntityQueryConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InspectionEntityQueryConstraint& a, InspectionEntityQueryConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionEntityQueryConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionEntityQueryConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionEntityQueryConstraint* New() const final {
    return CreateMaybeMessage<InspectionEntityQueryConstraint>(nullptr);
  }

  InspectionEntityQueryConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionEntityQueryConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionEntityQueryConstraint& from);
  void MergeFrom(const InspectionEntityQueryConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionEntityQueryConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionEntityQueryConstraint";
  }
  protected:
  explicit InspectionEntityQueryConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSphereConstraintFieldNumber = 1,
    kCylinderConstraintFieldNumber = 2,
    kEntityIdConstraintFieldNumber = 4,
    kComponentConstraintFieldNumber = 5,
    kAndConstraintFieldNumber = 6,
    kOrConstraintFieldNumber = 7,
    kNotConstraintFieldNumber = 8,
    kTrueConstraintFieldNumber = 9,
    kFalseConstraintFieldNumber = 10,
    kBoxConstraintFieldNumber = 11,
    kAuthorityConstraintFieldNumber = 12,
  };
  // .improbable.platform.runtime.SphereConstraint sphere_constraint = 1;
  bool has_sphere_constraint() const;
  private:
  bool _internal_has_sphere_constraint() const;
  public:
  void clear_sphere_constraint();
  const ::improbable::platform::runtime::SphereConstraint& sphere_constraint() const;
  ::improbable::platform::runtime::SphereConstraint* release_sphere_constraint();
  ::improbable::platform::runtime::SphereConstraint* mutable_sphere_constraint();
  void set_allocated_sphere_constraint(::improbable::platform::runtime::SphereConstraint* sphere_constraint);
  private:
  const ::improbable::platform::runtime::SphereConstraint& _internal_sphere_constraint() const;
  ::improbable::platform::runtime::SphereConstraint* _internal_mutable_sphere_constraint();
  public:
  void unsafe_arena_set_allocated_sphere_constraint(
      ::improbable::platform::runtime::SphereConstraint* sphere_constraint);
  ::improbable::platform::runtime::SphereConstraint* unsafe_arena_release_sphere_constraint();

  // .improbable.platform.runtime.CylinderConstraint cylinder_constraint = 2;
  bool has_cylinder_constraint() const;
  private:
  bool _internal_has_cylinder_constraint() const;
  public:
  void clear_cylinder_constraint();
  const ::improbable::platform::runtime::CylinderConstraint& cylinder_constraint() const;
  ::improbable::platform::runtime::CylinderConstraint* release_cylinder_constraint();
  ::improbable::platform::runtime::CylinderConstraint* mutable_cylinder_constraint();
  void set_allocated_cylinder_constraint(::improbable::platform::runtime::CylinderConstraint* cylinder_constraint);
  private:
  const ::improbable::platform::runtime::CylinderConstraint& _internal_cylinder_constraint() const;
  ::improbable::platform::runtime::CylinderConstraint* _internal_mutable_cylinder_constraint();
  public:
  void unsafe_arena_set_allocated_cylinder_constraint(
      ::improbable::platform::runtime::CylinderConstraint* cylinder_constraint);
  ::improbable::platform::runtime::CylinderConstraint* unsafe_arena_release_cylinder_constraint();

  // .improbable.platform.runtime.EntityIdConstraint entity_id_constraint = 4;
  bool has_entity_id_constraint() const;
  private:
  bool _internal_has_entity_id_constraint() const;
  public:
  void clear_entity_id_constraint();
  const ::improbable::platform::runtime::EntityIdConstraint& entity_id_constraint() const;
  ::improbable::platform::runtime::EntityIdConstraint* release_entity_id_constraint();
  ::improbable::platform::runtime::EntityIdConstraint* mutable_entity_id_constraint();
  void set_allocated_entity_id_constraint(::improbable::platform::runtime::EntityIdConstraint* entity_id_constraint);
  private:
  const ::improbable::platform::runtime::EntityIdConstraint& _internal_entity_id_constraint() const;
  ::improbable::platform::runtime::EntityIdConstraint* _internal_mutable_entity_id_constraint();
  public:
  void unsafe_arena_set_allocated_entity_id_constraint(
      ::improbable::platform::runtime::EntityIdConstraint* entity_id_constraint);
  ::improbable::platform::runtime::EntityIdConstraint* unsafe_arena_release_entity_id_constraint();

  // .improbable.platform.runtime.ComponentConstraint component_constraint = 5;
  bool has_component_constraint() const;
  private:
  bool _internal_has_component_constraint() const;
  public:
  void clear_component_constraint();
  const ::improbable::platform::runtime::ComponentConstraint& component_constraint() const;
  ::improbable::platform::runtime::ComponentConstraint* release_component_constraint();
  ::improbable::platform::runtime::ComponentConstraint* mutable_component_constraint();
  void set_allocated_component_constraint(::improbable::platform::runtime::ComponentConstraint* component_constraint);
  private:
  const ::improbable::platform::runtime::ComponentConstraint& _internal_component_constraint() const;
  ::improbable::platform::runtime::ComponentConstraint* _internal_mutable_component_constraint();
  public:
  void unsafe_arena_set_allocated_component_constraint(
      ::improbable::platform::runtime::ComponentConstraint* component_constraint);
  ::improbable::platform::runtime::ComponentConstraint* unsafe_arena_release_component_constraint();

  // .improbable.platform.runtime.AndConstraint and_constraint = 6;
  bool has_and_constraint() const;
  private:
  bool _internal_has_and_constraint() const;
  public:
  void clear_and_constraint();
  const ::improbable::platform::runtime::AndConstraint& and_constraint() const;
  ::improbable::platform::runtime::AndConstraint* release_and_constraint();
  ::improbable::platform::runtime::AndConstraint* mutable_and_constraint();
  void set_allocated_and_constraint(::improbable::platform::runtime::AndConstraint* and_constraint);
  private:
  const ::improbable::platform::runtime::AndConstraint& _internal_and_constraint() const;
  ::improbable::platform::runtime::AndConstraint* _internal_mutable_and_constraint();
  public:
  void unsafe_arena_set_allocated_and_constraint(
      ::improbable::platform::runtime::AndConstraint* and_constraint);
  ::improbable::platform::runtime::AndConstraint* unsafe_arena_release_and_constraint();

  // .improbable.platform.runtime.OrConstraint or_constraint = 7;
  bool has_or_constraint() const;
  private:
  bool _internal_has_or_constraint() const;
  public:
  void clear_or_constraint();
  const ::improbable::platform::runtime::OrConstraint& or_constraint() const;
  ::improbable::platform::runtime::OrConstraint* release_or_constraint();
  ::improbable::platform::runtime::OrConstraint* mutable_or_constraint();
  void set_allocated_or_constraint(::improbable::platform::runtime::OrConstraint* or_constraint);
  private:
  const ::improbable::platform::runtime::OrConstraint& _internal_or_constraint() const;
  ::improbable::platform::runtime::OrConstraint* _internal_mutable_or_constraint();
  public:
  void unsafe_arena_set_allocated_or_constraint(
      ::improbable::platform::runtime::OrConstraint* or_constraint);
  ::improbable::platform::runtime::OrConstraint* unsafe_arena_release_or_constraint();

  // .improbable.platform.runtime.NotConstraint not_constraint = 8;
  bool has_not_constraint() const;
  private:
  bool _internal_has_not_constraint() const;
  public:
  void clear_not_constraint();
  const ::improbable::platform::runtime::NotConstraint& not_constraint() const;
  ::improbable::platform::runtime::NotConstraint* release_not_constraint();
  ::improbable::platform::runtime::NotConstraint* mutable_not_constraint();
  void set_allocated_not_constraint(::improbable::platform::runtime::NotConstraint* not_constraint);
  private:
  const ::improbable::platform::runtime::NotConstraint& _internal_not_constraint() const;
  ::improbable::platform::runtime::NotConstraint* _internal_mutable_not_constraint();
  public:
  void unsafe_arena_set_allocated_not_constraint(
      ::improbable::platform::runtime::NotConstraint* not_constraint);
  ::improbable::platform::runtime::NotConstraint* unsafe_arena_release_not_constraint();

  // .improbable.platform.runtime.TrueConstraint true_constraint = 9;
  bool has_true_constraint() const;
  private:
  bool _internal_has_true_constraint() const;
  public:
  void clear_true_constraint();
  const ::improbable::platform::runtime::TrueConstraint& true_constraint() const;
  ::improbable::platform::runtime::TrueConstraint* release_true_constraint();
  ::improbable::platform::runtime::TrueConstraint* mutable_true_constraint();
  void set_allocated_true_constraint(::improbable::platform::runtime::TrueConstraint* true_constraint);
  private:
  const ::improbable::platform::runtime::TrueConstraint& _internal_true_constraint() const;
  ::improbable::platform::runtime::TrueConstraint* _internal_mutable_true_constraint();
  public:
  void unsafe_arena_set_allocated_true_constraint(
      ::improbable::platform::runtime::TrueConstraint* true_constraint);
  ::improbable::platform::runtime::TrueConstraint* unsafe_arena_release_true_constraint();

  // .improbable.platform.runtime.FalseConstraint false_constraint = 10;
  bool has_false_constraint() const;
  private:
  bool _internal_has_false_constraint() const;
  public:
  void clear_false_constraint();
  const ::improbable::platform::runtime::FalseConstraint& false_constraint() const;
  ::improbable::platform::runtime::FalseConstraint* release_false_constraint();
  ::improbable::platform::runtime::FalseConstraint* mutable_false_constraint();
  void set_allocated_false_constraint(::improbable::platform::runtime::FalseConstraint* false_constraint);
  private:
  const ::improbable::platform::runtime::FalseConstraint& _internal_false_constraint() const;
  ::improbable::platform::runtime::FalseConstraint* _internal_mutable_false_constraint();
  public:
  void unsafe_arena_set_allocated_false_constraint(
      ::improbable::platform::runtime::FalseConstraint* false_constraint);
  ::improbable::platform::runtime::FalseConstraint* unsafe_arena_release_false_constraint();

  // .improbable.platform.runtime.BoxConstraint box_constraint = 11;
  bool has_box_constraint() const;
  private:
  bool _internal_has_box_constraint() const;
  public:
  void clear_box_constraint();
  const ::improbable::platform::runtime::BoxConstraint& box_constraint() const;
  ::improbable::platform::runtime::BoxConstraint* release_box_constraint();
  ::improbable::platform::runtime::BoxConstraint* mutable_box_constraint();
  void set_allocated_box_constraint(::improbable::platform::runtime::BoxConstraint* box_constraint);
  private:
  const ::improbable::platform::runtime::BoxConstraint& _internal_box_constraint() const;
  ::improbable::platform::runtime::BoxConstraint* _internal_mutable_box_constraint();
  public:
  void unsafe_arena_set_allocated_box_constraint(
      ::improbable::platform::runtime::BoxConstraint* box_constraint);
  ::improbable::platform::runtime::BoxConstraint* unsafe_arena_release_box_constraint();

  // .improbable.platform.runtime.AuthorityConstraint authority_constraint = 12;
  bool has_authority_constraint() const;
  private:
  bool _internal_has_authority_constraint() const;
  public:
  void clear_authority_constraint();
  const ::improbable::platform::runtime::AuthorityConstraint& authority_constraint() const;
  ::improbable::platform::runtime::AuthorityConstraint* release_authority_constraint();
  ::improbable::platform::runtime::AuthorityConstraint* mutable_authority_constraint();
  void set_allocated_authority_constraint(::improbable::platform::runtime::AuthorityConstraint* authority_constraint);
  private:
  const ::improbable::platform::runtime::AuthorityConstraint& _internal_authority_constraint() const;
  ::improbable::platform::runtime::AuthorityConstraint* _internal_mutable_authority_constraint();
  public:
  void unsafe_arena_set_allocated_authority_constraint(
      ::improbable::platform::runtime::AuthorityConstraint* authority_constraint);
  ::improbable::platform::runtime::AuthorityConstraint* unsafe_arena_release_authority_constraint();

  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionEntityQueryConstraint)
 private:
  class _Internal;
  void set_has_sphere_constraint();
  void set_has_cylinder_constraint();
  void set_has_entity_id_constraint();
  void set_has_component_constraint();
  void set_has_and_constraint();
  void set_has_or_constraint();
  void set_has_not_constraint();
  void set_has_true_constraint();
  void set_has_false_constraint();
  void set_has_box_constraint();
  void set_has_authority_constraint();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ConstraintUnion {
    ConstraintUnion() {}
    ::improbable::platform::runtime::SphereConstraint* sphere_constraint_;
    ::improbable::platform::runtime::CylinderConstraint* cylinder_constraint_;
    ::improbable::platform::runtime::EntityIdConstraint* entity_id_constraint_;
    ::improbable::platform::runtime::ComponentConstraint* component_constraint_;
    ::improbable::platform::runtime::AndConstraint* and_constraint_;
    ::improbable::platform::runtime::OrConstraint* or_constraint_;
    ::improbable::platform::runtime::NotConstraint* not_constraint_;
    ::improbable::platform::runtime::TrueConstraint* true_constraint_;
    ::improbable::platform::runtime::FalseConstraint* false_constraint_;
    ::improbable::platform::runtime::BoxConstraint* box_constraint_;
    ::improbable::platform::runtime::AuthorityConstraint* authority_constraint_;
  } constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class SphereConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.SphereConstraint) */ {
 public:
  inline SphereConstraint() : SphereConstraint(nullptr) {}
  virtual ~SphereConstraint();

  SphereConstraint(const SphereConstraint& from);
  SphereConstraint(SphereConstraint&& from) noexcept
    : SphereConstraint() {
    *this = ::std::move(from);
  }

  inline SphereConstraint& operator=(const SphereConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SphereConstraint& operator=(SphereConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SphereConstraint& default_instance();

  static inline const SphereConstraint* internal_default_instance() {
    return reinterpret_cast<const SphereConstraint*>(
               &_SphereConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SphereConstraint& a, SphereConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SphereConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SphereConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SphereConstraint* New() const final {
    return CreateMaybeMessage<SphereConstraint>(nullptr);
  }

  SphereConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SphereConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SphereConstraint& from);
  void MergeFrom(const SphereConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SphereConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.SphereConstraint";
  }
  protected:
  explicit SphereConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .improbable.platform.runtime.Coordinates center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::improbable::platform::runtime::Coordinates& center() const;
  ::improbable::platform::runtime::Coordinates* release_center();
  ::improbable::platform::runtime::Coordinates* mutable_center();
  void set_allocated_center(::improbable::platform::runtime::Coordinates* center);
  private:
  const ::improbable::platform::runtime::Coordinates& _internal_center() const;
  ::improbable::platform::runtime::Coordinates* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::improbable::platform::runtime::Coordinates* center);
  ::improbable::platform::runtime::Coordinates* unsafe_arena_release_center();

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.SphereConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Coordinates* center_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class CylinderConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.CylinderConstraint) */ {
 public:
  inline CylinderConstraint() : CylinderConstraint(nullptr) {}
  virtual ~CylinderConstraint();

  CylinderConstraint(const CylinderConstraint& from);
  CylinderConstraint(CylinderConstraint&& from) noexcept
    : CylinderConstraint() {
    *this = ::std::move(from);
  }

  inline CylinderConstraint& operator=(const CylinderConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CylinderConstraint& operator=(CylinderConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CylinderConstraint& default_instance();

  static inline const CylinderConstraint* internal_default_instance() {
    return reinterpret_cast<const CylinderConstraint*>(
               &_CylinderConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CylinderConstraint& a, CylinderConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(CylinderConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CylinderConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CylinderConstraint* New() const final {
    return CreateMaybeMessage<CylinderConstraint>(nullptr);
  }

  CylinderConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CylinderConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CylinderConstraint& from);
  void MergeFrom(const CylinderConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CylinderConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.CylinderConstraint";
  }
  protected:
  explicit CylinderConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .improbable.platform.runtime.Coordinates center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::improbable::platform::runtime::Coordinates& center() const;
  ::improbable::platform::runtime::Coordinates* release_center();
  ::improbable::platform::runtime::Coordinates* mutable_center();
  void set_allocated_center(::improbable::platform::runtime::Coordinates* center);
  private:
  const ::improbable::platform::runtime::Coordinates& _internal_center() const;
  ::improbable::platform::runtime::Coordinates* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::improbable::platform::runtime::Coordinates* center);
  ::improbable::platform::runtime::Coordinates* unsafe_arena_release_center();

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.CylinderConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Coordinates* center_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class EntityIdConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.EntityIdConstraint) */ {
 public:
  inline EntityIdConstraint() : EntityIdConstraint(nullptr) {}
  virtual ~EntityIdConstraint();

  EntityIdConstraint(const EntityIdConstraint& from);
  EntityIdConstraint(EntityIdConstraint&& from) noexcept
    : EntityIdConstraint() {
    *this = ::std::move(from);
  }

  inline EntityIdConstraint& operator=(const EntityIdConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityIdConstraint& operator=(EntityIdConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityIdConstraint& default_instance();

  static inline const EntityIdConstraint* internal_default_instance() {
    return reinterpret_cast<const EntityIdConstraint*>(
               &_EntityIdConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EntityIdConstraint& a, EntityIdConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityIdConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityIdConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityIdConstraint* New() const final {
    return CreateMaybeMessage<EntityIdConstraint>(nullptr);
  }

  EntityIdConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityIdConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityIdConstraint& from);
  void MergeFrom(const EntityIdConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityIdConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.EntityIdConstraint";
  }
  protected:
  explicit EntityIdConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
  };
  // .improbable.platform.runtime.EntityId entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::improbable::platform::runtime::EntityId& entity_id() const;
  ::improbable::platform::runtime::EntityId* release_entity_id();
  ::improbable::platform::runtime::EntityId* mutable_entity_id();
  void set_allocated_entity_id(::improbable::platform::runtime::EntityId* entity_id);
  private:
  const ::improbable::platform::runtime::EntityId& _internal_entity_id() const;
  ::improbable::platform::runtime::EntityId* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::improbable::platform::runtime::EntityId* entity_id);
  ::improbable::platform::runtime::EntityId* unsafe_arena_release_entity_id();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.EntityIdConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::EntityId* entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class ComponentConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.ComponentConstraint) */ {
 public:
  inline ComponentConstraint() : ComponentConstraint(nullptr) {}
  virtual ~ComponentConstraint();

  ComponentConstraint(const ComponentConstraint& from);
  ComponentConstraint(ComponentConstraint&& from) noexcept
    : ComponentConstraint() {
    *this = ::std::move(from);
  }

  inline ComponentConstraint& operator=(const ComponentConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentConstraint& operator=(ComponentConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentConstraint& default_instance();

  static inline const ComponentConstraint* internal_default_instance() {
    return reinterpret_cast<const ComponentConstraint*>(
               &_ComponentConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ComponentConstraint& a, ComponentConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentConstraint* New() const final {
    return CreateMaybeMessage<ComponentConstraint>(nullptr);
  }

  ComponentConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentConstraint& from);
  void MergeFrom(const ComponentConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.ComponentConstraint";
  }
  protected:
  explicit ComponentConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
  };
  // uint32 component = 1;
  void clear_component();
  ::PROTOBUF_NAMESPACE_ID::uint32 component() const;
  void set_component(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component() const;
  void _internal_set_component(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.ComponentConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 component_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class AndConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.AndConstraint) */ {
 public:
  inline AndConstraint() : AndConstraint(nullptr) {}
  virtual ~AndConstraint();

  AndConstraint(const AndConstraint& from);
  AndConstraint(AndConstraint&& from) noexcept
    : AndConstraint() {
    *this = ::std::move(from);
  }

  inline AndConstraint& operator=(const AndConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndConstraint& operator=(AndConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AndConstraint& default_instance();

  static inline const AndConstraint* internal_default_instance() {
    return reinterpret_cast<const AndConstraint*>(
               &_AndConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AndConstraint& a, AndConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(AndConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndConstraint* New() const final {
    return CreateMaybeMessage<AndConstraint>(nullptr);
  }

  AndConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AndConstraint& from);
  void MergeFrom(const AndConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.AndConstraint";
  }
  protected:
  explicit AndConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConjunctFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint conjunct = 1;
  int conjunct_size() const;
  private:
  int _internal_conjunct_size() const;
  public:
  void clear_conjunct();
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* mutable_conjunct(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >*
      mutable_conjunct();
  private:
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& _internal_conjunct(int index) const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* _internal_add_conjunct();
  public:
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& conjunct(int index) const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* add_conjunct();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >&
      conjunct() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.AndConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint > conjunct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class OrConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.OrConstraint) */ {
 public:
  inline OrConstraint() : OrConstraint(nullptr) {}
  virtual ~OrConstraint();

  OrConstraint(const OrConstraint& from);
  OrConstraint(OrConstraint&& from) noexcept
    : OrConstraint() {
    *this = ::std::move(from);
  }

  inline OrConstraint& operator=(const OrConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrConstraint& operator=(OrConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrConstraint& default_instance();

  static inline const OrConstraint* internal_default_instance() {
    return reinterpret_cast<const OrConstraint*>(
               &_OrConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OrConstraint& a, OrConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(OrConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrConstraint* New() const final {
    return CreateMaybeMessage<OrConstraint>(nullptr);
  }

  OrConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrConstraint& from);
  void MergeFrom(const OrConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.OrConstraint";
  }
  protected:
  explicit OrConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisjunctFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.InspectionEntityQueryConstraint disjunct = 1;
  int disjunct_size() const;
  private:
  int _internal_disjunct_size() const;
  public:
  void clear_disjunct();
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* mutable_disjunct(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >*
      mutable_disjunct();
  private:
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& _internal_disjunct(int index) const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* _internal_add_disjunct();
  public:
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& disjunct(int index) const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* add_disjunct();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >&
      disjunct() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.OrConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint > disjunct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class NotConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.NotConstraint) */ {
 public:
  inline NotConstraint() : NotConstraint(nullptr) {}
  virtual ~NotConstraint();

  NotConstraint(const NotConstraint& from);
  NotConstraint(NotConstraint&& from) noexcept
    : NotConstraint() {
    *this = ::std::move(from);
  }

  inline NotConstraint& operator=(const NotConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotConstraint& operator=(NotConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotConstraint& default_instance();

  static inline const NotConstraint* internal_default_instance() {
    return reinterpret_cast<const NotConstraint*>(
               &_NotConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NotConstraint& a, NotConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(NotConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotConstraint* New() const final {
    return CreateMaybeMessage<NotConstraint>(nullptr);
  }

  NotConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotConstraint& from);
  void MergeFrom(const NotConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.NotConstraint";
  }
  protected:
  explicit NotConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNegatedFieldNumber = 1,
  };
  // .improbable.platform.runtime.InspectionEntityQueryConstraint negated = 1;
  bool has_negated() const;
  private:
  bool _internal_has_negated() const;
  public:
  void clear_negated();
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& negated() const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* release_negated();
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* mutable_negated();
  void set_allocated_negated(::improbable::platform::runtime::InspectionEntityQueryConstraint* negated);
  private:
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint& _internal_negated() const;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* _internal_mutable_negated();
  public:
  void unsafe_arena_set_allocated_negated(
      ::improbable::platform::runtime::InspectionEntityQueryConstraint* negated);
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* unsafe_arena_release_negated();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.NotConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* negated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class TrueConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.TrueConstraint) */ {
 public:
  inline TrueConstraint() : TrueConstraint(nullptr) {}
  virtual ~TrueConstraint();

  TrueConstraint(const TrueConstraint& from);
  TrueConstraint(TrueConstraint&& from) noexcept
    : TrueConstraint() {
    *this = ::std::move(from);
  }

  inline TrueConstraint& operator=(const TrueConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrueConstraint& operator=(TrueConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrueConstraint& default_instance();

  static inline const TrueConstraint* internal_default_instance() {
    return reinterpret_cast<const TrueConstraint*>(
               &_TrueConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TrueConstraint& a, TrueConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrueConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrueConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrueConstraint* New() const final {
    return CreateMaybeMessage<TrueConstraint>(nullptr);
  }

  TrueConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrueConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrueConstraint& from);
  void MergeFrom(const TrueConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrueConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.TrueConstraint";
  }
  protected:
  explicit TrueConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.TrueConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class FalseConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.FalseConstraint) */ {
 public:
  inline FalseConstraint() : FalseConstraint(nullptr) {}
  virtual ~FalseConstraint();

  FalseConstraint(const FalseConstraint& from);
  FalseConstraint(FalseConstraint&& from) noexcept
    : FalseConstraint() {
    *this = ::std::move(from);
  }

  inline FalseConstraint& operator=(const FalseConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline FalseConstraint& operator=(FalseConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FalseConstraint& default_instance();

  static inline const FalseConstraint* internal_default_instance() {
    return reinterpret_cast<const FalseConstraint*>(
               &_FalseConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FalseConstraint& a, FalseConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(FalseConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FalseConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FalseConstraint* New() const final {
    return CreateMaybeMessage<FalseConstraint>(nullptr);
  }

  FalseConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FalseConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FalseConstraint& from);
  void MergeFrom(const FalseConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FalseConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.FalseConstraint";
  }
  protected:
  explicit FalseConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.FalseConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class BoxConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.BoxConstraint) */ {
 public:
  inline BoxConstraint() : BoxConstraint(nullptr) {}
  virtual ~BoxConstraint();

  BoxConstraint(const BoxConstraint& from);
  BoxConstraint(BoxConstraint&& from) noexcept
    : BoxConstraint() {
    *this = ::std::move(from);
  }

  inline BoxConstraint& operator=(const BoxConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxConstraint& operator=(BoxConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoxConstraint& default_instance();

  static inline const BoxConstraint* internal_default_instance() {
    return reinterpret_cast<const BoxConstraint*>(
               &_BoxConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BoxConstraint& a, BoxConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(BoxConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoxConstraint* New() const final {
    return CreateMaybeMessage<BoxConstraint>(nullptr);
  }

  BoxConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoxConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoxConstraint& from);
  void MergeFrom(const BoxConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoxConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.BoxConstraint";
  }
  protected:
  explicit BoxConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // .improbable.platform.runtime.Coordinates min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::improbable::platform::runtime::Coordinates& min() const;
  ::improbable::platform::runtime::Coordinates* release_min();
  ::improbable::platform::runtime::Coordinates* mutable_min();
  void set_allocated_min(::improbable::platform::runtime::Coordinates* min);
  private:
  const ::improbable::platform::runtime::Coordinates& _internal_min() const;
  ::improbable::platform::runtime::Coordinates* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::improbable::platform::runtime::Coordinates* min);
  ::improbable::platform::runtime::Coordinates* unsafe_arena_release_min();

  // .improbable.platform.runtime.Coordinates max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::improbable::platform::runtime::Coordinates& max() const;
  ::improbable::platform::runtime::Coordinates* release_max();
  ::improbable::platform::runtime::Coordinates* mutable_max();
  void set_allocated_max(::improbable::platform::runtime::Coordinates* max);
  private:
  const ::improbable::platform::runtime::Coordinates& _internal_max() const;
  ::improbable::platform::runtime::Coordinates* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::improbable::platform::runtime::Coordinates* max);
  ::improbable::platform::runtime::Coordinates* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.BoxConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::platform::runtime::Coordinates* min_;
  ::improbable::platform::runtime::Coordinates* max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class AuthorityConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.AuthorityConstraint) */ {
 public:
  inline AuthorityConstraint() : AuthorityConstraint(nullptr) {}
  virtual ~AuthorityConstraint();

  AuthorityConstraint(const AuthorityConstraint& from);
  AuthorityConstraint(AuthorityConstraint&& from) noexcept
    : AuthorityConstraint() {
    *this = ::std::move(from);
  }

  inline AuthorityConstraint& operator=(const AuthorityConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorityConstraint& operator=(AuthorityConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorityConstraint& default_instance();

  static inline const AuthorityConstraint* internal_default_instance() {
    return reinterpret_cast<const AuthorityConstraint*>(
               &_AuthorityConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AuthorityConstraint& a, AuthorityConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorityConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorityConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorityConstraint* New() const final {
    return CreateMaybeMessage<AuthorityConstraint>(nullptr);
  }

  AuthorityConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorityConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorityConstraint& from);
  void MergeFrom(const AuthorityConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorityConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.AuthorityConstraint";
  }
  protected:
  explicit AuthorityConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIdFieldNumber = 1,
  };
  // string worker_id = 1;
  void clear_worker_id();
  const std::string& worker_id() const;
  void set_worker_id(const std::string& value);
  void set_worker_id(std::string&& value);
  void set_worker_id(const char* value);
  void set_worker_id(const char* value, size_t size);
  std::string* mutable_worker_id();
  std::string* release_worker_id();
  void set_allocated_worker_id(std::string* worker_id);
  private:
  const std::string& _internal_worker_id() const;
  void _internal_set_worker_id(const std::string& value);
  std::string* _internal_mutable_worker_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.AuthorityConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class InspectionQueryResultType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionQueryResultType) */ {
 public:
  inline InspectionQueryResultType() : InspectionQueryResultType(nullptr) {}
  virtual ~InspectionQueryResultType();

  InspectionQueryResultType(const InspectionQueryResultType& from);
  InspectionQueryResultType(InspectionQueryResultType&& from) noexcept
    : InspectionQueryResultType() {
    *this = ::std::move(from);
  }

  inline InspectionQueryResultType& operator=(const InspectionQueryResultType& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionQueryResultType& operator=(InspectionQueryResultType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionQueryResultType& default_instance();

  enum ResultTypeCase {
    kSnapshot = 1,
    RESULT_TYPE_NOT_SET = 0,
  };

  static inline const InspectionQueryResultType* internal_default_instance() {
    return reinterpret_cast<const InspectionQueryResultType*>(
               &_InspectionQueryResultType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InspectionQueryResultType& a, InspectionQueryResultType& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionQueryResultType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionQueryResultType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionQueryResultType* New() const final {
    return CreateMaybeMessage<InspectionQueryResultType>(nullptr);
  }

  InspectionQueryResultType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionQueryResultType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionQueryResultType& from);
  void MergeFrom(const InspectionQueryResultType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionQueryResultType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionQueryResultType";
  }
  protected:
  explicit InspectionQueryResultType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // .improbable.platform.runtime.InspectionSnapshotResultType snapshot = 1;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::improbable::platform::runtime::InspectionSnapshotResultType& snapshot() const;
  ::improbable::platform::runtime::InspectionSnapshotResultType* release_snapshot();
  ::improbable::platform::runtime::InspectionSnapshotResultType* mutable_snapshot();
  void set_allocated_snapshot(::improbable::platform::runtime::InspectionSnapshotResultType* snapshot);
  private:
  const ::improbable::platform::runtime::InspectionSnapshotResultType& _internal_snapshot() const;
  ::improbable::platform::runtime::InspectionSnapshotResultType* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::improbable::platform::runtime::InspectionSnapshotResultType* snapshot);
  ::improbable::platform::runtime::InspectionSnapshotResultType* unsafe_arena_release_snapshot();

  void clear_result_type();
  ResultTypeCase result_type_case() const;
  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionQueryResultType)
 private:
  class _Internal;
  void set_has_snapshot();

  inline bool has_result_type() const;
  inline void clear_has_result_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResultTypeUnion {
    ResultTypeUnion() {}
    ::improbable::platform::runtime::InspectionSnapshotResultType* snapshot_;
  } result_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// -------------------------------------------------------------------

class InspectionSnapshotResultType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.InspectionSnapshotResultType) */ {
 public:
  inline InspectionSnapshotResultType() : InspectionSnapshotResultType(nullptr) {}
  virtual ~InspectionSnapshotResultType();

  InspectionSnapshotResultType(const InspectionSnapshotResultType& from);
  InspectionSnapshotResultType(InspectionSnapshotResultType&& from) noexcept
    : InspectionSnapshotResultType() {
    *this = ::std::move(from);
  }

  inline InspectionSnapshotResultType& operator=(const InspectionSnapshotResultType& from) {
    CopyFrom(from);
    return *this;
  }
  inline InspectionSnapshotResultType& operator=(InspectionSnapshotResultType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InspectionSnapshotResultType& default_instance();

  static inline const InspectionSnapshotResultType* internal_default_instance() {
    return reinterpret_cast<const InspectionSnapshotResultType*>(
               &_InspectionSnapshotResultType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(InspectionSnapshotResultType& a, InspectionSnapshotResultType& b) {
    a.Swap(&b);
  }
  inline void Swap(InspectionSnapshotResultType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InspectionSnapshotResultType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InspectionSnapshotResultType* New() const final {
    return CreateMaybeMessage<InspectionSnapshotResultType>(nullptr);
  }

  InspectionSnapshotResultType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InspectionSnapshotResultType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InspectionSnapshotResultType& from);
  void MergeFrom(const InspectionSnapshotResultType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InspectionSnapshotResultType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.InspectionSnapshotResultType";
  }
  protected:
  explicit InspectionSnapshotResultType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fquery_2eproto);
    return ::descriptor_table_runtime_2fquery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentIdFieldNumber = 2,
    kFullSnapshotFieldNumber = 1,
    kIncludeAuthorityFieldNumber = 3,
  };
  // repeated uint32 component_id = 2;
  int component_id_size() const;
  private:
  int _internal_component_id_size() const;
  public:
  void clear_component_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_component_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_component_id() const;
  void _internal_add_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_component_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 component_id(int index) const;
  void set_component_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      component_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_component_id();

  // bool full_snapshot = 1;
  void clear_full_snapshot();
  bool full_snapshot() const;
  void set_full_snapshot(bool value);
  private:
  bool _internal_full_snapshot() const;
  void _internal_set_full_snapshot(bool value);
  public:

  // bool include_authority = 3;
  void clear_include_authority();
  bool include_authority() const;
  void set_include_authority(bool value);
  private:
  bool _internal_include_authority() const;
  void _internal_set_include_authority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.InspectionSnapshotResultType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > component_id_;
  mutable std::atomic<int> _component_id_cached_byte_size_;
  bool full_snapshot_;
  bool include_authority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double x = 1;
inline void Coordinates::clear_x() {
  x_ = 0;
}
inline double Coordinates::_internal_x() const {
  return x_;
}
inline double Coordinates::x() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Coordinates.x)
  return _internal_x();
}
inline void Coordinates::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Coordinates::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.Coordinates.x)
}

// double y = 2;
inline void Coordinates::clear_y() {
  y_ = 0;
}
inline double Coordinates::_internal_y() const {
  return y_;
}
inline double Coordinates::y() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Coordinates.y)
  return _internal_y();
}
inline void Coordinates::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Coordinates::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.Coordinates.y)
}

// double z = 3;
inline void Coordinates::clear_z() {
  z_ = 0;
}
inline double Coordinates::_internal_z() const {
  return z_;
}
inline double Coordinates::z() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.Coordinates.z)
  return _internal_z();
}
inline void Coordinates::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Coordinates::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.Coordinates.z)
}

// -------------------------------------------------------------------

// InspectionEntityQueryConstraint

// .improbable.platform.runtime.SphereConstraint sphere_constraint = 1;
inline bool InspectionEntityQueryConstraint::_internal_has_sphere_constraint() const {
  return constraint_case() == kSphereConstraint;
}
inline bool InspectionEntityQueryConstraint::has_sphere_constraint() const {
  return _internal_has_sphere_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_sphere_constraint() {
  _oneof_case_[0] = kSphereConstraint;
}
inline void InspectionEntityQueryConstraint::clear_sphere_constraint() {
  if (_internal_has_sphere_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.sphere_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::SphereConstraint* InspectionEntityQueryConstraint::release_sphere_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.sphere_constraint)
  if (_internal_has_sphere_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::SphereConstraint* temp = constraint_.sphere_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.sphere_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::SphereConstraint& InspectionEntityQueryConstraint::_internal_sphere_constraint() const {
  return _internal_has_sphere_constraint()
      ? *constraint_.sphere_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::SphereConstraint&>(::improbable::platform::runtime::_SphereConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::SphereConstraint& InspectionEntityQueryConstraint::sphere_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.sphere_constraint)
  return _internal_sphere_constraint();
}
inline ::improbable::platform::runtime::SphereConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_sphere_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.sphere_constraint)
  if (_internal_has_sphere_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::SphereConstraint* temp = constraint_.sphere_constraint_;
    constraint_.sphere_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_sphere_constraint(::improbable::platform::runtime::SphereConstraint* sphere_constraint) {
  clear_constraint();
  if (sphere_constraint) {
    set_has_sphere_constraint();
    constraint_.sphere_constraint_ = sphere_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.sphere_constraint)
}
inline ::improbable::platform::runtime::SphereConstraint* InspectionEntityQueryConstraint::_internal_mutable_sphere_constraint() {
  if (!_internal_has_sphere_constraint()) {
    clear_constraint();
    set_has_sphere_constraint();
    constraint_.sphere_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::SphereConstraint >(GetArena());
  }
  return constraint_.sphere_constraint_;
}
inline ::improbable::platform::runtime::SphereConstraint* InspectionEntityQueryConstraint::mutable_sphere_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.sphere_constraint)
  return _internal_mutable_sphere_constraint();
}

// .improbable.platform.runtime.CylinderConstraint cylinder_constraint = 2;
inline bool InspectionEntityQueryConstraint::_internal_has_cylinder_constraint() const {
  return constraint_case() == kCylinderConstraint;
}
inline bool InspectionEntityQueryConstraint::has_cylinder_constraint() const {
  return _internal_has_cylinder_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_cylinder_constraint() {
  _oneof_case_[0] = kCylinderConstraint;
}
inline void InspectionEntityQueryConstraint::clear_cylinder_constraint() {
  if (_internal_has_cylinder_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.cylinder_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::CylinderConstraint* InspectionEntityQueryConstraint::release_cylinder_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.cylinder_constraint)
  if (_internal_has_cylinder_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::CylinderConstraint* temp = constraint_.cylinder_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.cylinder_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::CylinderConstraint& InspectionEntityQueryConstraint::_internal_cylinder_constraint() const {
  return _internal_has_cylinder_constraint()
      ? *constraint_.cylinder_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::CylinderConstraint&>(::improbable::platform::runtime::_CylinderConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::CylinderConstraint& InspectionEntityQueryConstraint::cylinder_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.cylinder_constraint)
  return _internal_cylinder_constraint();
}
inline ::improbable::platform::runtime::CylinderConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_cylinder_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.cylinder_constraint)
  if (_internal_has_cylinder_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::CylinderConstraint* temp = constraint_.cylinder_constraint_;
    constraint_.cylinder_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_cylinder_constraint(::improbable::platform::runtime::CylinderConstraint* cylinder_constraint) {
  clear_constraint();
  if (cylinder_constraint) {
    set_has_cylinder_constraint();
    constraint_.cylinder_constraint_ = cylinder_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.cylinder_constraint)
}
inline ::improbable::platform::runtime::CylinderConstraint* InspectionEntityQueryConstraint::_internal_mutable_cylinder_constraint() {
  if (!_internal_has_cylinder_constraint()) {
    clear_constraint();
    set_has_cylinder_constraint();
    constraint_.cylinder_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::CylinderConstraint >(GetArena());
  }
  return constraint_.cylinder_constraint_;
}
inline ::improbable::platform::runtime::CylinderConstraint* InspectionEntityQueryConstraint::mutable_cylinder_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.cylinder_constraint)
  return _internal_mutable_cylinder_constraint();
}

// .improbable.platform.runtime.EntityIdConstraint entity_id_constraint = 4;
inline bool InspectionEntityQueryConstraint::_internal_has_entity_id_constraint() const {
  return constraint_case() == kEntityIdConstraint;
}
inline bool InspectionEntityQueryConstraint::has_entity_id_constraint() const {
  return _internal_has_entity_id_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_entity_id_constraint() {
  _oneof_case_[0] = kEntityIdConstraint;
}
inline void InspectionEntityQueryConstraint::clear_entity_id_constraint() {
  if (_internal_has_entity_id_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.entity_id_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::EntityIdConstraint* InspectionEntityQueryConstraint::release_entity_id_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.entity_id_constraint)
  if (_internal_has_entity_id_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::EntityIdConstraint* temp = constraint_.entity_id_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.entity_id_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::EntityIdConstraint& InspectionEntityQueryConstraint::_internal_entity_id_constraint() const {
  return _internal_has_entity_id_constraint()
      ? *constraint_.entity_id_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::EntityIdConstraint&>(::improbable::platform::runtime::_EntityIdConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::EntityIdConstraint& InspectionEntityQueryConstraint::entity_id_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.entity_id_constraint)
  return _internal_entity_id_constraint();
}
inline ::improbable::platform::runtime::EntityIdConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_entity_id_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.entity_id_constraint)
  if (_internal_has_entity_id_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::EntityIdConstraint* temp = constraint_.entity_id_constraint_;
    constraint_.entity_id_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_entity_id_constraint(::improbable::platform::runtime::EntityIdConstraint* entity_id_constraint) {
  clear_constraint();
  if (entity_id_constraint) {
    set_has_entity_id_constraint();
    constraint_.entity_id_constraint_ = entity_id_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.entity_id_constraint)
}
inline ::improbable::platform::runtime::EntityIdConstraint* InspectionEntityQueryConstraint::_internal_mutable_entity_id_constraint() {
  if (!_internal_has_entity_id_constraint()) {
    clear_constraint();
    set_has_entity_id_constraint();
    constraint_.entity_id_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::EntityIdConstraint >(GetArena());
  }
  return constraint_.entity_id_constraint_;
}
inline ::improbable::platform::runtime::EntityIdConstraint* InspectionEntityQueryConstraint::mutable_entity_id_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.entity_id_constraint)
  return _internal_mutable_entity_id_constraint();
}

// .improbable.platform.runtime.ComponentConstraint component_constraint = 5;
inline bool InspectionEntityQueryConstraint::_internal_has_component_constraint() const {
  return constraint_case() == kComponentConstraint;
}
inline bool InspectionEntityQueryConstraint::has_component_constraint() const {
  return _internal_has_component_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_component_constraint() {
  _oneof_case_[0] = kComponentConstraint;
}
inline void InspectionEntityQueryConstraint::clear_component_constraint() {
  if (_internal_has_component_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.component_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::ComponentConstraint* InspectionEntityQueryConstraint::release_component_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.component_constraint)
  if (_internal_has_component_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::ComponentConstraint* temp = constraint_.component_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.component_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::ComponentConstraint& InspectionEntityQueryConstraint::_internal_component_constraint() const {
  return _internal_has_component_constraint()
      ? *constraint_.component_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::ComponentConstraint&>(::improbable::platform::runtime::_ComponentConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::ComponentConstraint& InspectionEntityQueryConstraint::component_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.component_constraint)
  return _internal_component_constraint();
}
inline ::improbable::platform::runtime::ComponentConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_component_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.component_constraint)
  if (_internal_has_component_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::ComponentConstraint* temp = constraint_.component_constraint_;
    constraint_.component_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_component_constraint(::improbable::platform::runtime::ComponentConstraint* component_constraint) {
  clear_constraint();
  if (component_constraint) {
    set_has_component_constraint();
    constraint_.component_constraint_ = component_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.component_constraint)
}
inline ::improbable::platform::runtime::ComponentConstraint* InspectionEntityQueryConstraint::_internal_mutable_component_constraint() {
  if (!_internal_has_component_constraint()) {
    clear_constraint();
    set_has_component_constraint();
    constraint_.component_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::ComponentConstraint >(GetArena());
  }
  return constraint_.component_constraint_;
}
inline ::improbable::platform::runtime::ComponentConstraint* InspectionEntityQueryConstraint::mutable_component_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.component_constraint)
  return _internal_mutable_component_constraint();
}

// .improbable.platform.runtime.AndConstraint and_constraint = 6;
inline bool InspectionEntityQueryConstraint::_internal_has_and_constraint() const {
  return constraint_case() == kAndConstraint;
}
inline bool InspectionEntityQueryConstraint::has_and_constraint() const {
  return _internal_has_and_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_and_constraint() {
  _oneof_case_[0] = kAndConstraint;
}
inline void InspectionEntityQueryConstraint::clear_and_constraint() {
  if (_internal_has_and_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.and_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::AndConstraint* InspectionEntityQueryConstraint::release_and_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.and_constraint)
  if (_internal_has_and_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::AndConstraint* temp = constraint_.and_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.and_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::AndConstraint& InspectionEntityQueryConstraint::_internal_and_constraint() const {
  return _internal_has_and_constraint()
      ? *constraint_.and_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::AndConstraint&>(::improbable::platform::runtime::_AndConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::AndConstraint& InspectionEntityQueryConstraint::and_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.and_constraint)
  return _internal_and_constraint();
}
inline ::improbable::platform::runtime::AndConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_and_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.and_constraint)
  if (_internal_has_and_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::AndConstraint* temp = constraint_.and_constraint_;
    constraint_.and_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_and_constraint(::improbable::platform::runtime::AndConstraint* and_constraint) {
  clear_constraint();
  if (and_constraint) {
    set_has_and_constraint();
    constraint_.and_constraint_ = and_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.and_constraint)
}
inline ::improbable::platform::runtime::AndConstraint* InspectionEntityQueryConstraint::_internal_mutable_and_constraint() {
  if (!_internal_has_and_constraint()) {
    clear_constraint();
    set_has_and_constraint();
    constraint_.and_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::AndConstraint >(GetArena());
  }
  return constraint_.and_constraint_;
}
inline ::improbable::platform::runtime::AndConstraint* InspectionEntityQueryConstraint::mutable_and_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.and_constraint)
  return _internal_mutable_and_constraint();
}

// .improbable.platform.runtime.OrConstraint or_constraint = 7;
inline bool InspectionEntityQueryConstraint::_internal_has_or_constraint() const {
  return constraint_case() == kOrConstraint;
}
inline bool InspectionEntityQueryConstraint::has_or_constraint() const {
  return _internal_has_or_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_or_constraint() {
  _oneof_case_[0] = kOrConstraint;
}
inline void InspectionEntityQueryConstraint::clear_or_constraint() {
  if (_internal_has_or_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.or_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::OrConstraint* InspectionEntityQueryConstraint::release_or_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.or_constraint)
  if (_internal_has_or_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::OrConstraint* temp = constraint_.or_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.or_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::OrConstraint& InspectionEntityQueryConstraint::_internal_or_constraint() const {
  return _internal_has_or_constraint()
      ? *constraint_.or_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::OrConstraint&>(::improbable::platform::runtime::_OrConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::OrConstraint& InspectionEntityQueryConstraint::or_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.or_constraint)
  return _internal_or_constraint();
}
inline ::improbable::platform::runtime::OrConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_or_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.or_constraint)
  if (_internal_has_or_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::OrConstraint* temp = constraint_.or_constraint_;
    constraint_.or_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_or_constraint(::improbable::platform::runtime::OrConstraint* or_constraint) {
  clear_constraint();
  if (or_constraint) {
    set_has_or_constraint();
    constraint_.or_constraint_ = or_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.or_constraint)
}
inline ::improbable::platform::runtime::OrConstraint* InspectionEntityQueryConstraint::_internal_mutable_or_constraint() {
  if (!_internal_has_or_constraint()) {
    clear_constraint();
    set_has_or_constraint();
    constraint_.or_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::OrConstraint >(GetArena());
  }
  return constraint_.or_constraint_;
}
inline ::improbable::platform::runtime::OrConstraint* InspectionEntityQueryConstraint::mutable_or_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.or_constraint)
  return _internal_mutable_or_constraint();
}

// .improbable.platform.runtime.NotConstraint not_constraint = 8;
inline bool InspectionEntityQueryConstraint::_internal_has_not_constraint() const {
  return constraint_case() == kNotConstraint;
}
inline bool InspectionEntityQueryConstraint::has_not_constraint() const {
  return _internal_has_not_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_not_constraint() {
  _oneof_case_[0] = kNotConstraint;
}
inline void InspectionEntityQueryConstraint::clear_not_constraint() {
  if (_internal_has_not_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.not_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::NotConstraint* InspectionEntityQueryConstraint::release_not_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.not_constraint)
  if (_internal_has_not_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::NotConstraint* temp = constraint_.not_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.not_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::NotConstraint& InspectionEntityQueryConstraint::_internal_not_constraint() const {
  return _internal_has_not_constraint()
      ? *constraint_.not_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::NotConstraint&>(::improbable::platform::runtime::_NotConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::NotConstraint& InspectionEntityQueryConstraint::not_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.not_constraint)
  return _internal_not_constraint();
}
inline ::improbable::platform::runtime::NotConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_not_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.not_constraint)
  if (_internal_has_not_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::NotConstraint* temp = constraint_.not_constraint_;
    constraint_.not_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_not_constraint(::improbable::platform::runtime::NotConstraint* not_constraint) {
  clear_constraint();
  if (not_constraint) {
    set_has_not_constraint();
    constraint_.not_constraint_ = not_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.not_constraint)
}
inline ::improbable::platform::runtime::NotConstraint* InspectionEntityQueryConstraint::_internal_mutable_not_constraint() {
  if (!_internal_has_not_constraint()) {
    clear_constraint();
    set_has_not_constraint();
    constraint_.not_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::NotConstraint >(GetArena());
  }
  return constraint_.not_constraint_;
}
inline ::improbable::platform::runtime::NotConstraint* InspectionEntityQueryConstraint::mutable_not_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.not_constraint)
  return _internal_mutable_not_constraint();
}

// .improbable.platform.runtime.TrueConstraint true_constraint = 9;
inline bool InspectionEntityQueryConstraint::_internal_has_true_constraint() const {
  return constraint_case() == kTrueConstraint;
}
inline bool InspectionEntityQueryConstraint::has_true_constraint() const {
  return _internal_has_true_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_true_constraint() {
  _oneof_case_[0] = kTrueConstraint;
}
inline void InspectionEntityQueryConstraint::clear_true_constraint() {
  if (_internal_has_true_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.true_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::TrueConstraint* InspectionEntityQueryConstraint::release_true_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.true_constraint)
  if (_internal_has_true_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::TrueConstraint* temp = constraint_.true_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.true_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::TrueConstraint& InspectionEntityQueryConstraint::_internal_true_constraint() const {
  return _internal_has_true_constraint()
      ? *constraint_.true_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::TrueConstraint&>(::improbable::platform::runtime::_TrueConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::TrueConstraint& InspectionEntityQueryConstraint::true_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.true_constraint)
  return _internal_true_constraint();
}
inline ::improbable::platform::runtime::TrueConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_true_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.true_constraint)
  if (_internal_has_true_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::TrueConstraint* temp = constraint_.true_constraint_;
    constraint_.true_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_true_constraint(::improbable::platform::runtime::TrueConstraint* true_constraint) {
  clear_constraint();
  if (true_constraint) {
    set_has_true_constraint();
    constraint_.true_constraint_ = true_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.true_constraint)
}
inline ::improbable::platform::runtime::TrueConstraint* InspectionEntityQueryConstraint::_internal_mutable_true_constraint() {
  if (!_internal_has_true_constraint()) {
    clear_constraint();
    set_has_true_constraint();
    constraint_.true_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::TrueConstraint >(GetArena());
  }
  return constraint_.true_constraint_;
}
inline ::improbable::platform::runtime::TrueConstraint* InspectionEntityQueryConstraint::mutable_true_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.true_constraint)
  return _internal_mutable_true_constraint();
}

// .improbable.platform.runtime.FalseConstraint false_constraint = 10;
inline bool InspectionEntityQueryConstraint::_internal_has_false_constraint() const {
  return constraint_case() == kFalseConstraint;
}
inline bool InspectionEntityQueryConstraint::has_false_constraint() const {
  return _internal_has_false_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_false_constraint() {
  _oneof_case_[0] = kFalseConstraint;
}
inline void InspectionEntityQueryConstraint::clear_false_constraint() {
  if (_internal_has_false_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.false_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::FalseConstraint* InspectionEntityQueryConstraint::release_false_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.false_constraint)
  if (_internal_has_false_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::FalseConstraint* temp = constraint_.false_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.false_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::FalseConstraint& InspectionEntityQueryConstraint::_internal_false_constraint() const {
  return _internal_has_false_constraint()
      ? *constraint_.false_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::FalseConstraint&>(::improbable::platform::runtime::_FalseConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::FalseConstraint& InspectionEntityQueryConstraint::false_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.false_constraint)
  return _internal_false_constraint();
}
inline ::improbable::platform::runtime::FalseConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_false_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.false_constraint)
  if (_internal_has_false_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::FalseConstraint* temp = constraint_.false_constraint_;
    constraint_.false_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_false_constraint(::improbable::platform::runtime::FalseConstraint* false_constraint) {
  clear_constraint();
  if (false_constraint) {
    set_has_false_constraint();
    constraint_.false_constraint_ = false_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.false_constraint)
}
inline ::improbable::platform::runtime::FalseConstraint* InspectionEntityQueryConstraint::_internal_mutable_false_constraint() {
  if (!_internal_has_false_constraint()) {
    clear_constraint();
    set_has_false_constraint();
    constraint_.false_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::FalseConstraint >(GetArena());
  }
  return constraint_.false_constraint_;
}
inline ::improbable::platform::runtime::FalseConstraint* InspectionEntityQueryConstraint::mutable_false_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.false_constraint)
  return _internal_mutable_false_constraint();
}

// .improbable.platform.runtime.BoxConstraint box_constraint = 11;
inline bool InspectionEntityQueryConstraint::_internal_has_box_constraint() const {
  return constraint_case() == kBoxConstraint;
}
inline bool InspectionEntityQueryConstraint::has_box_constraint() const {
  return _internal_has_box_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_box_constraint() {
  _oneof_case_[0] = kBoxConstraint;
}
inline void InspectionEntityQueryConstraint::clear_box_constraint() {
  if (_internal_has_box_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.box_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::BoxConstraint* InspectionEntityQueryConstraint::release_box_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.box_constraint)
  if (_internal_has_box_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::BoxConstraint* temp = constraint_.box_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.box_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::BoxConstraint& InspectionEntityQueryConstraint::_internal_box_constraint() const {
  return _internal_has_box_constraint()
      ? *constraint_.box_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::BoxConstraint&>(::improbable::platform::runtime::_BoxConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::BoxConstraint& InspectionEntityQueryConstraint::box_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.box_constraint)
  return _internal_box_constraint();
}
inline ::improbable::platform::runtime::BoxConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_box_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.box_constraint)
  if (_internal_has_box_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::BoxConstraint* temp = constraint_.box_constraint_;
    constraint_.box_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_box_constraint(::improbable::platform::runtime::BoxConstraint* box_constraint) {
  clear_constraint();
  if (box_constraint) {
    set_has_box_constraint();
    constraint_.box_constraint_ = box_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.box_constraint)
}
inline ::improbable::platform::runtime::BoxConstraint* InspectionEntityQueryConstraint::_internal_mutable_box_constraint() {
  if (!_internal_has_box_constraint()) {
    clear_constraint();
    set_has_box_constraint();
    constraint_.box_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::BoxConstraint >(GetArena());
  }
  return constraint_.box_constraint_;
}
inline ::improbable::platform::runtime::BoxConstraint* InspectionEntityQueryConstraint::mutable_box_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.box_constraint)
  return _internal_mutable_box_constraint();
}

// .improbable.platform.runtime.AuthorityConstraint authority_constraint = 12;
inline bool InspectionEntityQueryConstraint::_internal_has_authority_constraint() const {
  return constraint_case() == kAuthorityConstraint;
}
inline bool InspectionEntityQueryConstraint::has_authority_constraint() const {
  return _internal_has_authority_constraint();
}
inline void InspectionEntityQueryConstraint::set_has_authority_constraint() {
  _oneof_case_[0] = kAuthorityConstraint;
}
inline void InspectionEntityQueryConstraint::clear_authority_constraint() {
  if (_internal_has_authority_constraint()) {
    if (GetArena() == nullptr) {
      delete constraint_.authority_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::improbable::platform::runtime::AuthorityConstraint* InspectionEntityQueryConstraint::release_authority_constraint() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionEntityQueryConstraint.authority_constraint)
  if (_internal_has_authority_constraint()) {
    clear_has_constraint();
      ::improbable::platform::runtime::AuthorityConstraint* temp = constraint_.authority_constraint_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constraint_.authority_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::AuthorityConstraint& InspectionEntityQueryConstraint::_internal_authority_constraint() const {
  return _internal_has_authority_constraint()
      ? *constraint_.authority_constraint_
      : reinterpret_cast< ::improbable::platform::runtime::AuthorityConstraint&>(::improbable::platform::runtime::_AuthorityConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::AuthorityConstraint& InspectionEntityQueryConstraint::authority_constraint() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionEntityQueryConstraint.authority_constraint)
  return _internal_authority_constraint();
}
inline ::improbable::platform::runtime::AuthorityConstraint* InspectionEntityQueryConstraint::unsafe_arena_release_authority_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionEntityQueryConstraint.authority_constraint)
  if (_internal_has_authority_constraint()) {
    clear_has_constraint();
    ::improbable::platform::runtime::AuthorityConstraint* temp = constraint_.authority_constraint_;
    constraint_.authority_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionEntityQueryConstraint::unsafe_arena_set_allocated_authority_constraint(::improbable::platform::runtime::AuthorityConstraint* authority_constraint) {
  clear_constraint();
  if (authority_constraint) {
    set_has_authority_constraint();
    constraint_.authority_constraint_ = authority_constraint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionEntityQueryConstraint.authority_constraint)
}
inline ::improbable::platform::runtime::AuthorityConstraint* InspectionEntityQueryConstraint::_internal_mutable_authority_constraint() {
  if (!_internal_has_authority_constraint()) {
    clear_constraint();
    set_has_authority_constraint();
    constraint_.authority_constraint_ = CreateMaybeMessage< ::improbable::platform::runtime::AuthorityConstraint >(GetArena());
  }
  return constraint_.authority_constraint_;
}
inline ::improbable::platform::runtime::AuthorityConstraint* InspectionEntityQueryConstraint::mutable_authority_constraint() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionEntityQueryConstraint.authority_constraint)
  return _internal_mutable_authority_constraint();
}

inline bool InspectionEntityQueryConstraint::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void InspectionEntityQueryConstraint::clear_has_constraint() {
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline InspectionEntityQueryConstraint::ConstraintCase InspectionEntityQueryConstraint::constraint_case() const {
  return InspectionEntityQueryConstraint::ConstraintCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SphereConstraint

// .improbable.platform.runtime.Coordinates center = 1;
inline bool SphereConstraint::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool SphereConstraint::has_center() const {
  return _internal_has_center();
}
inline void SphereConstraint::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::improbable::platform::runtime::Coordinates& SphereConstraint::_internal_center() const {
  const ::improbable::platform::runtime::Coordinates* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Coordinates&>(
      ::improbable::platform::runtime::_Coordinates_default_instance_);
}
inline const ::improbable::platform::runtime::Coordinates& SphereConstraint::center() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.SphereConstraint.center)
  return _internal_center();
}
inline void SphereConstraint::unsafe_arena_set_allocated_center(
    ::improbable::platform::runtime::Coordinates* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.SphereConstraint.center)
}
inline ::improbable::platform::runtime::Coordinates* SphereConstraint::release_center() {
  
  ::improbable::platform::runtime::Coordinates* temp = center_;
  center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* SphereConstraint::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.SphereConstraint.center)
  
  ::improbable::platform::runtime::Coordinates* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* SphereConstraint::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Coordinates>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::improbable::platform::runtime::Coordinates* SphereConstraint::mutable_center() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.SphereConstraint.center)
  return _internal_mutable_center();
}
inline void SphereConstraint::set_allocated_center(::improbable::platform::runtime::Coordinates* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.SphereConstraint.center)
}

// double radius = 2;
inline void SphereConstraint::clear_radius() {
  radius_ = 0;
}
inline double SphereConstraint::_internal_radius() const {
  return radius_;
}
inline double SphereConstraint::radius() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.SphereConstraint.radius)
  return _internal_radius();
}
inline void SphereConstraint::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void SphereConstraint::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.SphereConstraint.radius)
}

// -------------------------------------------------------------------

// CylinderConstraint

// .improbable.platform.runtime.Coordinates center = 1;
inline bool CylinderConstraint::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool CylinderConstraint::has_center() const {
  return _internal_has_center();
}
inline void CylinderConstraint::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::improbable::platform::runtime::Coordinates& CylinderConstraint::_internal_center() const {
  const ::improbable::platform::runtime::Coordinates* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Coordinates&>(
      ::improbable::platform::runtime::_Coordinates_default_instance_);
}
inline const ::improbable::platform::runtime::Coordinates& CylinderConstraint::center() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.CylinderConstraint.center)
  return _internal_center();
}
inline void CylinderConstraint::unsafe_arena_set_allocated_center(
    ::improbable::platform::runtime::Coordinates* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.CylinderConstraint.center)
}
inline ::improbable::platform::runtime::Coordinates* CylinderConstraint::release_center() {
  
  ::improbable::platform::runtime::Coordinates* temp = center_;
  center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* CylinderConstraint::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.CylinderConstraint.center)
  
  ::improbable::platform::runtime::Coordinates* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* CylinderConstraint::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Coordinates>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::improbable::platform::runtime::Coordinates* CylinderConstraint::mutable_center() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.CylinderConstraint.center)
  return _internal_mutable_center();
}
inline void CylinderConstraint::set_allocated_center(::improbable::platform::runtime::Coordinates* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.CylinderConstraint.center)
}

// double radius = 2;
inline void CylinderConstraint::clear_radius() {
  radius_ = 0;
}
inline double CylinderConstraint::_internal_radius() const {
  return radius_;
}
inline double CylinderConstraint::radius() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.CylinderConstraint.radius)
  return _internal_radius();
}
inline void CylinderConstraint::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void CylinderConstraint::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.CylinderConstraint.radius)
}

// -------------------------------------------------------------------

// EntityIdConstraint

// .improbable.platform.runtime.EntityId entity_id = 1;
inline bool EntityIdConstraint::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool EntityIdConstraint::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::improbable::platform::runtime::EntityId& EntityIdConstraint::_internal_entity_id() const {
  const ::improbable::platform::runtime::EntityId* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::EntityId&>(
      ::improbable::platform::runtime::_EntityId_default_instance_);
}
inline const ::improbable::platform::runtime::EntityId& EntityIdConstraint::entity_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.EntityIdConstraint.entity_id)
  return _internal_entity_id();
}
inline void EntityIdConstraint::unsafe_arena_set_allocated_entity_id(
    ::improbable::platform::runtime::EntityId* entity_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.EntityIdConstraint.entity_id)
}
inline ::improbable::platform::runtime::EntityId* EntityIdConstraint::release_entity_id() {
  
  ::improbable::platform::runtime::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::EntityId* EntityIdConstraint::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.EntityIdConstraint.entity_id)
  
  ::improbable::platform::runtime::EntityId* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::EntityId* EntityIdConstraint::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::EntityId>(GetArena());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::improbable::platform::runtime::EntityId* EntityIdConstraint::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.EntityIdConstraint.entity_id)
  return _internal_mutable_entity_id();
}
inline void EntityIdConstraint::set_allocated_entity_id(::improbable::platform::runtime::EntityId* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id)->GetArena();
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.EntityIdConstraint.entity_id)
}

// -------------------------------------------------------------------

// ComponentConstraint

// uint32 component = 1;
inline void ComponentConstraint::clear_component() {
  component_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComponentConstraint::_internal_component() const {
  return component_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComponentConstraint::component() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.ComponentConstraint.component)
  return _internal_component();
}
inline void ComponentConstraint::_internal_set_component(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  component_ = value;
}
inline void ComponentConstraint::set_component(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.ComponentConstraint.component)
}

// -------------------------------------------------------------------

// AndConstraint

// repeated .improbable.platform.runtime.InspectionEntityQueryConstraint conjunct = 1;
inline int AndConstraint::_internal_conjunct_size() const {
  return conjunct_.size();
}
inline int AndConstraint::conjunct_size() const {
  return _internal_conjunct_size();
}
inline void AndConstraint::clear_conjunct() {
  conjunct_.Clear();
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* AndConstraint::mutable_conjunct(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.AndConstraint.conjunct)
  return conjunct_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >*
AndConstraint::mutable_conjunct() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.AndConstraint.conjunct)
  return &conjunct_;
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& AndConstraint::_internal_conjunct(int index) const {
  return conjunct_.Get(index);
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& AndConstraint::conjunct(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.AndConstraint.conjunct)
  return _internal_conjunct(index);
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* AndConstraint::_internal_add_conjunct() {
  return conjunct_.Add();
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* AndConstraint::add_conjunct() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.AndConstraint.conjunct)
  return _internal_add_conjunct();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >&
AndConstraint::conjunct() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.AndConstraint.conjunct)
  return conjunct_;
}

// -------------------------------------------------------------------

// OrConstraint

// repeated .improbable.platform.runtime.InspectionEntityQueryConstraint disjunct = 1;
inline int OrConstraint::_internal_disjunct_size() const {
  return disjunct_.size();
}
inline int OrConstraint::disjunct_size() const {
  return _internal_disjunct_size();
}
inline void OrConstraint::clear_disjunct() {
  disjunct_.Clear();
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* OrConstraint::mutable_disjunct(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.OrConstraint.disjunct)
  return disjunct_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >*
OrConstraint::mutable_disjunct() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.OrConstraint.disjunct)
  return &disjunct_;
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& OrConstraint::_internal_disjunct(int index) const {
  return disjunct_.Get(index);
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& OrConstraint::disjunct(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.OrConstraint.disjunct)
  return _internal_disjunct(index);
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* OrConstraint::_internal_add_disjunct() {
  return disjunct_.Add();
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* OrConstraint::add_disjunct() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.OrConstraint.disjunct)
  return _internal_add_disjunct();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::InspectionEntityQueryConstraint >&
OrConstraint::disjunct() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.OrConstraint.disjunct)
  return disjunct_;
}

// -------------------------------------------------------------------

// NotConstraint

// .improbable.platform.runtime.InspectionEntityQueryConstraint negated = 1;
inline bool NotConstraint::_internal_has_negated() const {
  return this != internal_default_instance() && negated_ != nullptr;
}
inline bool NotConstraint::has_negated() const {
  return _internal_has_negated();
}
inline void NotConstraint::clear_negated() {
  if (GetArena() == nullptr && negated_ != nullptr) {
    delete negated_;
  }
  negated_ = nullptr;
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& NotConstraint::_internal_negated() const {
  const ::improbable::platform::runtime::InspectionEntityQueryConstraint* p = negated_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::InspectionEntityQueryConstraint&>(
      ::improbable::platform::runtime::_InspectionEntityQueryConstraint_default_instance_);
}
inline const ::improbable::platform::runtime::InspectionEntityQueryConstraint& NotConstraint::negated() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.NotConstraint.negated)
  return _internal_negated();
}
inline void NotConstraint::unsafe_arena_set_allocated_negated(
    ::improbable::platform::runtime::InspectionEntityQueryConstraint* negated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(negated_);
  }
  negated_ = negated;
  if (negated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.NotConstraint.negated)
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* NotConstraint::release_negated() {
  
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* temp = negated_;
  negated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* NotConstraint::unsafe_arena_release_negated() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.NotConstraint.negated)
  
  ::improbable::platform::runtime::InspectionEntityQueryConstraint* temp = negated_;
  negated_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* NotConstraint::_internal_mutable_negated() {
  
  if (negated_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::InspectionEntityQueryConstraint>(GetArena());
    negated_ = p;
  }
  return negated_;
}
inline ::improbable::platform::runtime::InspectionEntityQueryConstraint* NotConstraint::mutable_negated() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.NotConstraint.negated)
  return _internal_mutable_negated();
}
inline void NotConstraint::set_allocated_negated(::improbable::platform::runtime::InspectionEntityQueryConstraint* negated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete negated_;
  }
  if (negated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(negated);
    if (message_arena != submessage_arena) {
      negated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negated, submessage_arena);
    }
    
  } else {
    
  }
  negated_ = negated;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.NotConstraint.negated)
}

// -------------------------------------------------------------------

// TrueConstraint

// -------------------------------------------------------------------

// FalseConstraint

// -------------------------------------------------------------------

// BoxConstraint

// .improbable.platform.runtime.Coordinates min = 1;
inline bool BoxConstraint::_internal_has_min() const {
  return this != internal_default_instance() && min_ != nullptr;
}
inline bool BoxConstraint::has_min() const {
  return _internal_has_min();
}
inline void BoxConstraint::clear_min() {
  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
}
inline const ::improbable::platform::runtime::Coordinates& BoxConstraint::_internal_min() const {
  const ::improbable::platform::runtime::Coordinates* p = min_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Coordinates&>(
      ::improbable::platform::runtime::_Coordinates_default_instance_);
}
inline const ::improbable::platform::runtime::Coordinates& BoxConstraint::min() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BoxConstraint.min)
  return _internal_min();
}
inline void BoxConstraint::unsafe_arena_set_allocated_min(
    ::improbable::platform::runtime::Coordinates* min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.BoxConstraint.min)
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::release_min() {
  
  ::improbable::platform::runtime::Coordinates* temp = min_;
  min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BoxConstraint.min)
  
  ::improbable::platform::runtime::Coordinates* temp = min_;
  min_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::_internal_mutable_min() {
  
  if (min_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Coordinates>(GetArena());
    min_ = p;
  }
  return min_;
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::mutable_min() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BoxConstraint.min)
  return _internal_mutable_min();
}
inline void BoxConstraint::set_allocated_min(::improbable::platform::runtime::Coordinates* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BoxConstraint.min)
}

// .improbable.platform.runtime.Coordinates max = 2;
inline bool BoxConstraint::_internal_has_max() const {
  return this != internal_default_instance() && max_ != nullptr;
}
inline bool BoxConstraint::has_max() const {
  return _internal_has_max();
}
inline void BoxConstraint::clear_max() {
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
inline const ::improbable::platform::runtime::Coordinates& BoxConstraint::_internal_max() const {
  const ::improbable::platform::runtime::Coordinates* p = max_;
  return p != nullptr ? *p : reinterpret_cast<const ::improbable::platform::runtime::Coordinates&>(
      ::improbable::platform::runtime::_Coordinates_default_instance_);
}
inline const ::improbable::platform::runtime::Coordinates& BoxConstraint::max() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.BoxConstraint.max)
  return _internal_max();
}
inline void BoxConstraint::unsafe_arena_set_allocated_max(
    ::improbable::platform::runtime::Coordinates* max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.BoxConstraint.max)
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::release_max() {
  
  ::improbable::platform::runtime::Coordinates* temp = max_;
  max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.BoxConstraint.max)
  
  ::improbable::platform::runtime::Coordinates* temp = max_;
  max_ = nullptr;
  return temp;
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::_internal_mutable_max() {
  
  if (max_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::platform::runtime::Coordinates>(GetArena());
    max_ = p;
  }
  return max_;
}
inline ::improbable::platform::runtime::Coordinates* BoxConstraint::mutable_max() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.BoxConstraint.max)
  return _internal_mutable_max();
}
inline void BoxConstraint::set_allocated_max(::improbable::platform::runtime::Coordinates* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.BoxConstraint.max)
}

// -------------------------------------------------------------------

// AuthorityConstraint

// string worker_id = 1;
inline void AuthorityConstraint::clear_worker_id() {
  worker_id_.ClearToEmpty();
}
inline const std::string& AuthorityConstraint::worker_id() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.AuthorityConstraint.worker_id)
  return _internal_worker_id();
}
inline void AuthorityConstraint::set_worker_id(const std::string& value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.AuthorityConstraint.worker_id)
}
inline std::string* AuthorityConstraint::mutable_worker_id() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.AuthorityConstraint.worker_id)
  return _internal_mutable_worker_id();
}
inline const std::string& AuthorityConstraint::_internal_worker_id() const {
  return worker_id_.Get();
}
inline void AuthorityConstraint::_internal_set_worker_id(const std::string& value) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AuthorityConstraint::set_worker_id(std::string&& value) {
  
  worker_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.AuthorityConstraint.worker_id)
}
inline void AuthorityConstraint::set_worker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.AuthorityConstraint.worker_id)
}
inline void AuthorityConstraint::set_worker_id(const char* value,
    size_t size) {
  
  worker_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.AuthorityConstraint.worker_id)
}
inline std::string* AuthorityConstraint::_internal_mutable_worker_id() {
  
  return worker_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AuthorityConstraint::release_worker_id() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.AuthorityConstraint.worker_id)
  return worker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthorityConstraint::set_allocated_worker_id(std::string* worker_id) {
  if (worker_id != nullptr) {
    
  } else {
    
  }
  worker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.AuthorityConstraint.worker_id)
}

// -------------------------------------------------------------------

// InspectionQueryResultType

// .improbable.platform.runtime.InspectionSnapshotResultType snapshot = 1;
inline bool InspectionQueryResultType::_internal_has_snapshot() const {
  return result_type_case() == kSnapshot;
}
inline bool InspectionQueryResultType::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void InspectionQueryResultType::set_has_snapshot() {
  _oneof_case_[0] = kSnapshot;
}
inline void InspectionQueryResultType::clear_snapshot() {
  if (_internal_has_snapshot()) {
    if (GetArena() == nullptr) {
      delete result_type_.snapshot_;
    }
    clear_has_result_type();
  }
}
inline ::improbable::platform::runtime::InspectionSnapshotResultType* InspectionQueryResultType::release_snapshot() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.InspectionQueryResultType.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_result_type();
      ::improbable::platform::runtime::InspectionSnapshotResultType* temp = result_type_.snapshot_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_type_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::platform::runtime::InspectionSnapshotResultType& InspectionQueryResultType::_internal_snapshot() const {
  return _internal_has_snapshot()
      ? *result_type_.snapshot_
      : reinterpret_cast< ::improbable::platform::runtime::InspectionSnapshotResultType&>(::improbable::platform::runtime::_InspectionSnapshotResultType_default_instance_);
}
inline const ::improbable::platform::runtime::InspectionSnapshotResultType& InspectionQueryResultType::snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionQueryResultType.snapshot)
  return _internal_snapshot();
}
inline ::improbable::platform::runtime::InspectionSnapshotResultType* InspectionQueryResultType::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.platform.runtime.InspectionQueryResultType.snapshot)
  if (_internal_has_snapshot()) {
    clear_has_result_type();
    ::improbable::platform::runtime::InspectionSnapshotResultType* temp = result_type_.snapshot_;
    result_type_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InspectionQueryResultType::unsafe_arena_set_allocated_snapshot(::improbable::platform::runtime::InspectionSnapshotResultType* snapshot) {
  clear_result_type();
  if (snapshot) {
    set_has_snapshot();
    result_type_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.platform.runtime.InspectionQueryResultType.snapshot)
}
inline ::improbable::platform::runtime::InspectionSnapshotResultType* InspectionQueryResultType::_internal_mutable_snapshot() {
  if (!_internal_has_snapshot()) {
    clear_result_type();
    set_has_snapshot();
    result_type_.snapshot_ = CreateMaybeMessage< ::improbable::platform::runtime::InspectionSnapshotResultType >(GetArena());
  }
  return result_type_.snapshot_;
}
inline ::improbable::platform::runtime::InspectionSnapshotResultType* InspectionQueryResultType::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.InspectionQueryResultType.snapshot)
  return _internal_mutable_snapshot();
}

inline bool InspectionQueryResultType::has_result_type() const {
  return result_type_case() != RESULT_TYPE_NOT_SET;
}
inline void InspectionQueryResultType::clear_has_result_type() {
  _oneof_case_[0] = RESULT_TYPE_NOT_SET;
}
inline InspectionQueryResultType::ResultTypeCase InspectionQueryResultType::result_type_case() const {
  return InspectionQueryResultType::ResultTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InspectionSnapshotResultType

// bool full_snapshot = 1;
inline void InspectionSnapshotResultType::clear_full_snapshot() {
  full_snapshot_ = false;
}
inline bool InspectionSnapshotResultType::_internal_full_snapshot() const {
  return full_snapshot_;
}
inline bool InspectionSnapshotResultType::full_snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionSnapshotResultType.full_snapshot)
  return _internal_full_snapshot();
}
inline void InspectionSnapshotResultType::_internal_set_full_snapshot(bool value) {
  
  full_snapshot_ = value;
}
inline void InspectionSnapshotResultType::set_full_snapshot(bool value) {
  _internal_set_full_snapshot(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionSnapshotResultType.full_snapshot)
}

// repeated uint32 component_id = 2;
inline int InspectionSnapshotResultType::_internal_component_id_size() const {
  return component_id_.size();
}
inline int InspectionSnapshotResultType::component_id_size() const {
  return _internal_component_id_size();
}
inline void InspectionSnapshotResultType::clear_component_id() {
  component_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectionSnapshotResultType::_internal_component_id(int index) const {
  return component_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InspectionSnapshotResultType::component_id(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionSnapshotResultType.component_id)
  return _internal_component_id(index);
}
inline void InspectionSnapshotResultType::set_component_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  component_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionSnapshotResultType.component_id)
}
inline void InspectionSnapshotResultType::_internal_add_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  component_id_.Add(value);
}
inline void InspectionSnapshotResultType::add_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_component_id(value);
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.InspectionSnapshotResultType.component_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InspectionSnapshotResultType::_internal_component_id() const {
  return component_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InspectionSnapshotResultType::component_id() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.InspectionSnapshotResultType.component_id)
  return _internal_component_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InspectionSnapshotResultType::_internal_mutable_component_id() {
  return &component_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InspectionSnapshotResultType::mutable_component_id() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.InspectionSnapshotResultType.component_id)
  return _internal_mutable_component_id();
}

// bool include_authority = 3;
inline void InspectionSnapshotResultType::clear_include_authority() {
  include_authority_ = false;
}
inline bool InspectionSnapshotResultType::_internal_include_authority() const {
  return include_authority_;
}
inline bool InspectionSnapshotResultType::include_authority() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.InspectionSnapshotResultType.include_authority)
  return _internal_include_authority();
}
inline void InspectionSnapshotResultType::_internal_set_include_authority(bool value) {
  
  include_authority_ = value;
}
inline void InspectionSnapshotResultType::set_include_authority(bool value) {
  _internal_set_include_authority(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.InspectionSnapshotResultType.include_authority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace runtime
}  // namespace platform
}  // namespace improbable

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runtime_2fquery_2eproto

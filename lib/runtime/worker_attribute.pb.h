// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime/worker_attribute.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runtime_2fworker_5fattribute_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runtime_2fworker_5fattribute_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runtime_2fworker_5fattribute_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runtime_2fworker_5fattribute_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runtime_2fworker_5fattribute_2eproto;
namespace improbable {
namespace platform {
namespace runtime {
class WorkerAttribute;
class WorkerAttributeDefaultTypeInternal;
extern WorkerAttributeDefaultTypeInternal _WorkerAttribute_default_instance_;
class WorkerAttributeSet;
class WorkerAttributeSetDefaultTypeInternal;
extern WorkerAttributeSetDefaultTypeInternal _WorkerAttributeSet_default_instance_;
}  // namespace runtime
}  // namespace platform
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::platform::runtime::WorkerAttribute* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerAttribute>(Arena*);
template<> ::improbable::platform::runtime::WorkerAttributeSet* Arena::CreateMaybeMessage<::improbable::platform::runtime::WorkerAttributeSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace platform {
namespace runtime {

// ===================================================================

class WorkerAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerAttribute) */ {
 public:
  inline WorkerAttribute() : WorkerAttribute(nullptr) {}
  virtual ~WorkerAttribute();

  WorkerAttribute(const WorkerAttribute& from);
  WorkerAttribute(WorkerAttribute&& from) noexcept
    : WorkerAttribute() {
    *this = ::std::move(from);
  }

  inline WorkerAttribute& operator=(const WorkerAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerAttribute& operator=(WorkerAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerAttribute& default_instance();

  static inline const WorkerAttribute* internal_default_instance() {
    return reinterpret_cast<const WorkerAttribute*>(
               &_WorkerAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkerAttribute& a, WorkerAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerAttribute* New() const final {
    return CreateMaybeMessage<WorkerAttribute>(nullptr);
  }

  WorkerAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerAttribute& from);
  void MergeFrom(const WorkerAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerAttribute";
  }
  protected:
  explicit WorkerAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fworker_5fattribute_2eproto);
    return ::descriptor_table_runtime_2fworker_5fattribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fworker_5fattribute_2eproto;
};
// -------------------------------------------------------------------

class WorkerAttributeSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.platform.runtime.WorkerAttributeSet) */ {
 public:
  inline WorkerAttributeSet() : WorkerAttributeSet(nullptr) {}
  virtual ~WorkerAttributeSet();

  WorkerAttributeSet(const WorkerAttributeSet& from);
  WorkerAttributeSet(WorkerAttributeSet&& from) noexcept
    : WorkerAttributeSet() {
    *this = ::std::move(from);
  }

  inline WorkerAttributeSet& operator=(const WorkerAttributeSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerAttributeSet& operator=(WorkerAttributeSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerAttributeSet& default_instance();

  static inline const WorkerAttributeSet* internal_default_instance() {
    return reinterpret_cast<const WorkerAttributeSet*>(
               &_WorkerAttributeSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkerAttributeSet& a, WorkerAttributeSet& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerAttributeSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerAttributeSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerAttributeSet* New() const final {
    return CreateMaybeMessage<WorkerAttributeSet>(nullptr);
  }

  WorkerAttributeSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerAttributeSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerAttributeSet& from);
  void MergeFrom(const WorkerAttributeSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerAttributeSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.platform.runtime.WorkerAttributeSet";
  }
  protected:
  explicit WorkerAttributeSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runtime_2fworker_5fattribute_2eproto);
    return ::descriptor_table_runtime_2fworker_5fattribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
  };
  // repeated .improbable.platform.runtime.WorkerAttribute attribute = 1;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::improbable::platform::runtime::WorkerAttribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerAttribute >*
      mutable_attribute();
  private:
  const ::improbable::platform::runtime::WorkerAttribute& _internal_attribute(int index) const;
  ::improbable::platform::runtime::WorkerAttribute* _internal_add_attribute();
  public:
  const ::improbable::platform::runtime::WorkerAttribute& attribute(int index) const;
  ::improbable::platform::runtime::WorkerAttribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerAttribute >&
      attribute() const;

  // @@protoc_insertion_point(class_scope:improbable.platform.runtime.WorkerAttributeSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerAttribute > attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_runtime_2fworker_5fattribute_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkerAttribute

// string name = 1;
inline void WorkerAttribute::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WorkerAttribute::name() const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerAttribute.name)
  return _internal_name();
}
inline void WorkerAttribute::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.platform.runtime.WorkerAttribute.name)
}
inline std::string* WorkerAttribute::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerAttribute.name)
  return _internal_mutable_name();
}
inline const std::string& WorkerAttribute::_internal_name() const {
  return name_.Get();
}
inline void WorkerAttribute::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkerAttribute::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.platform.runtime.WorkerAttribute.name)
}
inline void WorkerAttribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.platform.runtime.WorkerAttribute.name)
}
inline void WorkerAttribute::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.platform.runtime.WorkerAttribute.name)
}
inline std::string* WorkerAttribute::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkerAttribute::release_name() {
  // @@protoc_insertion_point(field_release:improbable.platform.runtime.WorkerAttribute.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerAttribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.platform.runtime.WorkerAttribute.name)
}

// -------------------------------------------------------------------

// WorkerAttributeSet

// repeated .improbable.platform.runtime.WorkerAttribute attribute = 1;
inline int WorkerAttributeSet::_internal_attribute_size() const {
  return attribute_.size();
}
inline int WorkerAttributeSet::attribute_size() const {
  return _internal_attribute_size();
}
inline void WorkerAttributeSet::clear_attribute() {
  attribute_.Clear();
}
inline ::improbable::platform::runtime::WorkerAttribute* WorkerAttributeSet::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.platform.runtime.WorkerAttributeSet.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerAttribute >*
WorkerAttributeSet::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:improbable.platform.runtime.WorkerAttributeSet.attribute)
  return &attribute_;
}
inline const ::improbable::platform::runtime::WorkerAttribute& WorkerAttributeSet::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::improbable::platform::runtime::WorkerAttribute& WorkerAttributeSet::attribute(int index) const {
  // @@protoc_insertion_point(field_get:improbable.platform.runtime.WorkerAttributeSet.attribute)
  return _internal_attribute(index);
}
inline ::improbable::platform::runtime::WorkerAttribute* WorkerAttributeSet::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::improbable::platform::runtime::WorkerAttribute* WorkerAttributeSet::add_attribute() {
  // @@protoc_insertion_point(field_add:improbable.platform.runtime.WorkerAttributeSet.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::platform::runtime::WorkerAttribute >&
WorkerAttributeSet::attribute() const {
  // @@protoc_insertion_point(field_list:improbable.platform.runtime.WorkerAttributeSet.attribute)
  return attribute_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace runtime
}  // namespace platform
}  // namespace improbable

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runtime_2fworker_5fattribute_2eproto

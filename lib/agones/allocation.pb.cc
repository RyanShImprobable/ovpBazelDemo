// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agones/allocation.proto

#include "agones/allocation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelSelector_agones_2fallocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSelector_MatchLabelsEntry_DoNotUse_agones_2fallocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MetaPatch_agones_2fallocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaPatch_AnnotationsEntry_DoNotUse_agones_2fallocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaPatch_LabelsEntry_DoNotUse_agones_2fallocation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_agones_2fallocation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiClusterSetting_agones_2fallocation_2eproto;
namespace allocation {
class AllocationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocationRequest> _instance;
} _AllocationRequest_default_instance_;
class AllocationResponse_GameServerStatusPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocationResponse_GameServerStatusPort> _instance;
} _AllocationResponse_GameServerStatusPort_default_instance_;
class AllocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocationResponse> _instance;
} _AllocationResponse_default_instance_;
class MultiClusterSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiClusterSetting> _instance;
} _MultiClusterSetting_default_instance_;
class MetaPatch_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaPatch_LabelsEntry_DoNotUse> _instance;
} _MetaPatch_LabelsEntry_DoNotUse_default_instance_;
class MetaPatch_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaPatch_AnnotationsEntry_DoNotUse> _instance;
} _MetaPatch_AnnotationsEntry_DoNotUse_default_instance_;
class MetaPatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaPatch> _instance;
} _MetaPatch_default_instance_;
class LabelSelector_MatchLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelSelector_MatchLabelsEntry_DoNotUse> _instance;
} _LabelSelector_MatchLabelsEntry_DoNotUse_default_instance_;
class LabelSelectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelSelector> _instance;
} _LabelSelector_default_instance_;
}  // namespace allocation
static void InitDefaultsscc_info_AllocationRequest_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_AllocationRequest_default_instance_;
    new (ptr) ::allocation::AllocationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AllocationRequest_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AllocationRequest_agones_2fallocation_2eproto}, {
      &scc_info_MultiClusterSetting_agones_2fallocation_2eproto.base,
      &scc_info_LabelSelector_agones_2fallocation_2eproto.base,
      &scc_info_MetaPatch_agones_2fallocation_2eproto.base,}};

static void InitDefaultsscc_info_AllocationResponse_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_AllocationResponse_default_instance_;
    new (ptr) ::allocation::AllocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocationResponse_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllocationResponse_agones_2fallocation_2eproto}, {
      &scc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto.base,}};

static void InitDefaultsscc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_AllocationResponse_GameServerStatusPort_default_instance_;
    new (ptr) ::allocation::AllocationResponse_GameServerStatusPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto}, {}};

static void InitDefaultsscc_info_LabelSelector_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_LabelSelector_default_instance_;
    new (ptr) ::allocation::LabelSelector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabelSelector_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabelSelector_agones_2fallocation_2eproto}, {
      &scc_info_LabelSelector_MatchLabelsEntry_DoNotUse_agones_2fallocation_2eproto.base,}};

static void InitDefaultsscc_info_LabelSelector_MatchLabelsEntry_DoNotUse_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_LabelSelector_MatchLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::allocation::LabelSelector_MatchLabelsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelSelector_MatchLabelsEntry_DoNotUse_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelSelector_MatchLabelsEntry_DoNotUse_agones_2fallocation_2eproto}, {}};

static void InitDefaultsscc_info_MetaPatch_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_MetaPatch_default_instance_;
    new (ptr) ::allocation::MetaPatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MetaPatch_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MetaPatch_agones_2fallocation_2eproto}, {
      &scc_info_MetaPatch_LabelsEntry_DoNotUse_agones_2fallocation_2eproto.base,
      &scc_info_MetaPatch_AnnotationsEntry_DoNotUse_agones_2fallocation_2eproto.base,}};

static void InitDefaultsscc_info_MetaPatch_AnnotationsEntry_DoNotUse_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_MetaPatch_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::allocation::MetaPatch_AnnotationsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaPatch_AnnotationsEntry_DoNotUse_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetaPatch_AnnotationsEntry_DoNotUse_agones_2fallocation_2eproto}, {}};

static void InitDefaultsscc_info_MetaPatch_LabelsEntry_DoNotUse_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_MetaPatch_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::allocation::MetaPatch_LabelsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaPatch_LabelsEntry_DoNotUse_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetaPatch_LabelsEntry_DoNotUse_agones_2fallocation_2eproto}, {}};

static void InitDefaultsscc_info_MultiClusterSetting_agones_2fallocation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::allocation::_MultiClusterSetting_default_instance_;
    new (ptr) ::allocation::MultiClusterSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiClusterSetting_agones_2fallocation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiClusterSetting_agones_2fallocation_2eproto}, {
      &scc_info_LabelSelector_agones_2fallocation_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_agones_2fallocation_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_agones_2fallocation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_agones_2fallocation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_agones_2fallocation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, multiclustersetting_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, requiredgameserverselector_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, preferredgameserverselectors_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, scheduling_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationRequest, metapatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse_GameServerStatusPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse_GameServerStatusPort, name_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse_GameServerStatusPort, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse, gameservername_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse, ports_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse, address_),
  PROTOBUF_FIELD_OFFSET(::allocation::AllocationResponse, nodename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::allocation::MultiClusterSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::MultiClusterSetting, enabled_),
  PROTOBUF_FIELD_OFFSET(::allocation::MultiClusterSetting, policyselector_),
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch, labels_),
  PROTOBUF_FIELD_OFFSET(::allocation::MetaPatch, annotations_),
  PROTOBUF_FIELD_OFFSET(::allocation::LabelSelector_MatchLabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::allocation::LabelSelector_MatchLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::LabelSelector_MatchLabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::allocation::LabelSelector_MatchLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::allocation::LabelSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::allocation::LabelSelector, matchlabels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::allocation::AllocationRequest)},
  { 11, -1, sizeof(::allocation::AllocationResponse_GameServerStatusPort)},
  { 18, -1, sizeof(::allocation::AllocationResponse)},
  { 27, -1, sizeof(::allocation::MultiClusterSetting)},
  { 34, 41, sizeof(::allocation::MetaPatch_LabelsEntry_DoNotUse)},
  { 43, 50, sizeof(::allocation::MetaPatch_AnnotationsEntry_DoNotUse)},
  { 52, -1, sizeof(::allocation::MetaPatch)},
  { 59, 66, sizeof(::allocation::LabelSelector_MatchLabelsEntry_DoNotUse)},
  { 68, -1, sizeof(::allocation::LabelSelector)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_AllocationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_AllocationResponse_GameServerStatusPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_AllocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_MultiClusterSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_MetaPatch_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_MetaPatch_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_MetaPatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_LabelSelector_MatchLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::allocation::_LabelSelector_default_instance_),
};

const char descriptor_table_protodef_agones_2fallocation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027agones/allocation.proto\022\nallocation\032\034g"
  "oogle/api/annotations.proto\"\207\003\n\021Allocati"
  "onRequest\022\021\n\tnamespace\030\001 \001(\t\022<\n\023multiClu"
  "sterSetting\030\002 \001(\0132\037.allocation.MultiClus"
  "terSetting\022=\n\032requiredGameServerSelector"
  "\030\003 \001(\0132\031.allocation.LabelSelector\022\?\n\034pre"
  "ferredGameServerSelectors\030\004 \003(\0132\031.alloca"
  "tion.LabelSelector\022D\n\nscheduling\030\005 \001(\01620"
  ".allocation.AllocationRequest.Scheduling"
  "Strategy\022(\n\tmetaPatch\030\006 \001(\0132\025.allocation"
  ".MetaPatch\"1\n\022SchedulingStrategy\022\n\n\006Pack"
  "ed\020\000\022\017\n\013Distributed\020\001\"\307\001\n\022AllocationResp"
  "onse\022\026\n\016gameServerName\030\002 \001(\t\022B\n\005ports\030\003 "
  "\003(\01323.allocation.AllocationResponse.Game"
  "ServerStatusPort\022\017\n\007address\030\004 \001(\t\022\020\n\010nod"
  "eName\030\005 \001(\t\0322\n\024GameServerStatusPort\022\014\n\004n"
  "ame\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"Y\n\023MultiClusterS"
  "etting\022\017\n\007enabled\030\001 \001(\010\0221\n\016policySelecto"
  "r\030\002 \001(\0132\031.allocation.LabelSelector\"\336\001\n\tM"
  "etaPatch\0221\n\006labels\030\001 \003(\0132!.allocation.Me"
  "taPatch.LabelsEntry\022;\n\013annotations\030\002 \003(\013"
  "2&.allocation.MetaPatch.AnnotationsEntry"
  "\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\0322\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"\204\001\n\rLabelSelector\022\?\n"
  "\013matchLabels\030\001 \003(\0132*.allocation.LabelSel"
  "ector.MatchLabelsEntry\0322\n\020MatchLabelsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\0012\200\001\n\021A"
  "llocationService\022k\n\010Allocate\022\035.allocatio"
  "n.AllocationRequest\032\036.allocation.Allocat"
  "ionResponse\" \202\323\344\223\002\032\"\025/gameserverallocati"
  "on:\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_agones_2fallocation_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_agones_2fallocation_2eproto_sccs[9] = {
  &scc_info_AllocationRequest_agones_2fallocation_2eproto.base,
  &scc_info_AllocationResponse_agones_2fallocation_2eproto.base,
  &scc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto.base,
  &scc_info_LabelSelector_agones_2fallocation_2eproto.base,
  &scc_info_LabelSelector_MatchLabelsEntry_DoNotUse_agones_2fallocation_2eproto.base,
  &scc_info_MetaPatch_agones_2fallocation_2eproto.base,
  &scc_info_MetaPatch_AnnotationsEntry_DoNotUse_agones_2fallocation_2eproto.base,
  &scc_info_MetaPatch_LabelsEntry_DoNotUse_agones_2fallocation_2eproto.base,
  &scc_info_MultiClusterSetting_agones_2fallocation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_agones_2fallocation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agones_2fallocation_2eproto = {
  false, false, descriptor_table_protodef_agones_2fallocation_2eproto, "agones/allocation.proto", 1253,
  &descriptor_table_agones_2fallocation_2eproto_once, descriptor_table_agones_2fallocation_2eproto_sccs, descriptor_table_agones_2fallocation_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_agones_2fallocation_2eproto::offsets,
  file_level_metadata_agones_2fallocation_2eproto, 9, file_level_enum_descriptors_agones_2fallocation_2eproto, file_level_service_descriptors_agones_2fallocation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_agones_2fallocation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_agones_2fallocation_2eproto)), true);
namespace allocation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllocationRequest_SchedulingStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_agones_2fallocation_2eproto);
  return file_level_enum_descriptors_agones_2fallocation_2eproto[0];
}
bool AllocationRequest_SchedulingStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AllocationRequest_SchedulingStrategy AllocationRequest::Packed;
constexpr AllocationRequest_SchedulingStrategy AllocationRequest::Distributed;
constexpr AllocationRequest_SchedulingStrategy AllocationRequest::SchedulingStrategy_MIN;
constexpr AllocationRequest_SchedulingStrategy AllocationRequest::SchedulingStrategy_MAX;
constexpr int AllocationRequest::SchedulingStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class AllocationRequest::_Internal {
 public:
  static const ::allocation::MultiClusterSetting& multiclustersetting(const AllocationRequest* msg);
  static const ::allocation::LabelSelector& requiredgameserverselector(const AllocationRequest* msg);
  static const ::allocation::MetaPatch& metapatch(const AllocationRequest* msg);
};

const ::allocation::MultiClusterSetting&
AllocationRequest::_Internal::multiclustersetting(const AllocationRequest* msg) {
  return *msg->multiclustersetting_;
}
const ::allocation::LabelSelector&
AllocationRequest::_Internal::requiredgameserverselector(const AllocationRequest* msg) {
  return *msg->requiredgameserverselector_;
}
const ::allocation::MetaPatch&
AllocationRequest::_Internal::metapatch(const AllocationRequest* msg) {
  return *msg->metapatch_;
}
AllocationRequest::AllocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preferredgameserverselectors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allocation.AllocationRequest)
}
AllocationRequest::AllocationRequest(const AllocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preferredgameserverselectors_(from.preferredgameserverselectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArena());
  }
  if (from._internal_has_multiclustersetting()) {
    multiclustersetting_ = new ::allocation::MultiClusterSetting(*from.multiclustersetting_);
  } else {
    multiclustersetting_ = nullptr;
  }
  if (from._internal_has_requiredgameserverselector()) {
    requiredgameserverselector_ = new ::allocation::LabelSelector(*from.requiredgameserverselector_);
  } else {
    requiredgameserverselector_ = nullptr;
  }
  if (from._internal_has_metapatch()) {
    metapatch_ = new ::allocation::MetaPatch(*from.metapatch_);
  } else {
    metapatch_ = nullptr;
  }
  scheduling_ = from.scheduling_;
  // @@protoc_insertion_point(copy_constructor:allocation.AllocationRequest)
}

void AllocationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocationRequest_agones_2fallocation_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&multiclustersetting_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scheduling_) -
      reinterpret_cast<char*>(&multiclustersetting_)) + sizeof(scheduling_));
}

AllocationRequest::~AllocationRequest() {
  // @@protoc_insertion_point(destructor:allocation.AllocationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete multiclustersetting_;
  if (this != internal_default_instance()) delete requiredgameserverselector_;
  if (this != internal_default_instance()) delete metapatch_;
}

void AllocationRequest::ArenaDtor(void* object) {
  AllocationRequest* _this = reinterpret_cast< AllocationRequest* >(object);
  (void)_this;
}
void AllocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocationRequest& AllocationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocationRequest_agones_2fallocation_2eproto.base);
  return *internal_default_instance();
}


void AllocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:allocation.AllocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferredgameserverselectors_.Clear();
  namespace__.ClearToEmpty();
  if (GetArena() == nullptr && multiclustersetting_ != nullptr) {
    delete multiclustersetting_;
  }
  multiclustersetting_ = nullptr;
  if (GetArena() == nullptr && requiredgameserverselector_ != nullptr) {
    delete requiredgameserverselector_;
  }
  requiredgameserverselector_ = nullptr;
  if (GetArena() == nullptr && metapatch_ != nullptr) {
    delete metapatch_;
  }
  metapatch_ = nullptr;
  scheduling_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "allocation.AllocationRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .allocation.MultiClusterSetting multiClusterSetting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiclustersetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .allocation.LabelSelector requiredGameServerSelector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_requiredgameserverselector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .allocation.LabelSelector preferredGameServerSelectors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preferredgameserverselectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .allocation.AllocationRequest.SchedulingStrategy scheduling = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduling(static_cast<::allocation::AllocationRequest_SchedulingStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .allocation.MetaPatch metaPatch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_metapatch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:allocation.AllocationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "allocation.AllocationRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // .allocation.MultiClusterSetting multiClusterSetting = 2;
  if (this->has_multiclustersetting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multiclustersetting(this), target, stream);
  }

  // .allocation.LabelSelector requiredGameServerSelector = 3;
  if (this->has_requiredgameserverselector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::requiredgameserverselector(this), target, stream);
  }

  // repeated .allocation.LabelSelector preferredGameServerSelectors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preferredgameserverselectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_preferredgameserverselectors(i), target, stream);
  }

  // .allocation.AllocationRequest.SchedulingStrategy scheduling = 5;
  if (this->scheduling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_scheduling(), target);
  }

  // .allocation.MetaPatch metaPatch = 6;
  if (this->has_metapatch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::metapatch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:allocation.AllocationRequest)
  return target;
}

size_t AllocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allocation.AllocationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .allocation.LabelSelector preferredGameServerSelectors = 4;
  total_size += 1UL * this->_internal_preferredgameserverselectors_size();
  for (const auto& msg : this->preferredgameserverselectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string namespace = 1;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // .allocation.MultiClusterSetting multiClusterSetting = 2;
  if (this->has_multiclustersetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multiclustersetting_);
  }

  // .allocation.LabelSelector requiredGameServerSelector = 3;
  if (this->has_requiredgameserverselector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requiredgameserverselector_);
  }

  // .allocation.MetaPatch metaPatch = 6;
  if (this->has_metapatch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metapatch_);
  }

  // .allocation.AllocationRequest.SchedulingStrategy scheduling = 5;
  if (this->scheduling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduling());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allocation.AllocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allocation.AllocationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allocation.AllocationRequest)
    MergeFrom(*source);
  }
}

void AllocationRequest::MergeFrom(const AllocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allocation.AllocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferredgameserverselectors_.MergeFrom(from.preferredgameserverselectors_);
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.has_multiclustersetting()) {
    _internal_mutable_multiclustersetting()->::allocation::MultiClusterSetting::MergeFrom(from._internal_multiclustersetting());
  }
  if (from.has_requiredgameserverselector()) {
    _internal_mutable_requiredgameserverselector()->::allocation::LabelSelector::MergeFrom(from._internal_requiredgameserverselector());
  }
  if (from.has_metapatch()) {
    _internal_mutable_metapatch()->::allocation::MetaPatch::MergeFrom(from._internal_metapatch());
  }
  if (from.scheduling() != 0) {
    _internal_set_scheduling(from._internal_scheduling());
  }
}

void AllocationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allocation.AllocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocationRequest::CopyFrom(const AllocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allocation.AllocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocationRequest::IsInitialized() const {
  return true;
}

void AllocationRequest::InternalSwap(AllocationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  preferredgameserverselectors_.InternalSwap(&other->preferredgameserverselectors_);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocationRequest, scheduling_)
      + sizeof(AllocationRequest::scheduling_)
      - PROTOBUF_FIELD_OFFSET(AllocationRequest, multiclustersetting_)>(
          reinterpret_cast<char*>(&multiclustersetting_),
          reinterpret_cast<char*>(&other->multiclustersetting_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllocationResponse_GameServerStatusPort::_Internal {
 public:
};

AllocationResponse_GameServerStatusPort::AllocationResponse_GameServerStatusPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allocation.AllocationResponse.GameServerStatusPort)
}
AllocationResponse_GameServerStatusPort::AllocationResponse_GameServerStatusPort(const AllocationResponse_GameServerStatusPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:allocation.AllocationResponse.GameServerStatusPort)
}

void AllocationResponse_GameServerStatusPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

AllocationResponse_GameServerStatusPort::~AllocationResponse_GameServerStatusPort() {
  // @@protoc_insertion_point(destructor:allocation.AllocationResponse.GameServerStatusPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocationResponse_GameServerStatusPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllocationResponse_GameServerStatusPort::ArenaDtor(void* object) {
  AllocationResponse_GameServerStatusPort* _this = reinterpret_cast< AllocationResponse_GameServerStatusPort* >(object);
  (void)_this;
}
void AllocationResponse_GameServerStatusPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocationResponse_GameServerStatusPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocationResponse_GameServerStatusPort& AllocationResponse_GameServerStatusPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocationResponse_GameServerStatusPort_agones_2fallocation_2eproto.base);
  return *internal_default_instance();
}


void AllocationResponse_GameServerStatusPort::Clear() {
// @@protoc_insertion_point(message_clear_start:allocation.AllocationResponse.GameServerStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocationResponse_GameServerStatusPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "allocation.AllocationResponse.GameServerStatusPort.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocationResponse_GameServerStatusPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:allocation.AllocationResponse.GameServerStatusPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "allocation.AllocationResponse.GameServerStatusPort.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:allocation.AllocationResponse.GameServerStatusPort)
  return target;
}

size_t AllocationResponse_GameServerStatusPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allocation.AllocationResponse.GameServerStatusPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocationResponse_GameServerStatusPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allocation.AllocationResponse.GameServerStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocationResponse_GameServerStatusPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocationResponse_GameServerStatusPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allocation.AllocationResponse.GameServerStatusPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allocation.AllocationResponse.GameServerStatusPort)
    MergeFrom(*source);
  }
}

void AllocationResponse_GameServerStatusPort::MergeFrom(const AllocationResponse_GameServerStatusPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allocation.AllocationResponse.GameServerStatusPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void AllocationResponse_GameServerStatusPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allocation.AllocationResponse.GameServerStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocationResponse_GameServerStatusPort::CopyFrom(const AllocationResponse_GameServerStatusPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allocation.AllocationResponse.GameServerStatusPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocationResponse_GameServerStatusPort::IsInitialized() const {
  return true;
}

void AllocationResponse_GameServerStatusPort::InternalSwap(AllocationResponse_GameServerStatusPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocationResponse_GameServerStatusPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AllocationResponse::_Internal {
 public:
};

AllocationResponse::AllocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allocation.AllocationResponse)
}
AllocationResponse::AllocationResponse(const AllocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameservername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gameservername().empty()) {
    gameservername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameservername(), 
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:allocation.AllocationResponse)
}

void AllocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocationResponse_agones_2fallocation_2eproto.base);
  gameservername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AllocationResponse::~AllocationResponse() {
  // @@protoc_insertion_point(destructor:allocation.AllocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gameservername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllocationResponse::ArenaDtor(void* object) {
  AllocationResponse* _this = reinterpret_cast< AllocationResponse* >(object);
  (void)_this;
}
void AllocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocationResponse& AllocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocationResponse_agones_2fallocation_2eproto.base);
  return *internal_default_instance();
}


void AllocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:allocation.AllocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  gameservername_.ClearToEmpty();
  address_.ClearToEmpty();
  nodename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gameServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gameservername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "allocation.AllocationResponse.gameServerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .allocation.AllocationResponse.GameServerStatusPort ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "allocation.AllocationResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "allocation.AllocationResponse.nodeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:allocation.AllocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameServerName = 2;
  if (this->gameservername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameservername().data(), static_cast<int>(this->_internal_gameservername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "allocation.AllocationResponse.gameServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gameservername(), target);
  }

  // repeated .allocation.AllocationResponse.GameServerStatusPort ports = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ports(i), target, stream);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "allocation.AllocationResponse.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // string nodeName = 5;
  if (this->nodename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "allocation.AllocationResponse.nodeName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nodename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:allocation.AllocationResponse)
  return target;
}

size_t AllocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allocation.AllocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .allocation.AllocationResponse.GameServerStatusPort ports = 3;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gameServerName = 2;
  if (this->gameservername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameservername());
  }

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string nodeName = 5;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allocation.AllocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allocation.AllocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allocation.AllocationResponse)
    MergeFrom(*source);
  }
}

void AllocationResponse::MergeFrom(const AllocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allocation.AllocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.gameservername().size() > 0) {
    _internal_set_gameservername(from._internal_gameservername());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.nodename().size() > 0) {
    _internal_set_nodename(from._internal_nodename());
  }
}

void AllocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allocation.AllocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocationResponse::CopyFrom(const AllocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allocation.AllocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocationResponse::IsInitialized() const {
  return true;
}

void AllocationResponse::InternalSwap(AllocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  gameservername_.Swap(&other->gameservername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nodename_.Swap(&other->nodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MultiClusterSetting::_Internal {
 public:
  static const ::allocation::LabelSelector& policyselector(const MultiClusterSetting* msg);
};

const ::allocation::LabelSelector&
MultiClusterSetting::_Internal::policyselector(const MultiClusterSetting* msg) {
  return *msg->policyselector_;
}
MultiClusterSetting::MultiClusterSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allocation.MultiClusterSetting)
}
MultiClusterSetting::MultiClusterSetting(const MultiClusterSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_policyselector()) {
    policyselector_ = new ::allocation::LabelSelector(*from.policyselector_);
  } else {
    policyselector_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:allocation.MultiClusterSetting)
}

void MultiClusterSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiClusterSetting_agones_2fallocation_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&policyselector_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&policyselector_)) + sizeof(enabled_));
}

MultiClusterSetting::~MultiClusterSetting() {
  // @@protoc_insertion_point(destructor:allocation.MultiClusterSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiClusterSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete policyselector_;
}

void MultiClusterSetting::ArenaDtor(void* object) {
  MultiClusterSetting* _this = reinterpret_cast< MultiClusterSetting* >(object);
  (void)_this;
}
void MultiClusterSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiClusterSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiClusterSetting& MultiClusterSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiClusterSetting_agones_2fallocation_2eproto.base);
  return *internal_default_instance();
}


void MultiClusterSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:allocation.MultiClusterSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && policyselector_ != nullptr) {
    delete policyselector_;
  }
  policyselector_ = nullptr;
  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiClusterSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .allocation.LabelSelector policySelector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policyselector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiClusterSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:allocation.MultiClusterSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .allocation.LabelSelector policySelector = 2;
  if (this->has_policyselector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policyselector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:allocation.MultiClusterSetting)
  return target;
}

size_t MultiClusterSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allocation.MultiClusterSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .allocation.LabelSelector policySelector = 2;
  if (this->has_policyselector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policyselector_);
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiClusterSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allocation.MultiClusterSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiClusterSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiClusterSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allocation.MultiClusterSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allocation.MultiClusterSetting)
    MergeFrom(*source);
  }
}

void MultiClusterSetting::MergeFrom(const MultiClusterSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allocation.MultiClusterSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policyselector()) {
    _internal_mutable_policyselector()->::allocation::LabelSelector::MergeFrom(from._internal_policyselector());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void MultiClusterSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allocation.MultiClusterSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiClusterSetting::CopyFrom(const MultiClusterSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allocation.MultiClusterSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiClusterSetting::IsInitialized() const {
  return true;
}

void MultiClusterSetting::InternalSwap(MultiClusterSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiClusterSetting, enabled_)
      + sizeof(MultiClusterSetting::enabled_)
      - PROTOBUF_FIELD_OFFSET(MultiClusterSetting, policyselector_)>(
          reinterpret_cast<char*>(&policyselector_),
          reinterpret_cast<char*>(&other->policyselector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiClusterSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MetaPatch_LabelsEntry_DoNotUse::MetaPatch_LabelsEntry_DoNotUse() {}
MetaPatch_LabelsEntry_DoNotUse::MetaPatch_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaPatch_LabelsEntry_DoNotUse::MergeFrom(const MetaPatch_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaPatch_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MetaPatch_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MetaPatch_AnnotationsEntry_DoNotUse::MetaPatch_AnnotationsEntry_DoNotUse() {}
MetaPatch_AnnotationsEntry_DoNotUse::MetaPatch_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaPatch_AnnotationsEntry_DoNotUse::MergeFrom(const MetaPatch_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaPatch_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MetaPatch_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MetaPatch::_Internal {
 public:
};

MetaPatch::MetaPatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allocation.MetaPatch)
}
MetaPatch::MetaPatch(const MetaPatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  // @@protoc_insertion_point(copy_constructor:allocation.MetaPatch)
}

void MetaPatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaPatch_agones_2fallocation_2eproto.base);
}

MetaPatch::~MetaPatch() {
  // @@protoc_insertion_point(destructor:allocation.MetaPatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetaPatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetaPatch::ArenaDtor(void* object) {
  MetaPatch* _this = reinterpret_cast< MetaPatch* >(object);
  (void)_this;
}
void MetaPatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaPatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaPatch& MetaPatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaPatch_agones_2fallocation_2eproto.base);
  return *internal_default_instance();
}


void MetaPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:allocation.MetaPatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaPatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaPatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:allocation.MetaPatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "allocation.MetaPatch.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "allocation.MetaPatch.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MetaPatch_LabelsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = MetaPatch_LabelsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> annotations = 2;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "allocation.MetaPatch.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "allocation.MetaPatch.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MetaPatch_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = MetaPatch_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:allocation.MetaPatch)
  return target;
}

size_t MetaPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allocation.MetaPatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += MetaPatch_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += MetaPatch_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaPatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allocation.MetaPatch)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaPatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaPatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allocation.MetaPatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allocation.MetaPatch)
    MergeFrom(*source);
  }
}

void MetaPatch::MergeFrom(const MetaPatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allocation.MetaPatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
}

void MetaPatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allocation.MetaPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaPatch::CopyFrom(const MetaPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allocation.MetaPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaPatch::IsInitialized() const {
  return true;
}

void MetaPatch::InternalSwap(MetaPatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaPatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LabelSelector_MatchLabelsEntry_DoNotUse::LabelSelector_MatchLabelsEntry_DoNotUse() {}
LabelSelector_MatchLabelsEntry_DoNotUse::LabelSelector_MatchLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LabelSelector_MatchLabelsEntry_DoNotUse::MergeFrom(const LabelSelector_MatchLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LabelSelector_MatchLabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LabelSelector_MatchLabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class LabelSelector::_Internal {
 public:
};

LabelSelector::LabelSelector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matchlabels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allocation.LabelSelector)
}
LabelSelector::LabelSelector(const LabelSelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchlabels_.MergeFrom(from.matchlabels_);
  // @@protoc_insertion_point(copy_constructor:allocation.LabelSelector)
}

void LabelSelector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelSelector_agones_2fallocation_2eproto.base);
}

LabelSelector::~LabelSelector() {
  // @@protoc_insertion_point(destructor:allocation.LabelSelector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelSelector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabelSelector::ArenaDtor(void* object) {
  LabelSelector* _this = reinterpret_cast< LabelSelector* >(object);
  (void)_this;
}
void LabelSelector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelSelector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelSelector& LabelSelector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelSelector_agones_2fallocation_2eproto.base);
  return *internal_default_instance();
}


void LabelSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:allocation.LabelSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchlabels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelSelector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> matchLabels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&matchlabels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelSelector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:allocation.LabelSelector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> matchLabels = 1;
  if (!this->_internal_matchlabels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "allocation.LabelSelector.MatchLabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "allocation.LabelSelector.MatchLabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_matchlabels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_matchlabels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_matchlabels().begin();
          it != this->_internal_matchlabels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LabelSelector_MatchLabelsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_matchlabels().begin();
          it != this->_internal_matchlabels().end(); ++it) {
        target = LabelSelector_MatchLabelsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:allocation.LabelSelector)
  return target;
}

size_t LabelSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allocation.LabelSelector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> matchLabels = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matchlabels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_matchlabels().begin();
      it != this->_internal_matchlabels().end(); ++it) {
    total_size += LabelSelector_MatchLabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelSelector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allocation.LabelSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelSelector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelSelector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allocation.LabelSelector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allocation.LabelSelector)
    MergeFrom(*source);
  }
}

void LabelSelector::MergeFrom(const LabelSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allocation.LabelSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchlabels_.MergeFrom(from.matchlabels_);
}

void LabelSelector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allocation.LabelSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelSelector::CopyFrom(const LabelSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allocation.LabelSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelSelector::IsInitialized() const {
  return true;
}

void LabelSelector::InternalSwap(LabelSelector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matchlabels_.Swap(&other->matchlabels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelSelector::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace allocation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::allocation::AllocationRequest* Arena::CreateMaybeMessage< ::allocation::AllocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::AllocationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::AllocationResponse_GameServerStatusPort* Arena::CreateMaybeMessage< ::allocation::AllocationResponse_GameServerStatusPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::AllocationResponse_GameServerStatusPort >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::AllocationResponse* Arena::CreateMaybeMessage< ::allocation::AllocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::AllocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::MultiClusterSetting* Arena::CreateMaybeMessage< ::allocation::MultiClusterSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::MultiClusterSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::MetaPatch_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::allocation::MetaPatch_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::MetaPatch_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::MetaPatch_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::allocation::MetaPatch_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::MetaPatch_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::MetaPatch* Arena::CreateMaybeMessage< ::allocation::MetaPatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::MetaPatch >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::LabelSelector_MatchLabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::allocation::LabelSelector_MatchLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::LabelSelector_MatchLabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::allocation::LabelSelector* Arena::CreateMaybeMessage< ::allocation::LabelSelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::allocation::LabelSelector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
